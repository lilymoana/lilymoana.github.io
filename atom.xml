<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lily&#39;s Blog</title>
  
  <subtitle>Winter is coming !</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lilymoana.github.io/"/>
  <updated>2017-11-22T05:25:28.822Z</updated>
  <id>https://lilymoana.github.io/</id>
  
  <author>
    <name>XU LI</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>共识算法的比较：Casper vs Tendermint</title>
    <link href="https://lilymoana.github.io/ConsensusCompare.html"/>
    <id>https://lilymoana.github.io/ConsensusCompare.html</id>
    <published>2017-11-18T11:18:05.000Z</published>
    <updated>2017-11-22T05:25:28.822Z</updated>
    
    <content type="html"><![CDATA[<p>  CTFG更注重可用性，Tendermint更注重一致性，CFFG介于两者之间。 <Excerpt in index | Homepage Digest></p><a id="more"></a><The rest of contents | Rest of all><p><img src="/asset/ConsensusCompare_head.jpeg" alt=""></p><h2 id="权益证明的漫漫长路"><a href="#权益证明的漫漫长路" class="headerlink" title="权益证明的漫漫长路"></a>权益证明的漫漫长路</h2><p>权益证明的定义可以查看<a href="https://blog.cosmos.network/understanding-the-basics-of-a-proof-of-stake-security-model-de3b3e160710">理解权益证明</a>。</p><p>1982年，拜占庭将军问题首次被Lamport，Shostak和Pease提出。Cosmos的Ethan Buchman这样描述它：”这是一个在可妥协的通信网络中实现分布式协议的问题，也就是在不可靠的环境中建立一个可靠的系统的问题“。从1982年到1999年，都没有人能够创造一个可以解决拜占庭将军问题系统。长久以来，拜占庭将军问题与计算都是无关的，因为在那个时候，互联网从基于云的中央计算演变而来，所需要解决的只是容错问题。</p><p>所以，故障容错算法得到普及，例如1998年发明的Paxos算法和2013年发明的Raft算法被广泛的应用。而1999年发明的实用拜占庭容错（PBFT）却没有被学术界之外采用。直到2008年，中本聪将网络规模级别的分布式拜占庭容错(BFT)算法设计到区块链方案中，才使拜占庭容错得到推广。当这种原型出现之后，系统研究界的人都开始围绕将学术界“奇物”应用到真实世界而去构思各种想法。</p><p>在2011年，<a href="https://bitcointalk.org/index.php?topic=27787.0">BitcoinTalk论坛</a>对一个叫做权益证明(PoS)的概念组织了一场讨论。最初的PoS协议例如点点币，实现结果的并不理想。第一个真正提出将BFT研究应用到PoS公有区块链环境中是Jae Kwon，他在2014年创造了Tendermint。</p><p>在当时，PoS研究做出了很大的假设：假设系统中的一系列对等节点都是静态的，并且在长时间内都是稳定的。在区块链环境中完全是不现实的。 Jae Kwon的重大突破是使Tendermint能够使用区块，哈希链接，动态验证器集合和循环的领导者选举来将BFT研究适应复制状态机（区块链）的领域。</p><p>在Tendermint环境中，出现了大量的共识算法（Honeybadger, Ouroboros, Tezos, Casper），它们都包含了BTF研究的元素以及在区块链上其他模块观察的元素。</p><p>为权益证明做的所有研究都指向一个重要问题：在不耗尽物质稀缺资源的情况下，我们可以达到工作量证明（PoW）的安全级别吗？这个问题可以转化为：PoS的投票权以链上货币计价而不是计算力计价。区块链的POS共识问题比可扩展性更被广泛讨论，运行PoW挖矿的高开销成本以及环境外部性方面存在的问题都刺激了大量资源涌入PoS安全研究。</p><p>本文主要探讨了在加密货币中使用了权益证明的三个主要PoS协议的特性：由Vlad Zamfir带领研究的Casper the Friendly Ghost(CTFG)和由Vitalik Buterin带领研究Casper the Friendly Finality Gadget(CFFG)以及Jae Kwon带领研究的<a href="https://github.com/tendermint/tendermint.github.io/blob/5c111743a03d2c6ed2e0b14bd3091cac8974c8da/docs/tendermint_v02.pdf">Tendermint</a>。</p><h2 id="权益证明的陷阱"><a href="#权益证明的陷阱" class="headerlink" title="权益证明的陷阱"></a>权益证明的陷阱</h2><h3 id="无利害关系"><a href="#无利害关系" class="headerlink" title="无利害关系"></a>无利害关系</h3><p>起初，有多种不同的说法来描述权益证明的一般陷阱，无利害关系就在这时被提出。Jae Kwon 2014年5月以“错误选择谬论”的不幸名字<a href="https://github.com/tendermint/tendermint.github.io/blob/5c111743a03d2c6ed2e0b14bd3091cac8974c8da/docs/tendermint_v02.pdf">第一次提到这个问题</a>。在2014年7月Vitalik把比特币开发者所描述的确切定义的问题普及推广为“无利害关系”。问题呈现出此情况：验证者通过在给定高度为多个有冲突的区块投票可以有效的破坏安全性而不用付出任何代价。</p><p>简单的PoS实现对于这些攻击而言是非常脆弱的。灾难性的是，因为没有任何的激励来鼓励大家永远集中在一个独一的链上，并且每一次激励都要一次性在多个相互冲突的链条上进行重复签名，所以为了获得更多的区块奖励，在经济上最优的策略就变成了尽可能的在多个分杈上进行投票。下面这张图就展示了：<br><img src="/asset/ConsensusCompare1.png" alt="在简单的PoS设计中竞争链上的期待投票数高于单一链上期待的投票数"></p><p>在工作量证明中，对于在多个链上进行挖矿的矿工“惩罚”是他们必须分开他们的计算力（非常稀缺的资源）。在现代非简并的PoS设计中，这种成本必须嵌入到协议里面以此模仿物理PoW挖矿的限制。</p><p> Vitalik Buterin在2014年1月引入的“slasher”概念或协议内惩罚可以减轻这个攻击。Jae Kwon在同一年<a href="https://tendermint.com/static/docs/tendermint.pdf">进一步推算了此方法</a>，这是实现Tendermint共识协议的第一个迭代进展。苛刻以及允许这种惩罚的条件，对于所有的非简并BFT协议都是有帮助的，甚至在本文中出现的三种共识都采用了。</p><h3 id="远程攻击"><a href="#远程攻击" class="headerlink" title="远程攻击"></a>远程攻击</h3><p>远程攻击来源于用户不得不撤回保证金的权利。这就产生了一个基本问题，因为这意味着攻击者可以从任意长度的距离建立一个分杈而不用担心被削减。一旦保证金被解除绑定，激励不从某个高度区块前进行长距离投票就被取消了。换句话说，当超过2/3的验证者解除了绑定，那么他们就可以恶意的创造包含之前验证者集的第二条链，这可能导致任意的交易。</p><p>对于权益证明协议这是相当致命的，因为安全模型必然是“主观”的。当参与网络要求大量的社会信息，那么这个安全模型就会被称为是“主观的”。一个新节点加入网络之后，对于当前网络的状态可能会得出不同的结论，因为他们的决策是基于主观信息的，即社会声誉。在相反面，工作量证明的安全模型必然是“客观的”，因为当前网络状态总是工作量最多的那个状态，新节点对于网络状态的结论总是相同的，因为他们的决策是基于客观信息。</p><p>PoS的远程攻击在<a href="https://blog.ethereum.org/2014/11/25/proof-stake-learned-love-weak-subjectivity/">弱主观性</a>模型下进行了纠正，这要求接入到网络中的后续新节点：</p><ul><li><em>当前必须是被绑定的</em>。只相信<em>当前</em>有保证金的验证节点</li><li>解除绑定保证金必须要经过一个”解冻”时期。解除绑定之后，虚拟币为引起的数周到数月的同步猜想需要时间进行”解冻”（即延迟的消息）。</li><li>禁止在N个块之前恢复，其中N是保证金的长度。 这个规则使任何长程分杈无效。</li><li>可选择的将验证者集存放在PoW的链上<br><img src="/asset/ConsensusCompare2.png" alt=""></li></ul><p>Casper（s）和Tendermint采用一种简单的锁定机制（“Tendermint”中俗称“冻结”）来锁定股权一段时间（几周到几个月后“解冻”），以防止任何恶意联合验证者 违反安全。在CFFG算法中，一个分杈选择规则永远只能修改最终块之后的块阻止了远程攻击。通过使用时间戳，在CFFG中的长距离分叉试图修改比最终块还要更早的块的时候会被协议直接忽略掉。</p><h2 id="卡特尔形式"><a href="#卡特尔形式" class="headerlink" title="卡特尔形式"></a>卡特尔形式</h2><p>第三，最后的障碍是面临任意价值的任何经济形式都将面对一个真正的寡头垄断问题，就算本土加密货币也不例外。</p><p><em>“加密货币令人难以置信的集中，挖矿算力也是一样。寡头垄断竞争是很多现实市场的常态。少数相对富有的验证者之间的协调比多数相对贫穷验证者之间的协调要容易的多。在我们这种情况下，卡特尔形式是完全被预料到的。”</em><br>——Vlad Zamfir，<a href="https://medium.com/@Vlad_Zamfir/the-history-of-casper-chapter-4-3855638b5f0e"><em>Casper的历史第4章节</em></a></p><p>Tendermint依靠额外协议管理方法来与寡头垄断验证者进行对抗。虽然在审查制度方面没有任何协议措施，但依靠带外社会信息解决卡特尔形成，其中的基本原理是：用户最终将不可避免地注意到卡特尔的形成，社会上也会对此到处八卦，然后放弃或者投票重新组织受到攻击的区块链。</p><p>到目前为止，Vlad的Casper协议是唯一一个明确使用共识内审查激励来打击卡特尔形式一种模式。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>有很多不同的方式来实现权益证明的算法，但是权益证明设计的两个主要原理是基于链的PoS和基于拜占庭容错(BFT)的PoS。Tendermint是基于拜占庭容错的PoS设计，CTFG是基于链的PoS设计，而CFFG则混合了两者。</p><p>计算机科学中的<a href="https://en.wikipedia.org/wiki/CAP_theorem">CAP理论</a>返回在分布式数据系统中提供超过2/3担保的不可能性：可用性、一致性、分区容错。基于链的PoS算法倾向于选择可用性高的而不选择一致性高的，因为可用性高意味着所有的交易都能被处理，不过要以牺牲整个网络中一致性状态复制为代价。基于BFT的却相反，会倾向于选择高一致性。</p><h3 id="基于BTF的权益证明"><a href="#基于BTF的权益证明" class="headerlink" title="基于BTF的权益证明"></a>基于BTF的权益证明</h3><p>拜占庭容错共识算法源于30多年的丰富研究。Tendermint（2014）是Castro和Liskov在1999年引入的实用拜占庭容错(PBFT)算法的第一个PoS的改编版。基于BFT的PoS协议伪随机的安排一个验证者在多轮投票的过程中提出一个区块。但是，提交和最终化区块取决于大多数——所有验证者中2/3的验证者在提交的区块中签名。在区块最终化之前可能需要进行几轮(译者注：这种多轮投票和现实世界的波尔卡舞蹈类似， 这也是polkadot 名字的由来)签名。BFT系统只能容错1/3的失败，其中失败包括故障或是恶意的攻击。</p><h3 id="Tendermint核心"><a href="#Tendermint核心" class="headerlink" title="Tendermint核心"></a>Tendermint核心</h3><p>Tendermint主要包含两个主要的技术：区块链共识引擎和通用的应用接口。共识引擎被称为Tendermint核心模块，确保相同的交易在每个机器中都按照相同的顺序被记录下来。应用接口被称为应用区块链接口(ABCI)，让交易可以被任何编程语言编写的程序处理。</p><p>在核心模块中，Tendermint基于循环投票机制进行工作，这也是共识协议的原理。一个回合被分成3个处理步骤：验证者提出一个块、发送提交意图、签名后提交一个新区块。这种机制为原子广播提供了一个安全的状态复制机，增加了一个责任层——安全故障可以完全归结于Tendermint。</p><p>Tendermint共识算法从验证者集开始。验证者们都维护了一份区块链的全拷贝，并且可以用公钥来识别验证者的身份。在每个新的块高度他们轮流的提出一个区块。每轮投票都只有一个验证者可以提出块，并且要用验证者相应的私钥对此进行签名，这样的话如果有错误发生就可以找到为此负责的验证者。然后剩下的验证者就需要对每个提议都进行投票，投票都需要用自己的私钥进行签名。这些组成一个回合。不过可能因为网络的异步需要好几个回合才能提交一个新块。<br><img src="/asset/ConsensusCompare3.jpeg" alt=""></p><p>验证者提交块的时候由于几种原因可能会失败：当前的提议可能下线了，或者网络可能遇到了延迟。Tendermint允许验证者可以被跳过（就是轮到一个验证者出块的时候但是此验证者没出块）。验证者在移到下一轮投票之前等待一小段时间来接收提议者（此轮出块的验证者）提出的整个区块。这种对超时的依赖让Tendermint成为一个弱同步协议，而不是一个异步协议。不过，剩下的协议是异步的，并且验证者只有在接收到了超过2/3的验证者集消息时才会进行处理事物。正是因为这样，所以Tendermint需要大多数的验证者可以100%正常运行，如果1/3或更多的验证者离线或脱机，网路就会停止运行了。</p><p>假设少于1/3的验证者是拜占庭，Tendermint保证安全永远不会被破坏——也就是，验证者（2/3以上）永远不会在同一个高度提交冲突的区块。因此，基于Temdermint的区块链永远不会分叉。</p><p>目前为止，Tendermint的设计决策确实是把安全性和不可改变性地位放在了灵活性之上。在现实世界上有相当高的可能性是，系统真的会停止运行，参与者将会需要在协议外组织在某种软件上更新后重启系统。</p><p>在数字加密货币社区中只有少数人理解 Casper以及为什么它很有价值的时候，Tendermint就为Casper研究奠定了基础。这个洞察力就是：如果一个链的本身是高度容错的，那么你就可以依赖链来对于谁来生产区块做出一个好的决定，但是如果链的本身就是不可靠的，那么你就陷入了鸡和鸡蛋的问题中去了，这也是之前所有其他共识算法的灭顶之灾。</p><p>这个设计决策被认为不如可用性优先的协议例如以太坊和比特币。比特币中的权衡是：如果它的网络被分裂了，比特币在各种攻击的情况下就失去了它的安全保证。这其实就是一个不可修改理论，也就是你的置信区间是100%的时候，那么你跟随的就是一条正确的链，你会使用这条链来选择谁来生产下个区块，但是一旦你转移到一条不安全的链上之后，并没有一条明确的路径让你回到正确的链上。</p><h4 id="Tendermint的明确属性"><a href="#Tendermint的明确属性" class="headerlink" title="Tendermint的明确属性"></a>Tendermint的明确属性</h4><ul><li>可证明的活跃性</li><li>安全阈值：1/3的验证者</li><li>公有/私有链相容</li><li>即时的最终确定性：1-3秒，取决于验证者数量</li><li>一致性优先</li><li>在弱同步性网络的共识安全</li></ul><h2 id="基于链的权益证明"><a href="#基于链的权益证明" class="headerlink" title="基于链的权益证明"></a>基于链的权益证明</h2><p>基于链的权益证明模仿了工作量证明共识算法，在此权益证明中协议让伪随机选择出来的验证者产生一个新块，新块是哈希连接（包含上个块的哈希值）到前一个最长链的父区块上。基于链的PoS非常依赖同步的网络，通常优先考虑可用性而非一致性。Casper(s)对于倾向于活跃性而非安全性环境而言，它就是Tendermint核心思想的一个改编。</p><h3 id="CFFG"><a href="#CFFG" class="headerlink" title="CFFG"></a>CFFG</h3><p>CTFG是一个明确的PoS构造，但是CFFG是一个覆盖在已存在的以太坊PoW提议机制上的PoS——融合了PoW和PoS两者，由Vitalik Buterin带领实现。</p><p>比特币和以太坊的PoW共识协议都不会做“最终”决定，并且区块可能会潜在的被重新组织到一些过去区块高度。当区块没有机会再被修改的时候才能称为“最终确定”的。因为工作量证明没有提供这样的修改保证，所以它被认为是共识不安全的。相反，当我们持续加长链的时候区块的最终确定性概率也越来越高。为了为以太坊区块链增加想要的最终确定性和51%的攻击阻力，CFFG实现的逻辑就完美的提供了这种效果。</p><p>CFFG将通过多个步骤推出，以保守的方式将以太坊的PoW安全模式逐渐过渡到PoS安全模式。Casper的第一个迭代将会是实现这里讨论的混合PoW/PoS协议，Casper的最后一个迭代很有可能吸取CFFG和CTFG的教训，朝着一个完整的PoS协议发展。</p><p>CFFG是基于链的PoS和基于BFT的PoS的之间的混合体，因为它吸取了两者的思想。它的模块化覆盖设计让现在的PoW链的更新变得更加容易，因为它对于将系统升级到完全不同的共识模式而言是一种更保守的方法。</p><p>Casper的应用逻辑存在于智能合约的内部。要想在Casper中成为验证者，必须要有ETH并且要将ETH存储到Casper智能合约中作为杠杆的权益。在Casper第一次迭代中区块提议的机制会被保留：它依然使用Nakamoto PoW共识，矿工可以创建区块。不过为了最终化区块，Casper的PoS覆盖掌握控制权，并且拥有自己的验证者在PoW矿工之后进行投票。</p><p>Casper的PoS共识最重要的一个部分就是检查点(checkpoints)。Casper在50区块增量的时候评估最终确定性就称之为检查点，每50个块片段就称之为周期(epoch)。通过验证者在每个周期发送投票消息时触发这个处理过程。</p><p>在一个周期前最终化检查点需要2个周期才能完成，也就是需要两轮投票。例如，当超过2/3的验证者（也就是大多数）给一个检查点c投票了，那么就说这个检查点已经被”审判”了。下一个周期，当大多数人给检查点c投票了，会发生两件事情：c变成了被审判的并且c已经最终化了。c这个周期也就代表着最后一个最终化的周期(LFE)。</p><p>回顾一下，一个区块最终化需要两个条件：</p><ul><li>大多数(超过2/3)验证者在周期1的时候给区块1进行了投票，因此审判了区块1</li><li>大多数(超过2/3)验证者在周期2的时候给区块2进行了投票，区块2是区块1的子区块，因此在周期2的时候最终化了区块1</li></ul><p>在理想执行中，一个区块的最终化是按照下面的步骤的：</p><blockquote><p>区块1的2/3投票→审判区块1→2/3投票区块2→最终化区块1</p><ul><li>其中区块2是区块1的子区块<br><img src="/asset/ConsensusCompare4.png" alt=""></li></ul></blockquote><p>当一个检查点被最终化之后验证者就会得到报酬。不过，如果有两个最终化的检查点在相同高度上分杈时，那么就破坏了安全性，这个时候就达到了消减的条件，最少1/3的保证金将会被消减掉。当安全性被破坏的时候可以将错误归因的证据当作交易广播给PoW的矿工。然后PoW就将这个证据交易组成一个区块来进行挖矿，提交了这个证据的验证者会得到查找者的费用。当此事发生的时候，签署了在冲突区块的有罪验证者将会在两条链上被消减掉。</p><p>现在如果一个矿工进行蛮力攻击，那么会发生什么？现在Casper的最终化区块链可以防止PoW的攻击者，就算是51%或者更多的计算力重写最新检查点之外的历史也会被阻止。因此，Casper协议提供了安全。不像CTFG，因为CFFG就是不同提议机制上的一层覆盖，Casper不能确保活跃性，因为活跃性是取决于提议机制的。</p><p>验证者是被激励着集合在权威链上的，因为如果他们持续在不同的链上进行投票将会受到惩罚。<a href="https://docs.google.com/document/d/13_FSQ1Koq8uLvqTaSvZdb6OT2SpUZZq53vFiiDQj4qM/edit?usp=sharing">slasher 2.0</a>的形成让验证者不仅仅会为双重投票而受罚也要为在<em>不正确</em>的链上进行投票而受到惩罚。不过这也造成了一个“泄气”的窘境，因为验证者担心如果出现一个分杈而自己不确定到底哪个才是权威的，然后投错票之后被消减所以选择退出投票。</p><h4 id="CFFG的明确属性"><a href="#CFFG的明确属性" class="headerlink" title="CFFG的明确属性"></a>CFFG的明确属性</h4><ul><li>最终化：超过20分钟最终化。每隔50块（一个周期）就最终化一次区块，防止PoW挖矿暴利攻击</li><li>共识安全性</li><li>可证明的活跃性</li><li>优先可用性</li></ul><h3 id="CTFG"><a href="#CTFG" class="headerlink" title="CTFG"></a>CTFG</h3><p>CTFG是Vlad Zamfir的正确构造(CBC)共识协议专用于对抗寡头垄断的真实世界的环境。CTFG是工作量证明中<a href="https://eprint.iacr.org/2013/881.pdf">GHOS</a>或GHOST协议的PoS改编版，用于其分杈选择规则。CTFG背后的指导设计原则是基于加密经济学的，使用旨在实现评估安全的正规方法。与前面详细说明的CFFG混合协议不同，CTFG是纯粹的权益证明的概念。</p><p><em>“Casper刚刚开始的时候只是简单的‘友好的幽灵’，它对于PoS而言是GHOST的改编，完善的激励让卡特尔‘友善地’变成‘非卡特尔’的验证者。”</em></p><p>——Vlad Zamfir，<a href="https://medium.com/@Vlad_Zamfir/the-history-of-casper-chapter-5-8652959cef58"><em>Casper的历史第5章</em></a></p><p>与工作量证明类似，CTFG会为一致性和可用性进行权衡。特别，在区块没有被最终化的时候，随着在链中的深度越深的它们就会越安全。CTFG与CFFG有一点相似，链头部的处理总是比区块最终化的处理要快很多。</p><p>Casper的PoS提议机制与Tendermint提议机制最大的区别是相比较伪随机选择领导者，前者的验证者可以基于自己见到的块提出块。</p><p>Casper提供的一个独特功能是参数化安全阈值。与比特币中使用6个确认来确定一个经济最终状态类似，CTFG中的“评估安全”提供了一个验证者可以有一个与其他验证者不同的安全阈值功能。Casper的设计目标是在网络维持PoS低开销的时候能够允许验证者选择自己的容错阈值。</p><p>Casper对Tendermint的核心优势在于网络随时可以容纳一定数量的验证者。因为Tendermint中的区块在创建的时候需要最终化，所以区块的确认时间应该短一点。为了达到短区块时间，Tendermint PoS能够容纳的验证者数量就需要有个限制。由于CTFG和CFFG到在区块创建的时候都不需要安全性，所以以太坊网络相对于cosmos容纳100个验证者来说，可以容纳验证者的数量会更加的多一点。</p><h4 id="CTFG的明确属性"><a href="#CTFG的明确属性" class="headerlink" title="CTFG的明确属性"></a>CTFG的明确属性</h4><ul><li>可用性。Casper的节点在它们达成共识之前可以块分杈</li><li>异步安全性</li><li>生存。Casper的决策可以在部分同步中存活，但是不能在异步中存活</li><li>卡特尔阻力。Casper的整个前提是建立在抵制寡头垄断攻击者基础之上，因此不会有任何勾结的验证者可以超越协议</li><li>安全性。取决于每个验证者的评估安全阈值</li></ul><h2 id="未来的工作"><a href="#未来的工作" class="headerlink" title="未来的工作"></a>未来的工作</h2><p>公链在产品上运行是一个比较新生的技术。在这个范例中到目前为止显示出不会腐败的唯一安全模型就是工作量证明。权益证明的设计空间还非常的大，而且工程学上权衡的理解也远远不够，因为权益证明是一个研究前沿也没有足够的数据。不用多说，要达到一个最佳的PoS共识算法，我们还有很多未来工作需要完成。</p><p>Tendermint的一个改进可能是新的提出机制，或者将Tendermint的多轮投票过程压缩成一轮投票。</p><p>第二个未来工作的领域可能是利用更高级的加密技术让区块头的签名更小一点。因为我们是通过Cosmos来建立一个“区块链的互联网”，所以将轻客户端证明从一条链上移到另一条链上就是我们的核心工作。从这个观点来看的话，使用更加高级的密码学将区块头的大小减少三十倍或者更多是非常有利的。目前，100验证者，Tendermint的区块头接近4KB，它们都是验证者的签名。我们可以使用高级的加密技术让100个签名从3.2KB减少到64字节。</p><p>还有一些优化p2p层的方法，这样我们就可以显著减少点对点需要最终化块的流量。在未来的工作中，不仅仅是压缩区块头中的数据量，还会减少发送到对端的数据量。这样的话，在Cosmos网络初始100个验证者的阈值之上，Tendermint还可以增加更大的验证者集。</p><p>翻译作者: <a href="https://lilymoana.github.io/">许莉</a><br>翻译校对：<a href="https://gguoss.github.io/">郭光华</a><br>原文地址：<a href="https://blog.cosmos.network/consensus-compare-casper-vs-tendermint-6df154ad56ae">Consensus Compare: Casper vs. Tendermint</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  CTFG更注重可用性，Tendermint更注重一致性，CFFG介于两者之间。 &lt;Excerpt in index | Homepage Digest&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="translation" scheme="https://lilymoana.github.io/categories/translation/"/>
    
    
      <category term="blockchain" scheme="https://lilymoana.github.io/tags/blockchain/"/>
    
      <category term="Consensus" scheme="https://lilymoana.github.io/tags/Consensus/"/>
    
  </entry>
  
  <entry>
    <title>深入了解以太坊虚拟机</title>
    <link href="https://lilymoana.github.io/evm_part1.html"/>
    <id>https://lilymoana.github.io/evm_part1.html</id>
    <published>2017-10-30T08:48:52.000Z</published>
    <updated>2017-11-22T05:25:28.822Z</updated>
    
    <content type="html"><![CDATA[<p><strong> </strong>  <Excerpt in index | Homepage Digest></p><p>深入了解以太坊虚拟机是一个系列的文章，一共5篇！ 本文是第1篇，主要介绍的是以太坊虚拟机汇编代码基础。后续的4篇译文链接在本文的结尾处。</p><a id="more"></a><The rest of contents | Rest of all><p><img src="http://upload-images.jianshu.io/upload_images/8388873-16fc12cd8a9b1992.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>Solidity提供了很多高级语言的抽象概念，但是这些特性让人很难明白在运行程序的时候到底发生了什么。我阅读了Solidity的文档，但依旧存在着几个基本的问题没有弄明白。</p><p><em>string, bytes32, byte[], bytes之间的区别是什么？</em></p><ul><li>该在什么地方使用哪个类型？</li><li>将 string 转换成bytes时会怎么样？可以转换成byte[]吗？</li><li>它们的存储成本是多少？</li></ul><p><em>EVM是如何存储映射( mappings)的？</em></p><ul><li>为什么不能删除一个映射？</li><li>可以有映射的映射吗？(可以，但是怎样映射？)</li><li>为什么存在存储映射，但是却没有内存映射？</li></ul><p><em>编译的合约在EVM看来是什么样子的？</em></p><ul><li>合约是如何创建的？</li><li>到底什么是构造器？</li><li>什么是 fallback 函数？</li></ul><p>我觉得学习在以太坊虚拟机(EVM)上运行的类似Solidity 高级语言是一种很好的投资，有几个原因：</p><ol><li><em>Solidity不是最后一种语言</em>。更好的EVM语言正在到来。（拜托？）</li><li><em>EVM是一个数据库引擎</em>。要理解智能合约是如何以任意EVM语言来工作的，就必须要明白数据是如何被组织的，被存储的，以及如何被操作的。</li><li><em>知道如何成为贡献者。</em>以太坊的工具链还处于早期，理解EVM可以帮助你实现一个超棒的工具给自己和其他人使用。</li><li><em>智力的挑战。</em>EVM可以让你有个很好的理由在密码学、数据结构、编程语言设计的交集之间进行翱翔。</li></ol><p>在这个系列的文章中，我会拆开一个简单的Solidity合约，来让大家明白它是如何以EVM字节码(bytecode)来运行的。</p><p>我希望能够学习以及会书写的文章大纲：</p><ul><li>EVM字节码的基础认识</li><li>不同类型(映射，数组)是如何表示的</li><li>当一个新合约创建之后会发生什么</li><li>当一个方法被调用时会发生什么</li><li>ABI如何桥接不同的EVM语言</li></ul><p>我的最终目标是整体的理解一个编译的Solidity合约。让我们从阅读一些基本的EVM字节码开始。</p><p><a href="https://gist.github.com/hayeah/bd37a123c02fecffbe629bf98a8391df">EVM指令集</a>将是一个比较有帮助的参考。</p><h2 id="一个简单的合约"><a href="#一个简单的合约" class="headerlink" title="一个简单的合约"></a>一个简单的合约</h2><p>我们的第一个合约有一个构造器和一个状态变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// c1.sol</span><br><span class="line">pragma solidity ^0.4.11;</span><br><span class="line">contract C &#123;</span><br><span class="line">    uint256 a;</span><br><span class="line">    function C() &#123;</span><br><span class="line">      a = 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用<code>solc</code>来编译此合约：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">$ solc --bin --asm c1.sol</span><br><span class="line">======= c1.sol:C =======</span><br><span class="line">EVM assembly:</span><br><span class="line">    /* &quot;c1.sol&quot;:26:94  contract C &#123;... */</span><br><span class="line">  mstore(0x40, 0x60)</span><br><span class="line">    /* &quot;c1.sol&quot;:59:92  function C() &#123;... */</span><br><span class="line">  jumpi(tag_1, iszero(callvalue))</span><br><span class="line">  0x0</span><br><span class="line">  dup1</span><br><span class="line">  revert</span><br><span class="line">tag_1:</span><br><span class="line">tag_2:</span><br><span class="line">    /* &quot;c1.sol&quot;:84:85  1 */</span><br><span class="line">  0x1</span><br><span class="line">    /* &quot;c1.sol&quot;:80:81  a */</span><br><span class="line">  0x0</span><br><span class="line">    /* &quot;c1.sol&quot;:80:85  a = 1 */</span><br><span class="line">  dup2</span><br><span class="line">  swap1</span><br><span class="line">  sstore</span><br><span class="line">  pop</span><br><span class="line">    /* &quot;c1.sol&quot;:59:92  function C() &#123;... */</span><br><span class="line">tag_3:</span><br><span class="line">    /* &quot;c1.sol&quot;:26:94  contract C &#123;... */</span><br><span class="line">tag_4:</span><br><span class="line">  dataSize(sub_0)</span><br><span class="line">  dup1</span><br><span class="line">  dataOffset(sub_0)</span><br><span class="line">  0x0</span><br><span class="line">  codecopy</span><br><span class="line">  0x0</span><br><span class="line">  return</span><br><span class="line">stop</span><br><span class="line">sub_0: assembly &#123;</span><br><span class="line">        /* &quot;c1.sol&quot;:26:94  contract C &#123;... */</span><br><span class="line">      mstore(0x40, 0x60)</span><br><span class="line">    tag_1:</span><br><span class="line">      0x0</span><br><span class="line">      dup1</span><br><span class="line">      revert</span><br><span class="line">auxdata: 0xa165627a7a72305820af3193f6fd31031a0e0d2de1ad2c27352b1ce081b4f3c92b5650ca4dd542bb770029</span><br><span class="line">&#125;</span><br><span class="line">Binary:</span><br><span class="line">60606040523415600e57600080fd5b5b60016000819055505b5b60368060266000396000f30060606040525b600080fd00a165627a7a72305820af3193f6fd31031a0e0d2de1ad2c27352b1ce081b4f3c92b5650ca4dd542bb770029</span><br></pre></td></tr></table></figure></p><p><code>6060604052...</code>这串数字就是EVM实际运行的字节码。</p><h2 id="一小步一小步的来"><a href="#一小步一小步的来" class="headerlink" title="一小步一小步的来"></a>一小步一小步的来</h2><p>上面一半的编译汇编是大多数Solidity程序中都会存在的样板语句。我们稍后再来看这些。现在，我们来看看合约中独特的部分，简单的存储变量赋值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = 1</span><br></pre></td></tr></table></figure></p><p>代表这个赋值的字节码是<code>6001600081905550</code>。我们把它拆成一行一条指令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">60 01</span><br><span class="line">60 00</span><br><span class="line">81</span><br><span class="line">90</span><br><span class="line">55</span><br><span class="line">50</span><br></pre></td></tr></table></figure></p><p>EVM本质上就是一个循环，从上到下的执行每一条命令。让我们用相应的字节码来注释汇编代码(缩进到标签<code>tag_2</code>下)，来更好的看看他们之间的关联：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">tag_2:</span><br><span class="line">  // 60 01</span><br><span class="line">  0x1</span><br><span class="line">  // 60 00</span><br><span class="line">  0x0</span><br><span class="line">  // 81</span><br><span class="line">  dup2</span><br><span class="line">  // 90</span><br><span class="line">  swap1</span><br><span class="line">  // 55</span><br><span class="line">  sstore</span><br><span class="line">  // 50</span><br><span class="line">  pop</span><br></pre></td></tr></table></figure></p><p>注意<code>0x1</code>在汇编代码中实际上是<code>push(0x1)</code>的速记。这条指令将数值1压入栈中。</p><p>只是盯着它依然很难明白到底发生了什么，不过不用担心，一行一行的模拟EVM是比较简单的。</p><h2 id="模拟EVM"><a href="#模拟EVM" class="headerlink" title="模拟EVM"></a>模拟EVM</h2><p>EVM是个堆栈机器。指令可能会使用栈上的数值作为参数，也会将值作为结果压入栈中。让我们来思考一下<code>add</code>操作。</p><p>假设栈上有两个值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1 2]</span><br></pre></td></tr></table></figure></p><p>当EVM看见了<code>add</code>，它会将栈顶的2项相加，然后将答案压入栈中，结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[3]</span><br></pre></td></tr></table></figure></p><p>接下来，我们用<code>[]</code>符号来标识栈：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 空栈</span><br><span class="line">stack: []</span><br><span class="line">// 有3个数据的栈，栈顶项为3，栈底项为1</span><br><span class="line">stack: [3 2 1]</span><br></pre></td></tr></table></figure></p><p>用<code>{}</code>符号来标识合约存储器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 空存储</span><br><span class="line">store: &#123;&#125;</span><br><span class="line">// 数值0x1被保存在0x0的位置上</span><br><span class="line">store: &#123; 0x0 =&gt; 0x1 &#125;</span><br></pre></td></tr></table></figure></p><p>现在让我们来看看真正的字节码。我们将会像EVM那样来模拟<code>6001600081905550</code>字节序列，并打印出每条指令的机器状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 60 01:将1压入栈中</span><br><span class="line">0x1</span><br><span class="line">  stack: [0x1]</span><br><span class="line">// 60 00: 将0压入栈中</span><br><span class="line">0x0</span><br><span class="line">  stack: [0x0 0x1]</span><br><span class="line">// 81: 复制栈中的第二项</span><br><span class="line">dup2</span><br><span class="line">  stack: [0x1 0x0 0x1]</span><br><span class="line">// 90: 交换栈顶的两项数据</span><br><span class="line">swap1</span><br><span class="line">  stack: [0x0 0x1 0x1]</span><br><span class="line">// 55: 将数值0x01存储在0x0的位置上</span><br><span class="line">// 这个操作会消耗栈顶两项数据</span><br><span class="line">sstore</span><br><span class="line">  stack: [0x1]</span><br><span class="line">  store: &#123; 0x0 =&gt; 0x1 &#125;</span><br><span class="line">// 50: pop (丢弃栈顶数据)</span><br><span class="line">pop</span><br><span class="line">  stack: []</span><br><span class="line">  store: &#123; 0x0 =&gt; 0x1 &#125;</span><br></pre></td></tr></table></figure></p><p>最后，栈就为空栈，而存储器里面有一项数据。</p><p>值得注意的是Solidity已经决定将状态变量<code>uint256 a</code>保存在<code>0x0</code>的位置上。其他语言完全可以选择将状态变量存储在其他的任何位置上。</p><p><code>6001600081905550</code>字节序列在本质上用EVM的操作伪代码来表示就是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// a = 1</span><br><span class="line">sstore(0x0, 0x1)</span><br></pre></td></tr></table></figure></p><p>仔细观察，你就会发现<code>dup2</code>，<code>swap1</code>，<code>pop</code>都是多余的，汇编代码可以更简单一些：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x1</span><br><span class="line">0x0</span><br><span class="line">sstore</span><br></pre></td></tr></table></figure></p><p>你可以模拟上面的3条指令，然后会发现他们的机器状态结果都是一样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stack: []</span><br><span class="line">store: &#123; 0x0 =&gt; 0x1 &#125;</span><br></pre></td></tr></table></figure></p><h2 id="两个存储变量"><a href="#两个存储变量" class="headerlink" title="两个存储变量"></a>两个存储变量</h2><p>让我们再额外的增加一个相同类型的存储变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// c2.sol</span><br><span class="line">pragma solidity ^0.4.11;</span><br><span class="line">contract C &#123;</span><br><span class="line">    uint256 a;</span><br><span class="line">    uint256 b;</span><br><span class="line">    function C() &#123;</span><br><span class="line">      a = 1;</span><br><span class="line">      b = 2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译之后，主要来看<code>tag_2</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ solc --bin --asm c2.sol</span><br><span class="line">//前面的代码忽略了</span><br><span class="line">tag_2:</span><br><span class="line">    /* &quot;c2.sol&quot;:99:100  1 */</span><br><span class="line">  0x1</span><br><span class="line">    /* &quot;c2.sol&quot;:95:96  a */</span><br><span class="line">  0x0</span><br><span class="line">    /* &quot;c2.sol&quot;:95:100  a = 1 */</span><br><span class="line">  dup2</span><br><span class="line">  swap1</span><br><span class="line">  sstore</span><br><span class="line">  pop</span><br><span class="line">    /* &quot;c2.sol&quot;:112:113  2 */</span><br><span class="line">  0x2</span><br><span class="line">    /* &quot;c2.sol&quot;:108:109  b */</span><br><span class="line">  0x1</span><br><span class="line">    /* &quot;c2.sol&quot;:108:113  b = 2 */</span><br><span class="line">  dup2</span><br><span class="line">  swap1</span><br><span class="line">  sstore</span><br><span class="line">  pop</span><br></pre></td></tr></table></figure></p><p>汇编的伪代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// a = 1</span><br><span class="line">sstore(0x0, 0x1)</span><br><span class="line">// b = 2</span><br><span class="line">sstore(0x1, 0x2)</span><br></pre></td></tr></table></figure></p><p>我们可以看到两个存储变量的存储位置是依次排列的，<code>a</code>在<code>0x0</code>的位置而<code>b</code>在<code>0x1</code>的位置。</p><h2 id="存储打包"><a href="#存储打包" class="headerlink" title="存储打包"></a>存储打包</h2><p>每个存储槽都可以存储32个字节。如果一个变量只需要16个字节但是使用全部的32个字节会很浪费。Solidity为了高效存储，提供了一个优化方案：如果可以的话，就将两个小一点的数据类型进行打包然后存储在一个存储槽中。</p><p>我们将<code>a</code>和<code>b</code>修改成16字节的变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br><span class="line">contract C &#123;</span><br><span class="line">    uint128 a;</span><br><span class="line">    uint128 b;</span><br><span class="line">    function C() &#123;</span><br><span class="line">      a = 1;</span><br><span class="line">      b = 2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译此合约：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ solc --bin --asm c3.sol</span><br></pre></td></tr></table></figure></p><p>产生的汇编代码现在更加的复杂一些：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">tag_2:</span><br><span class="line">  // a = 1</span><br><span class="line">  0x1</span><br><span class="line">  0x0</span><br><span class="line">  dup1</span><br><span class="line">  0x100</span><br><span class="line">  exp</span><br><span class="line">  dup2</span><br><span class="line">  sload</span><br><span class="line">  dup2</span><br><span class="line">  0xffffffffffffffffffffffffffffffff</span><br><span class="line">  mul</span><br><span class="line">  not</span><br><span class="line">  and</span><br><span class="line">  swap1</span><br><span class="line">  dup4</span><br><span class="line">  0xffffffffffffffffffffffffffffffff</span><br><span class="line">  and</span><br><span class="line">  mul</span><br><span class="line">  or</span><br><span class="line">  swap1</span><br><span class="line">  sstore</span><br><span class="line">  pop</span><br><span class="line">  // b = 2</span><br><span class="line">  0x2</span><br><span class="line">  0x0</span><br><span class="line">  0x10</span><br><span class="line">  0x100</span><br><span class="line">  exp</span><br><span class="line">  dup2</span><br><span class="line">  sload</span><br><span class="line">  dup2</span><br><span class="line">  0xffffffffffffffffffffffffffffffff</span><br><span class="line">  mul</span><br><span class="line">  not</span><br><span class="line">  and</span><br><span class="line">  swap1</span><br><span class="line">  dup4</span><br><span class="line">  0xffffffffffffffffffffffffffffffff</span><br><span class="line">  and</span><br><span class="line">  mul</span><br><span class="line">  or</span><br><span class="line">  swap1</span><br><span class="line">  sstore</span><br><span class="line">  pop</span><br></pre></td></tr></table></figure></p><p>上面的汇编代码将这两个变量打包放在一个存储位置(<code>0x0</code>)上，就像这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[         b         ][         a         ]</span><br><span class="line">[16 bytes / 128 bits][16 bytes / 128 bits]</span><br></pre></td></tr></table></figure></p><p>进行打包的原因是因为目前最昂贵的操作就是存储的使用：</p><ul><li><code>sstore</code>指令第一次写入一个新位置需要花费20000 gas</li><li><code>sstore</code>指令后续写入一个已存在的位置需要花费5000 gas</li><li><code>sload</code>指令的成本是500 gas</li><li>大多数的指令成本是3~10 gas</li></ul><p>通过使用相同的存储位置，Solidity为存储第二个变量支付5000 gas，而不是20000 gas，节约了15000 gas。</p><h2 id="更多优化"><a href="#更多优化" class="headerlink" title="更多优化"></a>更多优化</h2><p>应该可以将两个128位的数打包成一个数放入内存中，然后使用一个’sstore’指令进行存储操作，而不是使用两个单独的<code>sstore</code>命令来存储变量<code>a</code>和<code>b</code>，这样就额外的又省了5000 gas。</p><p>你可以通过添加<code>optimize</code>选项来让Solidity实现上面的优化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ solc --bin --asm --optimize c3.sol</span><br></pre></td></tr></table></figure></p><p>这样产生的汇编代码只有一个<code>sload</code>指令和一个<code>sstore</code>指令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">tag_2:</span><br><span class="line">    /* &quot;c3.sol&quot;:95:96  a */</span><br><span class="line">  0x0</span><br><span class="line">    /* &quot;c3.sol&quot;:95:100  a = 1 */</span><br><span class="line">  dup1</span><br><span class="line">  sload</span><br><span class="line">    /* &quot;c3.sol&quot;:108:113  b = 2 */</span><br><span class="line">  0x200000000000000000000000000000000</span><br><span class="line">  not(sub(exp(0x2, 0x80), 0x1))</span><br><span class="line">    /* &quot;c3.sol&quot;:95:100  a = 1 */</span><br><span class="line">  swap1</span><br><span class="line">  swap2</span><br><span class="line">  and</span><br><span class="line">    /* &quot;c3.sol&quot;:99:100  1 */</span><br><span class="line">  0x1</span><br><span class="line">    /* &quot;c3.sol&quot;:95:100  a = 1 */</span><br><span class="line">  or</span><br><span class="line">  sub(exp(0x2, 0x80), 0x1)</span><br><span class="line">    /* &quot;c3.sol&quot;:108:113  b = 2 */</span><br><span class="line">  and</span><br><span class="line">  or</span><br><span class="line">  swap1</span><br><span class="line">  sstore</span><br></pre></td></tr></table></figure></p><p>字节码是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">600080547002000000000000000000000000000000006001608060020a03199091166001176001608060020a0316179055</span><br></pre></td></tr></table></figure></p><p>将字节码解析成一行一指令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">// push 0x0</span><br><span class="line">60 00</span><br><span class="line">// dup1</span><br><span class="line">80</span><br><span class="line">// sload</span><br><span class="line">54</span><br><span class="line">// push17 将下面17个字节作为一个32个字的数值压入栈中</span><br><span class="line">70 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">/* not(sub(exp(0x2, 0x80), 0x1)) */</span><br><span class="line">// push 0x1</span><br><span class="line">60 01</span><br><span class="line">// push 0x80 (32)</span><br><span class="line">60 80</span><br><span class="line">// push 0x80 (2)</span><br><span class="line">60 02</span><br><span class="line">// exp</span><br><span class="line">0a</span><br><span class="line">// sub</span><br><span class="line">03</span><br><span class="line">// not</span><br><span class="line">19</span><br><span class="line">// swap1</span><br><span class="line">90</span><br><span class="line">// swap2</span><br><span class="line">91</span><br><span class="line">// and</span><br><span class="line">16</span><br><span class="line">// push 0x1</span><br><span class="line">60 01</span><br><span class="line">// or</span><br><span class="line">17</span><br><span class="line">/* sub(exp(0x2, 0x80), 0x1) */</span><br><span class="line">// push 0x1</span><br><span class="line">60 01</span><br><span class="line">// push 0x80</span><br><span class="line">60 80</span><br><span class="line">// push 0x02</span><br><span class="line">60 02</span><br><span class="line">// exp</span><br><span class="line">0a</span><br><span class="line">// sub</span><br><span class="line">03</span><br><span class="line">// and</span><br><span class="line">16</span><br><span class="line">// or</span><br><span class="line">17</span><br><span class="line">// swap1</span><br><span class="line">90</span><br><span class="line">// sstore</span><br><span class="line">55</span><br></pre></td></tr></table></figure></p><p>上面的汇编代码中使用了4个神奇的数值：</p><ul><li><p>0x1(16字节)，使用低16字节</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 在字节码中表示为0x01</span><br><span class="line">16:32 0x00000000000000000000000000000000</span><br><span class="line">00:16 0x00000000000000000000000000000001</span><br></pre></td></tr></table></figure></li><li><p>0x2(16字节)，使用高16字节</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//在字节码中表示为0x200000000000000000000000000000000 </span><br><span class="line">16:32 0x00000000000000000000000000000002</span><br><span class="line">00:16 0x00000000000000000000000000000000</span><br></pre></td></tr></table></figure></li><li><p>not(sub(exp(0x2, 0x80), 0x1))</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 高16字节的掩码</span><br><span class="line">16:32 0x00000000000000000000000000000000 </span><br><span class="line">00:16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</span><br></pre></td></tr></table></figure></li><li><p>sub(exp(0x2, 0x80), 0x1)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 低16字节的掩码</span><br><span class="line">16:32 0x00000000000000000000000000000000 </span><br><span class="line">00:16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</span><br></pre></td></tr></table></figure></li></ul><p>代码将这些数值进行了一些位的转换来达到想要的结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">16:32 0x00000000000000000000000000000002 </span><br><span class="line">00:16 0x00000000000000000000000000000001</span><br></pre></td></tr></table></figure></p><p>最后，该32字节的数值被保存在了<code>0x0</code>的位置上。</p><h2 id="Gas-的使用"><a href="#Gas-的使用" class="headerlink" title="Gas 的使用"></a>Gas 的使用</h2><blockquote><p>60008054700<strong>200000000000000000000000000000000</strong>6001608060020a03199091166001176001608060020a0316179055</p></blockquote><p>注意<code>0x200000000000000000000000000000000</code>被嵌入到了字节码中。但是编译器也可能选择使用<code>exp(0x2, 0x81)</code>指令来计算数值，这会导致更短的字节码序列。</p><p>但结果是<code>0x200000000000000000000000000000000</code>比<code>exp(0x2, 0x81)</code>更便宜。让我们看看与gas费用相关的信息：</p><ul><li>一笔交易的每个零字节的数据或代码费用为 4 gas</li><li>一笔交易的每个非零字节的数据或代码的费用为 68 gas</li></ul><p>来计算下两个表示方式所花费的gas成本：</p><ul><li><p><code>0x200000000000000000000000000000000</code>字节码包含了很多的0，更加的便宜。<br>(1 <em> 68) + (32 </em> 4) = 196</p></li><li><p><code>608160020a</code>字节码更短，但是没有0。<br>5 * 68 = 340</p></li></ul><p>更长的字节码序列有很多的0，所以实际上更加的便宜！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>EVM的编译器实际上不会为字节码的大小、速度或内存高效性进行优化。相反，它会为gas的使用进行优化，这间接鼓励了计算的排序，让以太坊区块链可以更高效一点。</p><p>我们也看到了EVM一些奇特的地方：</p><ul><li>EVM是一个256位的机器。以32字节来处理数据是最自然的</li><li>持久存储是相当昂贵的</li><li>Solidity编译器会为了减少gas的使用而做出相应的优化选择</li></ul><p>Gas成本的设置有一点武断，也许未来会改变。当成本改变的时候，编译器也会做出不同的优化选择。</p><p>本系列文章其他部分译文链接：</p><ul><li><a href="http://www.jianshu.com/p/9df8d15418ed">固定长度数据类型的表示方法(第2部分)</a></li><li><a href="http://www.jianshu.com/p/af5721c79505">动态数据类型的表示方法(第3部分)</a></li><li><a href="http://www.jianshu.com/p/d0e8e825d41b">ABI编码外部方法调用的方式(第4部分)</a></li><li><a href="http://www.jianshu.com/p/d9137e87c9d3">一个新合约被创建后会发生什么(第5部分)</a></li></ul><p>翻译作者: <a href="https://lilymoana.github.io/">许莉</a><br>原文地址：<a href="https://medium.com/@hayeah/diving-into-the-ethereum-vm-6e8d5d2f3c30">Diving Into The Ethereum VM Part One</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; &lt;/strong&gt;  &lt;Excerpt in index | Homepage Digest&gt;&lt;/p&gt;
&lt;p&gt;深入了解以太坊虚拟机是一个系列的文章，一共5篇！ 本文是第1篇，主要介绍的是以太坊虚拟机汇编代码基础。后续的4篇译文链接在本文的结尾处。&lt;/p&gt;
    
    </summary>
    
      <category term="translation" scheme="https://lilymoana.github.io/categories/translation/"/>
    
    
      <category term="blockchain" scheme="https://lilymoana.github.io/tags/blockchain/"/>
    
      <category term="ethereum" scheme="https://lilymoana.github.io/tags/ethereum/"/>
    
  </entry>
  
  <entry>
    <title>深入了解以太坊虚拟机第2部分——固定长度数据类型的表示方法</title>
    <link href="https://lilymoana.github.io/evm_part2.html"/>
    <id>https://lilymoana.github.io/evm_part2.html</id>
    <published>2017-10-30T07:45:39.000Z</published>
    <updated>2017-11-22T05:25:28.822Z</updated>
    
    <content type="html"><![CDATA[<p><strong> </strong>  <Excerpt in index | Homepage Digest></p><p>深入了解以太坊虚拟机是一个系列的文章，本文是第2篇，本系列其他部分的译文链接在文章结尾处</p><a id="more"></a><The rest of contents | Rest of all><p><img src="/asset/evmp2_head.jpeg" alt="Micron MT4C1024"></p><p>在本系列的第一篇文章中，我们已经看到了一个简单的Solidity合约的汇编代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">contract C &#123;</span><br><span class="line">    uint256 a;</span><br><span class="line">    function C() &#123;</span><br><span class="line">      a = 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该合约归结于<code>sstore</code>指令的调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// a = 1</span><br><span class="line">sstore(0x0, 0x1)</span><br></pre></td></tr></table></figure></p><ul><li>EVM将<code>0x1</code>数值存储在<code>0x0</code>的位置上</li><li>每个存储槽可以存储正好32字节(或256位)<blockquote><p>如果你觉得这看起来很陌生，我建议你阅读本系列的第一篇文章：<a href="http://www.jianshu.com/p/1969f3761208">EVM汇编代码的介绍</a></p></blockquote></li></ul><p>在本文中我们将会开始研究Solidity如何使用32字节的块来表示更加复杂的数据类型如结构体和数组。我们也将会看到存储是如何被优化的，以及优化是如何失败的。</p><p>在典型编程语言中理解数据类型在底层是如何表示的没有太大的作用。但是在Solidity(或其他的EVM语言)中，这个知识点是非常重要的，因为存储的访问是非常昂贵的：</p><ul><li><code>sstore</code>指令成本是20000 gas，或比基本的算术指令要贵~5000x</li><li><code>sload</code>指令成本是5000 gas，或比基本的算术指令要贵~1600x</li></ul><p>这里说的成本，就是真正的金钱，而不仅仅是毫秒级别的性能。运行和使用合约的成本基本上是由<code>sstore</code>指令和<code>sload</code>指令来主导的！</p><h2 id="Parsecs磁带上的Parsecs"><a href="#Parsecs磁带上的Parsecs" class="headerlink" title="Parsecs磁带上的Parsecs"></a>Parsecs磁带上的Parsecs</h2><p><img src="/asset/evmp2_parsecs.jpeg" alt="图林机器，来源：http://raganwald.com/"></p><p>构建一个通用计算机器需要两个基本要素：</p><ul><li>一种循环的方式，无论是跳转还是递归</li><li>无限量的内存</li></ul><p>EVM的汇编代码有跳转，EVM的存储器提供无限的内存。这对于一切就已经足够了，包括模拟一个运行以太坊的世界，这个世界本身就是一个模拟运行以太坊的世界………</p><p><img src="/asset/evmp2_ microverse.gif" alt="进入Microverse电池"></p><p>EVM的存储器对于合约来说就像一个无限的自动收报机磁带，磁带上的每个槽都能存储32个字节，就像这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[32 bytes][32 bytes][32 bytes]...</span><br></pre></td></tr></table></figure></p><p>我们将会看到数据是如何在无限的磁带中生存的。</p><blockquote><p>磁带的长度是2²⁵⁶，或者每个合约~10⁷⁷存储槽。可观测的宇宙粒子数是10⁸⁰。大概1000个合约就可以容纳所有的质子、中子和电子。不要相信营销炒作，因为它比无穷大要短的多。</p></blockquote><h2 id="空磁带"><a href="#空磁带" class="headerlink" title="空磁带"></a>空磁带</h2><p>存储器初始的时候是空白的，默认是0。拥有无限的磁带不需要任何的成本。</p><p>以一个简单的合约来演示一下0值的行为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br><span class="line">contract C &#123;</span><br><span class="line">    uint256 a;</span><br><span class="line">    uint256 b;</span><br><span class="line">    uint256 c;</span><br><span class="line">    uint256 d;</span><br><span class="line">    uint256 e;</span><br><span class="line">    uint256 f;</span><br><span class="line">    function C() &#123;</span><br><span class="line">      f = 0xc0fefe;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>存储器中的布局很简单。</p><ul><li>变量<code>a</code>在<code>0x0</code>的位置上</li><li>变量<code>b</code>在<code>0x1</code>的位置上</li><li>以此类推………</li></ul><p>关键问题是：如果我们只使用<code>f</code>，我们需要为<code>a</code>，<code>b</code>，<code>c</code>，<code>d</code>，<code>e</code>支付多少成本？</p><p>编译一下再看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ solc --bin --asm --optimize c-many-variables.sol</span><br></pre></td></tr></table></figure></p><p>汇编代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// sstore(0x5, 0xc0fefe)</span><br><span class="line">tag_2:</span><br><span class="line">  0xc0fefe</span><br><span class="line">  0x5</span><br><span class="line">  sstore</span><br></pre></td></tr></table></figure></p><p>所以一个存储变量的声明不需要任何成本，因为没有初始化的必要。Solidity为存储变量保留了位置，但是只有当你存储数据进去的时候才需要进行付费。</p><p>这样的话，我们只需要为存储<code>0x5</code>进行付费。</p><p>如果我们手动编写汇编代码的话，我们可以选择任意的存储位置，而用不着”扩展”存储器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 编写一个任意的存储位置</span><br><span class="line">sstore(0xc0fefe, 0x42)</span><br></pre></td></tr></table></figure></p><h2 id="读取零"><a href="#读取零" class="headerlink" title="读取零"></a>读取零</h2><p>你不仅可以写在存储器的任意位置，你还可以立刻读取任意的位置。从一个未初始化的位置读取只会返回<code>0x0</code>。</p><p>让我们看看一个合约从一个未初始化的位置<code>a</code>读取数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br><span class="line">contract C &#123;</span><br><span class="line">    uint256 a;</span><br><span class="line">    function C() &#123;</span><br><span class="line">      a = a + 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ solc --bin --asm --optimize c-zero-value.sol</span><br></pre></td></tr></table></figure></p><p>汇编代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tag_2:</span><br><span class="line">  // sload(0x0) returning 0x0</span><br><span class="line">  0x0</span><br><span class="line">  dup1</span><br><span class="line">  sload</span><br><span class="line">  // a + 1; where a == 0</span><br><span class="line">  0x1</span><br><span class="line">  add</span><br><span class="line">  // sstore(0x0, a + 1)</span><br><span class="line">  swap1</span><br><span class="line">  sstore</span><br></pre></td></tr></table></figure></p><p>注意生成从一个未初始化的位置<code>sload</code>的代码是无效的。</p><p>然而，我们可以比Solidity编译器聪明。既然我们知道<code>tag_2</code>是构造器，而且<code>a</code>从未被写入过数据，那么我们可以用<code>0x0</code>替换掉<code>sload</code>，以此节省5000 gas。</p><h2 id="结构体的表示"><a href="#结构体的表示" class="headerlink" title="结构体的表示"></a>结构体的表示</h2><p>来看一下我们的第一个复杂数据类型，一个拥有6个域的结构体：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br><span class="line">contract C &#123;</span><br><span class="line">    struct Tuple &#123;</span><br><span class="line">      uint256 a;</span><br><span class="line">      uint256 b;</span><br><span class="line">      uint256 c;</span><br><span class="line">      uint256 d;</span><br><span class="line">      uint256 e;</span><br><span class="line">      uint256 f;</span><br><span class="line">    &#125;</span><br><span class="line">    Tuple t;</span><br><span class="line">    function C() &#123;</span><br><span class="line">      t.f = 0xC0FEFE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>存储器中的布局和状态变量是一样的：</p><ul><li><code>t.a</code>域在<code>0x0</code>的位置上</li><li><code>t.b</code>域在<code>0x1</code>的位置上</li><li>以此类推………</li></ul><p>就像之前一样，我们可以直接写入<code>t.f</code>而不用为初始化付费。</p><p>编译一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ solc --bin --asm --optimize c-struct-fields.sol</span><br></pre></td></tr></table></figure></p><p>然后我们看见一模一样的汇编代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tag_2:</span><br><span class="line">  0xc0fefe</span><br><span class="line">  0x5</span><br><span class="line">  sstore</span><br></pre></td></tr></table></figure></p><h3 id="固定长度数组"><a href="#固定长度数组" class="headerlink" title="固定长度数组"></a>固定长度数组</h3><p>让我们来声明一个定长数组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br><span class="line">contract C &#123;</span><br><span class="line">    uint256[6] numbers;</span><br><span class="line">    function C() &#123;</span><br><span class="line">      numbers[5] = 0xC0FEFE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因为编译器知道这里到底有几个<code>uint256</code>(32字节)类型的数值，所以它可以很容易让数组里面的元素依次存储起来，就像它存储变量和结构体一样。</p><p>在这个合约中，我们再次存储到<code>0x5</code>的位置上。</p><p>编译：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ solc --bin --asm --optimize c-static-array.sol</span><br></pre></td></tr></table></figure></p><p>汇编代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tag_2:</span><br><span class="line">  0xc0fefe</span><br><span class="line">  0x0</span><br><span class="line">  0x5</span><br><span class="line">tag_4:</span><br><span class="line">  add</span><br><span class="line">  0x0</span><br><span class="line">tag_5:</span><br><span class="line">  pop</span><br><span class="line">  sstore</span><br></pre></td></tr></table></figure></p><p>这个稍微长一点，但是如果你仔细一点，你会看见它们其实是一样的。我们手动的来优化一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tag_2:</span><br><span class="line">  0xc0fefe</span><br><span class="line">  // 0+5. 替换为0x5</span><br><span class="line">  0x0</span><br><span class="line">  0x5</span><br><span class="line">  add</span><br><span class="line">  // 压入栈中然后立刻出栈。没有作用，只是移除</span><br><span class="line">  0x0</span><br><span class="line">  pop</span><br><span class="line">  sstore</span><br></pre></td></tr></table></figure></p><p>移除掉标记和伪指令之后，我们再次得到相同的字节码序列：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tag_2:</span><br><span class="line">  0xc0fefe</span><br><span class="line">  0x5</span><br><span class="line">  sstore</span><br></pre></td></tr></table></figure></p><h2 id="数组边界检查"><a href="#数组边界检查" class="headerlink" title="数组边界检查"></a>数组边界检查</h2><p>我们看到了定长数组、结构体和状态变量在存储器中的布局是一样的，但是产生的汇编代码是不同的。这是因为Solidity为数组的访问产生了边界检查代码。</p><p>让我们再次编译数组合约，这次去掉优化的选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ solc --bin --asm c-static-array.sol</span><br></pre></td></tr></table></figure></p><p>汇编代码在下面已经注释了，并且打印出每条指令的机器状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">tag_2:</span><br><span class="line">  0xc0fefe</span><br><span class="line">    [0xc0fefe]</span><br><span class="line">  0x5</span><br><span class="line">    [0x5 0xc0fefe]</span><br><span class="line">  dup1</span><br><span class="line">  /* 数组边界检查代码 */</span><br><span class="line">  // 5 &lt; 6</span><br><span class="line">  0x6</span><br><span class="line">    [0x6 0x5 0xc0fefe]</span><br><span class="line">  dup2</span><br><span class="line">    [0x5 0x6 0x5 0xc0fefe]</span><br><span class="line">  lt</span><br><span class="line">    [0x1 0x5 0xc0fefe]</span><br><span class="line">  // bound_check_ok = 1 (TRUE)</span><br><span class="line">  // if(bound_check_ok) &#123; goto tag5 &#125; else &#123; invalid &#125;</span><br><span class="line">  tag_5</span><br><span class="line">    [tag_5 0x1 0x5 0xc0fefe]</span><br><span class="line">  jumpi</span><br><span class="line">    // 测试条件为真，跳转到 tag_5.</span><br><span class="line">    //  `jumpi` 从栈中消耗两项数据</span><br><span class="line">    [0x5 0xc0fefe]</span><br><span class="line">  invalid</span><br><span class="line">// 数据访问有效，继续执行</span><br><span class="line">// stack: [0x5 0xc0fefe]</span><br><span class="line">tag_5:</span><br><span class="line">  sstore</span><br><span class="line">    []</span><br><span class="line">    storage: &#123; 0x5 =&gt; 0xc0fefe &#125;</span><br></pre></td></tr></table></figure></p><p>我们现在已经看见了边界检查代码。我们也看见了编译器可以对这类东西进行一些优化，但是不是非常完美。</p><p>在本文的后面我们将会看到数组的边界检查是如何干扰编译器优化的，比起存储变量和结构体，定长数组的效率更低。</p><h2 id="打包行为"><a href="#打包行为" class="headerlink" title="打包行为"></a>打包行为</h2><p>存储是非常昂贵的（呀呀呀，这句话我已经说了无数次了）。一个关键的优化就是尽可能的将数据打包成一个32字节数值。</p><p>考虑一个有4个存储变量的合约，每个变量都是64位，全部加起来就是256位（32字节）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br><span class="line">contract C &#123;</span><br><span class="line">    uint64 a;</span><br><span class="line">    uint64 b;</span><br><span class="line">    uint64 c;</span><br><span class="line">    uint64 d;</span><br><span class="line">    function C() &#123;</span><br><span class="line">      a = 0xaaaa;</span><br><span class="line">      b = 0xbbbb;</span><br><span class="line">      c = 0xcccc;</span><br><span class="line">      d = 0xdddd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们期望（希望）编译器使用一个<code>sstore</code>指令将这些数据存放到同一个存储槽中。</p><p>编译：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ solc --bin --asm --optimize c-many-variables--packing.sol</span><br></pre></td></tr></table></figure></p><p>汇编代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">tag_2:</span><br><span class="line">    /* &quot;c-many-variables--packing.sol&quot;:121:122  a */</span><br><span class="line">  0x0</span><br><span class="line">    /* &quot;c-many-variables--packing.sol&quot;:121:131  a = 0xaaaa */</span><br><span class="line">  dup1</span><br><span class="line">  sload</span><br><span class="line">    /* &quot;c-many-variables--packing.sol&quot;:125:131  0xaaaa */</span><br><span class="line">  0xaaaa</span><br><span class="line">  not(0xffffffffffffffff)</span><br><span class="line">    /* &quot;c-many-variables--packing.sol&quot;:121:131  a = 0xaaaa */</span><br><span class="line">  swap1</span><br><span class="line">  swap2</span><br><span class="line">  and</span><br><span class="line">  or</span><br><span class="line">  not(sub(exp(0x2, 0x80), exp(0x2, 0x40)))</span><br><span class="line">    /* &quot;c-many-variables--packing.sol&quot;:139:149  b = 0xbbbb */</span><br><span class="line">  and</span><br><span class="line">  0xbbbb0000000000000000</span><br><span class="line">  or</span><br><span class="line">  not(sub(exp(0x2, 0xc0), exp(0x2, 0x80)))</span><br><span class="line">    /* &quot;c-many-variables--packing.sol&quot;:157:167  c = 0xcccc */</span><br><span class="line">  and</span><br><span class="line">  0xcccc00000000000000000000000000000000</span><br><span class="line">  or</span><br><span class="line">  sub(exp(0x2, 0xc0), 0x1)</span><br><span class="line">    /* &quot;c-many-variables--packing.sol&quot;:175:185  d = 0xdddd */</span><br><span class="line">  and</span><br><span class="line">  0xdddd000000000000000000000000000000000000000000000000</span><br><span class="line">  or</span><br><span class="line">  swap1</span><br><span class="line">  sstore</span><br></pre></td></tr></table></figure></p><p>这里还是有很多的位转移我没能弄明白，但是无所谓。最关键事情是这里只有一个<code>sstore</code>指令。</p><p>这样优化就成功！</p><h2 id="干扰优化器"><a href="#干扰优化器" class="headerlink" title="干扰优化器"></a>干扰优化器</h2><p>优化器并不能一直工作的这么好。让我们来干扰一下优化器。唯一的改变就是使用协助函数来设置存储变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br><span class="line">contract C &#123;</span><br><span class="line">    uint64 a;</span><br><span class="line">    uint64 b;</span><br><span class="line">    uint64 c;</span><br><span class="line">    uint64 d;</span><br><span class="line">    function C() &#123;</span><br><span class="line">      setAB();</span><br><span class="line">      setCD();</span><br><span class="line">    &#125;</span><br><span class="line">    function setAB() internal &#123;</span><br><span class="line">      a = 0xaaaa;</span><br><span class="line">      b = 0xbbbb;</span><br><span class="line">    &#125;</span><br><span class="line">    function setCD() internal &#123;</span><br><span class="line">      c = 0xcccc;</span><br><span class="line">      d = 0xdddd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ solc --bin --asm --optimize c-many-variables--packing-helpers.sol</span><br></pre></td></tr></table></figure></p><p>输出的汇编代码太多了，我们忽略了大多数的细节，只关注结构体：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 构造器函数</span><br><span class="line">tag_2:</span><br><span class="line">  // ...</span><br><span class="line">  // 通过跳到tag_5来调用setAB()</span><br><span class="line">  jump</span><br><span class="line">tag_4:</span><br><span class="line">  // ...</span><br><span class="line">  //通过跳到tag_7来调用setCD() </span><br><span class="line">  jump</span><br><span class="line">// setAB()函数</span><br><span class="line">tag_5:</span><br><span class="line">  // 进行位转移和设置a，b</span><br><span class="line">  // ...</span><br><span class="line">  sstore</span><br><span class="line">tag_9:</span><br><span class="line">  jump  // 返回到调用setAB()的地方</span><br><span class="line">//setCD()函数</span><br><span class="line">tag_7:</span><br><span class="line">  // 进行位转移和设置c，d</span><br><span class="line">  // ...</span><br><span class="line">  sstore</span><br><span class="line">tag_10:</span><br><span class="line">  jump  // 返回到调用setCD()的地方</span><br></pre></td></tr></table></figure></p><p>现在这里有两个<code>sstore</code>指令而不是一个。Solidity编译器可以优化一个标签内的东西，但是无法优化跨标签的。</p><p>调用函数会让你消耗更多的成本，不是因为函数调用昂贵（他们只是一个跳转指令），而是因为<code>sstore</code>指令的优化可能会失败。</p><p>为了解决这个问题，Solidity编译器应该学会如何內联函数，本质上就是不用调用函数也能得到相同的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = 0xaaaa;</span><br><span class="line">b = 0xbbbb;</span><br><span class="line">c = 0xcccc;</span><br><span class="line">d = 0xdddd;</span><br></pre></td></tr></table></figure></p><blockquote><p>如果我们仔细阅读输出的完整汇编代码，我们会看见<code>setAB()</code>和<code>setCD()</code>函数的汇编代码被包含了两次，不仅使代码变得臃肿了，并且还需要花费额外的gas来部署合约。在学习合约的生命周期时我们再来谈谈这个问题。</p></blockquote><h2 id="为什么优化器会被干扰？"><a href="#为什么优化器会被干扰？" class="headerlink" title="为什么优化器会被干扰？"></a>为什么优化器会被干扰？</h2><p>因为优化器不会跨标签进行优化。思考一下”1+1”，在同一个标签下，它会被优化成<code>0x2</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 优化成功！</span><br><span class="line">tag_0:</span><br><span class="line">  0x1</span><br><span class="line">  0x1</span><br><span class="line">  add</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure></p><p>但是如果指令被标签分开的话就不会被优化了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 优化失败！</span><br><span class="line">tag_0:</span><br><span class="line">  0x1</span><br><span class="line">  0x1</span><br><span class="line">tag_1:</span><br><span class="line">  add</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure></p><p>在0.4.13版本中上面的行为都是真实的。也许未来会改变。</p><h2 id="再次干扰优化器"><a href="#再次干扰优化器" class="headerlink" title="再次干扰优化器"></a>再次干扰优化器</h2><p>让我们看看优化器失败的另一种方式，打包适用于定长数组吗？思考一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br><span class="line">contract C &#123;</span><br><span class="line">    uint64[4] numbers;</span><br><span class="line">    function C() &#123;</span><br><span class="line">      numbers[0] = 0x0;</span><br><span class="line">      numbers[1] = 0x1111;</span><br><span class="line">      numbers[2] = 0x2222;</span><br><span class="line">      numbers[3] = 0x3333;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再一次，这里有4个64位的数值我们希望能打包成一个32位的数值，只使用一个<code>sstore</code>指令。</p><p>编译的汇编代码太长了，我们就数数<code>sstore</code>和<code>sload</code>指令的条数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ solc --bin --asm --optimize c-static-array--packing.sol | grep -E &apos;(sstore|sload)&apos;</span><br><span class="line">  sload</span><br><span class="line">  sstore</span><br><span class="line">  sload</span><br><span class="line">  sstore</span><br><span class="line">  sload</span><br><span class="line">  sstore</span><br><span class="line">  sload</span><br><span class="line">  sstore</span><br></pre></td></tr></table></figure></p><p>哦，不！即使定长数组与等效的结构体和存储变量的存储布局是一样的，优化也失败了。现在需要4对<code>sload</code>和<code>sstore</code>指令。</p><p>快速的看一下汇编代码，可以发现每个数组的访问都有一个边界检查代码，它们在不同的标签下被组织起来。优化无法跨标签，所以优化失败。</p><p>不过有个小安慰。其他额外的3个<code>sstore</code>指令比第一个要便宜：</p><ul><li><code>sstore</code>指令第一次写入一个新位置需要花费 20000 gas</li><li><code>sstore</code>指令后续写入一个已存在的位置需要花费 5000 gas</li></ul><p>所以这个特殊的优化失败会花费我们35000 gas而不是20000 gas，多了额外的75%。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果Solidity编译器能弄清楚存储变量的大小，它就会将这些变量依次的放入存储器中。如果可能的话，编译器会将数据紧密的打包成32字节的块。</p><p>总结一下目前我们见到的打包行为：</p><ul><li>存储变量：打包</li><li>结构体：打包</li><li>定长数组：不打包。在理论上应该是打包的</li></ul><p>因为存储器访问的成本较高，所以你应该将存储变量作为自己的数据库模式。当写一个合约时，做一个小实验是比较有用的，检测汇编代码看看编译器是否进行了正确的优化。</p><p>我们可以肯定Solidity编译器在未来肯定会改良。对于现在而言，很不幸，我们不能盲目的相信它的优化器。</p><p>它需要你真正的理解存储变量。</p><p>本系列文章其他部分译文链接：</p><ul><li><a href="http://www.jianshu.com/p/1969f3761208">EVM汇编代码的介绍(第1部分)</a></li><li><a href="http://www.jianshu.com/p/af5721c79505">动态数据类型的表示方法(第3部分)</a></li><li><a href="http://www.jianshu.com/p/d0e8e825d41b">ABI编码外部方法调用的方式(第4部分)</a></li><li><a href="http://www.jianshu.com/p/d9137e87c9d3">一个新合约被创建后会发生什么(第5部分)</a></li></ul><p>翻译作者: <a href="https://lilymoana.github.io/">许莉</a><br>原文地址：<a href="https://medium.com/@hayeah/diving-into-the-ethereum-vm-part-2-storage-layout-bc5349cb11b7">Diving Into The Ethereum VM Part  Two</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; &lt;/strong&gt;  &lt;Excerpt in index | Homepage Digest&gt;&lt;/p&gt;
&lt;p&gt;深入了解以太坊虚拟机是一个系列的文章，本文是第2篇，本系列其他部分的译文链接在文章结尾处&lt;/p&gt;
    
    </summary>
    
      <category term="translation" scheme="https://lilymoana.github.io/categories/translation/"/>
    
    
      <category term="blockchain" scheme="https://lilymoana.github.io/tags/blockchain/"/>
    
      <category term="ethereum" scheme="https://lilymoana.github.io/tags/ethereum/"/>
    
  </entry>
  
  <entry>
    <title>深入了解以太坊虚拟机第3部分——动态数据类型的表示方法</title>
    <link href="https://lilymoana.github.io/evm_part3.html"/>
    <id>https://lilymoana.github.io/evm_part3.html</id>
    <published>2017-10-30T07:42:10.000Z</published>
    <updated>2017-11-22T05:25:28.822Z</updated>
    
    <content type="html"><![CDATA[<p><strong> </strong>  <Excerpt in index | Homepage Digest></p><p>深入了解以太坊虚拟机是一个系列的文章，本文是第3篇，本系列其他部分的译文链接在文章结尾处</p><a id="more"></a><The rest of contents | Rest of all><p><img src="/asset/evmp3_head.jpeg" alt=""> </p><p>Solidity提供了在其他编程语言常见的数据类型。除了简单的值类型比如数字和结构体，还有一些其他数据类型，随着数据的增加可以进行动态扩展的动态类型。动态类型的3大类：</p><ul><li>映射(Mappings)：<code>mapping(bytes32 =&gt; uint256)</code>， <code>mapping(address =&gt; string)</code>等等</li><li>数组(Arrays)：<code>[]uint256</code>，<code>[]byte</code>等等</li><li>字节数组(Byte arrays)：只有两种类型：<code>string</code>，<code>bytes</code></li></ul><p>在本系列的第二篇文章中我们看见了固定大小的简单类型在内存中的表示方式。</p><ul><li>基本数值：<code>uint256</code>，<code>byte</code>等等</li><li>定长数组：<code>[10]uint8</code>，<code>[32]byte</code>，<code>bytes32</code></li><li>组合了上面类型的结构体</li></ul><p>固定大小的存储变量都是尽可能的打包成32字节的块然后依次存放在存储器中的。（如果这看起来很陌生，请阅读本系列的第二篇文章： <a href="http://www.jianshu.com/p/9df8d15418ed">固定长度数据类型的表示方法</a></p><p>在本文中我们将会研究Solidity是如何支持更加复杂的数据结构的。在表面上看可能Solidity中的数组和映射比较熟悉，但是从它们的实现方式来看在本质上却有着不同的性能特征。</p><p>我们会从映射开始，这是三者当中最简单的。数组和字节数组其实就是拥有更加高级特征的映射。</p><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><p>让我们存储一个数值在<code>uint256 =&gt; uint256</code>映射中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br><span class="line">contract C &#123;</span><br><span class="line">    mapping(uint256 =&gt; uint256) items;</span><br><span class="line">    function C() &#123;</span><br><span class="line">      items[0xC0FEFE] = 0x42;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">solc --bin --asm --optimize c-mapping.sol</span><br></pre></td></tr></table></figure></p><p>汇编代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">tag_2:</span><br><span class="line">  // 不做任何事情，应该会被优化掉</span><br><span class="line">  0xc0fefe</span><br><span class="line">  0x0</span><br><span class="line">  swap1</span><br><span class="line">  dup2</span><br><span class="line">  mstore</span><br><span class="line">  0x20</span><br><span class="line">  mstore</span><br><span class="line">  // 将0x42 存储在地址0x798...187c上</span><br><span class="line">  0x42</span><br><span class="line"> 0x79826054ee948a209ff4a6c9064d7398508d2c1909a392f899d301c6d232187c</span><br><span class="line">  sstore</span><br></pre></td></tr></table></figure></p><p>我们可以将EVM想成一个键-值( key-value)数据库，不过每个key都限制为32字节。与其直接使用key<code>0xC0FEFE</code>，不如使用key的哈希值<code>0x798...187c</code>，并且<code>0x42</code>存储在这里。哈希函数使用的是<code>keccak256</code>(SHA256)函数。</p><p>在这个例子中我们没有看见<code>keccak256</code>指令本身，因为优化器已经提前计算了结果并內联到了字节码中。在没什么作用的<code>mstore</code>指令中，我们依然可以看到计算的痕迹。</p><h2 id="计算地址"><a href="#计算地址" class="headerlink" title="计算地址"></a>计算地址</h2><p>使用一些Python代码来把<code>0xC0FEFE</code>哈希成<code>0x798...187c</code>。如果你想要跟着做下去，你需要安装Python 3.6，或者安装<a href="https://pypi.python.org/pypi/pysha3">pysha3</a> 来获得<code>keccak_256</code>哈希函数。</p><p>定义两个协助函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import binascii</span><br><span class="line">import sha3</span><br><span class="line">#将数值转换成32字节数组</span><br><span class="line">def bytes32(i):</span><br><span class="line">    return binascii.unhexlify(&apos;%064x&apos; % i)</span><br><span class="line"># 计算32字节数组的 keccak256 哈希值</span><br><span class="line">def keccak256(x):</span><br><span class="line">    return sha3.keccak_256(x).hexdigest()</span><br></pre></td></tr></table></figure></p><p>将数值转换成32个字节：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bytes32(1)</span><br><span class="line">b&apos;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01&apos;</span><br><span class="line">&gt;&gt;&gt; bytes32(0xC0FEFE)</span><br><span class="line">b&apos;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0\xfe\xfe&apos;</span><br></pre></td></tr></table></figure></p><p>使用<code>+</code>操作符，将两个字节数组连接起来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bytes32(1) + bytes32(2)</span><br><span class="line">b&apos;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02&apos;</span><br></pre></td></tr></table></figure></p><p>计算一些字节的 keccak256 哈希值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; keccak256(bytes(1))</span><br><span class="line">&apos;bc36789e7a1e281436464229828f817d6612f7b477d66591ff96a9e064bcc98a&apos;</span><br></pre></td></tr></table></figure></p><p>现在我们可以计算<code>0x798...187c</code>了。</p><p>存储变量<code>items</code>的位置是<code>0x0</code>（因为它是第一个存储变量）。连接key<code>0xc0fefe</code>和<code>items</code>的位置来获取地址：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># key = 0xC0FEFE, position = 0</span><br><span class="line">&gt;&gt;&gt; keccak256(bytes32(0xC0FEFE) + bytes32(0))</span><br><span class="line">&apos;79826054ee948a209ff4a6c9064d7398508d2c1909a392f899d301c6d232187c&apos;</span><br></pre></td></tr></table></figure></p><p>为key计算存储地址的公式是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keccak256(bytes32(key) + bytes32(position))</span><br></pre></td></tr></table></figure></p><h2 id="两个映射"><a href="#两个映射" class="headerlink" title="两个映射"></a>两个映射</h2><p>我们先把公式放在这里，后面数值存储时需要计算会用到该公式。</p><p>假设我们的合约有两个映射：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br><span class="line">contract C &#123;</span><br><span class="line">    mapping(uint256 =&gt; uint256) itemsA;</span><br><span class="line">    mapping(uint256 =&gt; uint256) itemsB;</span><br><span class="line">    function C() &#123;</span><br><span class="line">      itemsA[0xAAAA] = 0xAAAA;</span><br><span class="line">      itemsB[0xBBBB] = 0xBBBB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p><code>itemsA</code>的位置是<code>0</code>，key为<code>0xAAAA</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># key = 0xAAAA, position = 0</span><br><span class="line">&gt;&gt;&gt; keccak256(bytes32(0xAAAA) + bytes32(0))</span><br><span class="line">&apos;839613f731613c3a2f728362760f939c8004b5d9066154aab51d6dadf74733f3&apos;</span><br></pre></td></tr></table></figure></li><li><p><code>itemsB</code>的位置为<code>1</code>，key为<code>0xBBBB</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># key = 0xBBBB, position = 1</span><br><span class="line">&gt;&gt;&gt; keccak256(bytes32(0xBBBB) + bytes32(1))</span><br><span class="line">&apos;34cb23340a4263c995af18b23d9f53b67ff379ccaa3a91b75007b010c489d395&apos;</span><br></pre></td></tr></table></figure></li></ul><p>用编译器来验证一下这些计算：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ solc --bin --asm --optimize  c-mapping-2.sol</span><br></pre></td></tr></table></figure></p><p>汇编代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tag_2:</span><br><span class="line">  // ... 忽略可能会被优化掉的内存操作</span><br><span class="line">  0xaaaa</span><br><span class="line">  0x839613f731613c3a2f728362760f939c8004b5d9066154aab51d6dadf74733f3</span><br><span class="line">  sstore</span><br><span class="line">  0xbbbb</span><br><span class="line">  0x34cb23340a4263c995af18b23d9f53b67ff379ccaa3a91b75007b010c489d395</span><br><span class="line">  sstore</span><br></pre></td></tr></table></figure></p><p>跟期望的结果一样。</p><h2 id="汇编代码中的KECCAK256"><a href="#汇编代码中的KECCAK256" class="headerlink" title="汇编代码中的KECCAK256"></a>汇编代码中的KECCAK256</h2><p>编译器可以提前计算key的地址是因为相关的值是常量。如果key使用的是变量，那么哈希就必须要在汇编代码中完成。现在我们无效化优化器，来看看在汇编代码中哈希是如何完成的。</p><p>事实证明很容易就能让优化器无效，只要引入一个间接的虚变量<code>i</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br><span class="line">contract C &#123;</span><br><span class="line">    mapping(uint256 =&gt; uint256) items;</span><br><span class="line">    //这个变量会造成常量的优化失败</span><br><span class="line">    uint256 i = 0xC0FEFE;</span><br><span class="line">    function C() &#123;</span><br><span class="line">      items[i] = 0x42;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>变量<code>items</code>的位置依然是<code>0x0</code>，所以我们应该期待地址与之前是一样的。</p><p>加上优化选项进行编译，但是这次不会提前计算哈希值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ solc --bin --asm --optimize  c-mapping--no-constant-folding.sol</span><br></pre></td></tr></table></figure></p><p>注释的汇编代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">tag_2:</span><br><span class="line">  // 加载`i` 到栈中</span><br><span class="line">  sload(0x1)</span><br><span class="line">    [0xC0FEFE]</span><br><span class="line">  // 将key`0xC0FEFE`存放在内存中的0x0位置上，为哈希做准备</span><br><span class="line">  0x0</span><br><span class="line">    [0x0 0xC0FEFE]</span><br><span class="line">  swap1</span><br><span class="line">    [0xC0FEFE 0x0]</span><br><span class="line">  dup2</span><br><span class="line">    [0x0 0xC0FEFE 0x0]</span><br><span class="line">  mstore</span><br><span class="line">    [0x0]</span><br><span class="line">    memory: &#123;</span><br><span class="line">      0x00 =&gt; 0xC0FEFE</span><br><span class="line">    &#125;</span><br><span class="line">  // 将位置 `0x0` 存储在内存中的 0x20 (32)位置上，为哈希做准备</span><br><span class="line">  0x20 // 32</span><br><span class="line">    [0x20 0x0]</span><br><span class="line">  dup2</span><br><span class="line">    [0x0 0x20 0x0]</span><br><span class="line">  swap1</span><br><span class="line">    [0x20 0x0 0x0]</span><br><span class="line">  mstore</span><br><span class="line">    [0x0]</span><br><span class="line">    memory: &#123;</span><br><span class="line">      0x00 =&gt; 0xC0FEFE</span><br><span class="line">      0x20 =&gt; 0x0</span><br><span class="line">    &#125;</span><br><span class="line"> // 从第0个字节开始，哈希在内存中接下来的0x40(64)个字节</span><br><span class="line">  0x40 // 64</span><br><span class="line">    [0x40 0x0]</span><br><span class="line">  swap1</span><br><span class="line">    [0x0 0x40]</span><br><span class="line">  keccak256</span><br><span class="line">    [0x798...187c]</span><br><span class="line">  // 将0x42 存储在计算的地址上</span><br><span class="line">  0x42</span><br><span class="line">    [0x42 0x798...187c]</span><br><span class="line">  swap1</span><br><span class="line">    [0x798...187c 0x42]</span><br><span class="line">  sstore</span><br><span class="line">    store: &#123;</span><br><span class="line">      0x798...187c =&gt; 0x42</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><code>mstore</code>指令写入32个字节到内存中。内存操作便宜很多，只需要3 gas就可以读取和写入。前半部分的汇编代码就是通过将key和位置加载到相邻的内存块中来进行“连接”的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 0                   31  32                 63</span><br><span class="line">[    key (32 bytes)    ][ position (32 bytes) ]</span><br></pre></td></tr></table></figure></p><p>然后<code>keccak256</code>指令哈希内存中的数据。成本取决于被哈希的数据有多少：</p><ul><li>每个SHA3操作需要支付 30 gas</li><li>每个32字节的字需要支付 6 gas</li></ul><p>对于一个<code>uint256</code>类型key，gas的成本是42：<code>30 + 6 * 2</code>。</p><h2 id="映射大数值"><a href="#映射大数值" class="headerlink" title="映射大数值"></a>映射大数值</h2><p>每个存储槽只能存储32字节。如果我们尝试存储一个更大一点的结构体会怎么样？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br><span class="line">contract C &#123;</span><br><span class="line">    mapping(uint256 =&gt; Tuple) tuples;</span><br><span class="line">    struct Tuple &#123;</span><br><span class="line">      uint256 a;</span><br><span class="line">      uint256 b;</span><br><span class="line">      uint256 c;</span><br><span class="line">    &#125;</span><br><span class="line">    function C() &#123;</span><br><span class="line">      tuples[0x1].a = 0x1A;</span><br><span class="line">      tuples[0x1].b = 0x1B;</span><br><span class="line">      tuples[0x1].c = 0x1C;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译，你会看见3个<code>sstore</code>指令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tag_2:</span><br><span class="line">  //忽略未优化的代码</span><br><span class="line">  0x1a</span><br><span class="line">  0xada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d</span><br><span class="line">  sstore</span><br><span class="line">  0x1b</span><br><span class="line">  0xada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7e</span><br><span class="line">  sstore</span><br><span class="line">  0x1c</span><br><span class="line">  0xada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7f</span><br><span class="line">  sstore</span><br></pre></td></tr></table></figure></p><p>注意计算的地址除了最后一个数字其他都是一样的。<code>Tulp</code>结构体成员是依次排列的(..7d, ..7e, ..7f)。</p><h2 id="映射不会打包"><a href="#映射不会打包" class="headerlink" title="映射不会打包"></a>映射不会打包</h2><p>考虑到映射的设计方式，每项需要的最小存储空间是32字节，即使你实际只需要存储1个字节：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br><span class="line">contract C &#123;</span><br><span class="line">    mapping(uint256 =&gt; uint8) items;</span><br><span class="line">    function C() &#123;</span><br><span class="line">      items[0xA] = 0xAA;</span><br><span class="line">      items[0xB] = 0xBB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果一个数值大于32字节，那么你需要的存储空间会以32字节依次增加。</p><h2 id="动态数组是映射的升级"><a href="#动态数组是映射的升级" class="headerlink" title="动态数组是映射的升级"></a>动态数组是映射的升级</h2><p>在典型语言中，数组只是连续存储在内存中一系列相同类型的元素。假设你有一个包含100个<code>uint8</code>类型的元素数组，那么这就会占用100个字节的内存。这种模式的话，将整个数组加载到CPU的缓存中然后循环遍历每个元素会便宜一点。</p><p>对于大多数语言而言，数组比映射都会便宜一些。不过在Solidity中，数组是更加昂贵的映射。数组里面的元素会按照顺序排列在存储器中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x290d...e563</span><br><span class="line">0x290d...e564</span><br><span class="line">0x290d...e565</span><br><span class="line">0x290d...e566</span><br></pre></td></tr></table></figure></p><p>但是请记住，对于这些存储槽的每次访问实际上就像数据库中的key-value的查找一样。访问一个数组的元素跟访问一个映射的元素是没什么区别的。</p><p>思考一下<code>[]uint256</code>类型，它本质上与<code>mapping(uint256 =&gt; uint256)</code>是一样的，只不过后者多了一点特征，让它看起去就像数组一样。</p><ul><li><code>length</code>表示一共有多少个元素</li><li>边界检查。当读取或写入时索引值大于<code>length</code>就会报错</li><li>比映射更加复杂的存储打包行为</li><li>当数组变小时，自动清除未使用的存储槽</li><li><code>bytes</code>和<code>string</code>的特殊优化让短数组(小于32字节)存储更加高效</li></ul><h2 id="简单数组"><a href="#简单数组" class="headerlink" title="简单数组"></a>简单数组</h2><p>看一下保存3个元素的数组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// c-darray.sol</span><br><span class="line">pragma solidity ^0.4.11;</span><br><span class="line">contract C &#123;</span><br><span class="line">    uint256[] chunks;</span><br><span class="line">    function C() &#123;</span><br><span class="line">      chunks.push(0xAA);</span><br><span class="line">      chunks.push(0xBB);</span><br><span class="line">      chunks.push(0xCC);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>数组访问的汇编代码难以追踪，使用<a href="https://remix.ethereum.org/">Remix</a>调试器来运行合约：<br><img src="/asset/evmp3_remix.jpeg" alt=""></p><p>模拟的最后，我们可以看到有4个存储槽被使用了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">key: 0x0000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">value: 0x0000000000000000000000000000000000000000000000000000000000000003</span><br><span class="line">key: 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563</span><br><span class="line">value: 0x00000000000000000000000000000000000000000000000000000000000000aa</span><br><span class="line">key: 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564</span><br><span class="line">value: 0x00000000000000000000000000000000000000000000000000000000000000bb</span><br><span class="line">key: 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e565</span><br><span class="line">value: 0x00000000000000000000000000000000000000000000000000000000000000cc</span><br></pre></td></tr></table></figure></p><p><code>chunks</code>变量的位置是<code>0x0</code>，用来存储数组的长度（<code>0x3</code>），哈希变量的位置来找到存储数组数据的地址：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># position = 0</span><br><span class="line">&gt;&gt;&gt; keccak256(bytes32(0))</span><br><span class="line">&apos;290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563&apos;</span><br></pre></td></tr></table></figure></p><p>在这个地址上数组的每个元素依次排列（<code>0x29..63</code>，<code>0x29..64</code>，<code>0x29..65</code>）。</p><h2 id="动态数据打包"><a href="#动态数据打包" class="headerlink" title="动态数据打包"></a>动态数据打包</h2><p>所有重要的打包行为是什么样的？数组与映射比较，数组的一个优势就是打包。拥有4个元素的<code>uint128[]</code>数组元素刚刚好需要2个存储槽（再加1个存储槽用来存储长度）。</p><p>思考一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br><span class="line">contract C &#123;</span><br><span class="line">    uint128[] s;</span><br><span class="line">    function C() &#123;</span><br><span class="line">        s.length = 4;</span><br><span class="line">        s[0] = 0xAA;</span><br><span class="line">        s[1] = 0xBB;</span><br><span class="line">        s[2] = 0xCC;</span><br><span class="line">        s[3] = 0xDD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在Remix中运行这个代码，存储器的最后看起来像这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">key: 0x0000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">value: 0x0000000000000000000000000000000000000000000000000000000000000004</span><br><span class="line">key: 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563</span><br><span class="line">value: 0x000000000000000000000000000000bb000000000000000000000000000000aa</span><br><span class="line">key: 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564</span><br><span class="line">value: 0x000000000000000000000000000000dd000000000000000000000000000000cc</span><br></pre></td></tr></table></figure></p><p>只有三个存储槽被使用了，跟预料的一样。长度再次存储在存储变量的<code>0x0</code>位置上。4个元素被打包放入两个独立的存储槽中。该数组的开始地址是变量位置的哈希值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># position = 0</span><br><span class="line">&gt;&gt;&gt; keccak256(bytes32(0))</span><br><span class="line">&apos;290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563&apos;</span><br></pre></td></tr></table></figure></p><p>现在的地址是每两个数组元素增加一次，看起来很好！</p><p>但是汇编代码本身优化的并不好。因为使用了两个存储槽，所以我们会希望优化器使用两个<code>sstore</code>指令来完成任务。不幸的是，由于边界检查(和一些其他因素)，所以没有办法将<code>sstore</code>指令优化掉。</p><p>使用4个<code>sstore</code>指令才能完成任务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/* &quot;c-bytes--sstore-optimize-fail.sol&quot;:105:116  s[0] = 0xAA */</span><br><span class="line">sstore</span><br><span class="line">/* &quot;c-bytes--sstore-optimize-fail.sol&quot;:126:137  s[1] = 0xBB */</span><br><span class="line">sstore</span><br><span class="line">/* &quot;c-bytes--sstore-optimize-fail.sol&quot;:147:158  s[2] = 0xCC */</span><br><span class="line">sstore</span><br><span class="line">/* &quot;c-bytes--sstore-optimize-fail.sol&quot;:168:179  s[3] = 0xDD */</span><br><span class="line">sstore</span><br></pre></td></tr></table></figure></p><h3 id="字节数组和字符串"><a href="#字节数组和字符串" class="headerlink" title="字节数组和字符串"></a>字节数组和字符串</h3><p><code>bytes</code>和<code>string</code>是为字节和字符进行优化的特殊数组类型。如果数组的长度小于31字节，只需要1个存储槽来存储整个数组。长一点的字节数组跟正常数组的表示方式差不多。</p><p>看看短一点的字节数组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// c-bytes--long.sol</span><br><span class="line">pragma solidity ^0.4.11;</span><br><span class="line">contract C &#123;</span><br><span class="line">    bytes s;</span><br><span class="line">    function C() &#123;</span><br><span class="line">        s.push(0xAA);</span><br><span class="line">        s.push(0xBB);</span><br><span class="line">        s.push(0xCC);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因为数组只有3个字节（小于31字节），所以它只占用1个存储槽。在Remix中运行，存储看起来如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">key: 0x0000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">value: 0xaabbcc0000000000000000000000000000000000000000000000000000000006</span><br></pre></td></tr></table></figure></p><p>数据<code>0xaabbcc...</code>从左到右的进行存储。后面的0是空数据。最后的<code>0x06</code>字节是数组的编码长度。公式是<code>长度=编码长度/2</code>，在这个例子中实际长度是<code>6/2=3</code>。</p><p><code>string</code>与<code>bytes</code>的原理一模一样。</p><h2 id="长字节数组"><a href="#长字节数组" class="headerlink" title="长字节数组"></a>长字节数组</h2><p>如果数据的长度大于31字节，字节数组就跟<code>[]byte</code>一样。来看一下长度为128字节的字节数组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// c-bytes--long.sol</span><br><span class="line">pragma solidity ^0.4.11;</span><br><span class="line">contract C &#123;</span><br><span class="line">    bytes s;</span><br><span class="line">    function C() &#123;</span><br><span class="line">        s.length = 32 * 4;</span><br><span class="line">        s[31] = 0x1;</span><br><span class="line">        s[63] = 0x2;</span><br><span class="line">        s[95] = 0x3;</span><br><span class="line">        s[127] = 0x4;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在Remix中运行，可以看见使用了4个存储槽：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0x0000...0000</span><br><span class="line">0x0000...0101</span><br><span class="line">0x290d...e563</span><br><span class="line">0x0000...0001</span><br><span class="line">0x290d...e564</span><br><span class="line">0x0000...0002</span><br><span class="line">0x290d...e565</span><br><span class="line">0x0000...0003</span><br><span class="line">0x290d...e566</span><br><span class="line">0x0000...0004</span><br></pre></td></tr></table></figure></p><p><code>0x0</code>的存储槽不再用来存储数据，整个存储槽现在存储编码的数组长度。要获得实际长度，使用<code>长度=（编码长度-1）/2</code>公式。在这个例子中长度是<code>（0x101 - 1）/2=128</code>。实际的字节被保存在<code>0x290d...e563</code>，并且存储槽是连续的。</p><p>字节数组的汇编代码相当多。除了正常的边界检查和数组恢复大小等，它还需要对长度进行编码/解码，以及注意长字节数组和短字节数组之间的转换。</p><blockquote><p>为什么要编码长度？因为编码之后，可以很容易的测试出来字节数组是长还是短。注意对于长数组而言编码长度总是奇数，而短数组的编码长度总是偶数。汇编代码只需要查看一下最后一位是否为0，为0就是偶数（短数组），非0就是奇数（长数组）。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>查看Solidity编译器的内部工作，可以看见熟悉的数据结构例如映射和数组与传统编程语言完全不同。</p><p>概括：</p><ul><li>数组跟映射一样，非高效</li><li>比映射的汇编代码更加复杂</li><li>小类型(<code>byte</code>，<code>uint8</code>，<code>string</code>)时存储比映射高效</li><li>汇编代码优化的不是很好。即使是打包，每个任务都会有一个<code>sstore</code>指令</li></ul><p>EVM的存储器就是一个键值数据库，跟git很像。如果你改变了任一东西，根节点的校验和也会改变。如果两个根节点拥有相同的校验和，存储的数据就能保证是一样的。</p><p>为了体会Solidity和EVM的奇特，可以想象一下在git仓库里数组里面的每个元素都是它自己的文件。当你改变数组里一个元素的值，实际上就相当于创建了一个提交。当你迭代一个数组时，你不能一次性的加载整个数组，你必须要到仓库中进行查找并分别找到每个文件。</p><p>不仅仅这样，每个文件都限制到32字节！因为我们需要将数据结构都分割成32字节的块，Solidity编译器的所有逻辑和优化都是很负责的，全部在汇编的时候完成。</p><p>不过32字节的限制是完全任意的。支持键值存储的可以使用key来存储任意类型的数值。也许未来我们添加新的EVM指令使用key来存储任意的字节数组。</p><p>不过现在，EVM存储器就是一个伪装成32字节数组的键值数据库。</p><blockquote><p>可以看看<a href="https://github.com/ethereum/solidity/blob/3b07c4d38e40c52ee8a4d16e56e2afa1a0f27905/libsolidity/codegen/ArrayUtils.cpp#L624">ArrayUtils::resizeDynamicArray</a> 来了解一下当恢复数组大小时编译器的动作。正常情况下数据结构都会作为语言的标准库来完成的，但是在Solidity中嵌入到了编译器里面。</p></blockquote><p>本系列文章其他部分译文链接：</p><ul><li><a href="http://www.jianshu.com/p/1969f3761208">EVM汇编代码的介绍(第1部分)</a></li><li><a href="http://www.jianshu.com/p/9df8d15418ed">固定长度数据类型的表示方法(第2部分)</a></li><li><a href="http://www.jianshu.com/p/d0e8e825d41b">ABI编码外部方法调用的方式(第4部分)</a></li><li><a href="http://www.jianshu.com/p/d9137e87c9d3">一个新合约被创建后会发生什么(第5部分)</a></li></ul><p>翻译作者: <a href="https://lilymoana.github.io/">许莉</a><br>原文地址：<a href="https://medium.com/@hayeah/diving-into-the-ethereum-vm-the-hidden-costs-of-arrays-28e119f04a9b">Diving Into The Ethereum VM Part  Three</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; &lt;/strong&gt;  &lt;Excerpt in index | Homepage Digest&gt;&lt;/p&gt;
&lt;p&gt;深入了解以太坊虚拟机是一个系列的文章，本文是第3篇，本系列其他部分的译文链接在文章结尾处&lt;/p&gt;
    
    </summary>
    
      <category term="translation" scheme="https://lilymoana.github.io/categories/translation/"/>
    
    
      <category term="blockchain" scheme="https://lilymoana.github.io/tags/blockchain/"/>
    
      <category term="ethereum" scheme="https://lilymoana.github.io/tags/ethereum/"/>
    
  </entry>
  
  <entry>
    <title>深入了解以太坊虚拟机第4部分——ABI编码外部方法调用的方式</title>
    <link href="https://lilymoana.github.io/evm_part4.html"/>
    <id>https://lilymoana.github.io/evm_part4.html</id>
    <published>2017-10-30T07:35:07.000Z</published>
    <updated>2017-11-22T05:25:28.822Z</updated>
    
    <content type="html"><![CDATA[<p><strong> </strong>  <Excerpt in index | Homepage Digest></p><p>深入了解以太坊虚拟机是一个系列的文章，本文是第4篇，本系列其他部分的译文链接在文章结尾处</p><a id="more"></a><The rest of contents | Rest of all><p><img src="/asset/evmp4_head.jpeg" alt=""> </p><p>在本系列的上一篇文章中我们看到了Solidity是如何在EVM存储器中表示复杂数据结构的。但是如果无法交互，数据就是没有意义的。智能合约就是数据和外界的中间体。</p><p>在这篇文章中我们将会看到Solidity和EVM可以让外部程序来调用合约的方法并改变它的状态。</p><p>“外部程序”不限于DApp/JavaScript。任何可以使用HTTP RPC与以太坊节点通信的程序，都可以通过创建一个交易与部署在区块链上的任何合约进行交互。</p><p>创建一个交易就像发送一个HTTP请求。Web的服务器会接收你的HTTP请求，然后改变数据库。交易会被网络接收，底层的区块链会扩展到包含改变的状态。</p><p>交易对于智能合约就像HTTP请求对于Web服务器。</p><p>如果对EVM汇编和Solidity数据表示陌生，请阅读该系列的前几篇文章：<br>本系列文章其他部分译文链接：</p><ul><li><a href="http://www.jianshu.com/p/1969f3761208">EVM汇编代码的介绍(第1部分)</a></li><li><a href="http://www.jianshu.com/p/9df8d15418ed">固定长度数据类型的表示方法(第2部分)</a></li><li><a href="http://www.jianshu.com/p/af5721c79505">动态数据类型的表示方法(第3部分)</a></li></ul><h2 id="合约交易"><a href="#合约交易" class="headerlink" title="合约交易"></a>合约交易</h2><p>让我们来看一下将状态变量设置在<code>0x1</code>位置上的交易。我们想要交互的合约有一个对变量<code>a</code>的设置者和获取者：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br><span class="line">contract C &#123;</span><br><span class="line">  uint256 a;</span><br><span class="line">  function setA(uint256 _a) &#123;</span><br><span class="line">    a = _a;</span><br><span class="line">  &#125;</span><br><span class="line">  function getA() returns(uint256) &#123;</span><br><span class="line">    return a;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个合约部署在Rinkeby测试网上。可以随意使用Etherscan，并搜索地址 <a href="https://rinkeby.etherscan.io/address/0x62650ae5c5777d1660cc17fcd4f48f6a66b9a4c2#code">0x62650ae5…</a>进行查看。</p><p>我创建了一个可以调用<code>setA(1)</code>的交易，可以在地址<a href="https://rinkeby.etherscan.io/tx/0x7db471e5792bbf38dc784a5b983ee6a7bbe3f1db85dd4daede9ee88ed88057a5">0x7db471e5…</a>上查看该交易。<br><img src="/asset/evmp4_transation.jpeg" alt=""></p><p>交易的输出数据是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0xee919d500000000000000000000000000000000000000000000000000000000000000001</span><br></pre></td></tr></table></figure></p><p>对于EVM而言，这只是36字节的元数据。它对元数据不会进行处理，会直接将元数据作为<code>calldata</code>传递给智能合约。如果智能合约是个Solidity程序，那么它会将这些输入字节解释为方法调用，并为<code>setA(1)</code>执行适当的汇编代码。</p><p>输入数据可以分成两个子部分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 方法选择器(4字节)</span><br><span class="line">0xee919d5</span><br><span class="line">#第一个参数(32字节)</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000001</span><br></pre></td></tr></table></figure></p><p>前面的4个字节是方法选择器，剩下的输入数据是方法的参数，32个字节的块。在这个例子中，只有一个参数，值是<code>0x1</code>。</p><p>方法选择器是方法签名的 kecccak256 哈希值。在这个例子中方法的签名是<code>setA(uint256)</code>，也就是方法名称和参数的类型。</p><p>让我们用Python来计算方法选择器。首先，哈希方法签名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 安装pyethereum [https://github.com/ethereum/pyethereum/#installation](https://github.com/ethereum/pyethereum/#installation)&gt; from ethereum.utils import sha3&gt; sha3(&quot;setA(uint256)&quot;).hex()&apos;ee919d50445cd9f463621849366a537968fe1ce096894b0d0c001528383d4769&apos;</span><br></pre></td></tr></table></figure></p><p>然后获取哈希值的前4字节：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; sha3(&quot;setA(uint256)&quot;)[0:4].hex()</span><br><span class="line">&apos;ee919d50&apos;</span><br></pre></td></tr></table></figure></p><h2 id="应用二进制接口（ABI）"><a href="#应用二进制接口（ABI）" class="headerlink" title="应用二进制接口（ABI）"></a>应用二进制接口（ABI）</h2><p>对于EVM而言，交易的输入数据(<code>calldata</code>)只是一个字节序列。EVM内部不支持调用方法。</p><p>智能合约可以选择通过以结构化的方式处理输入数据来模拟方法调用，就像前面所说的那样。</p><p>如果EVM上的所有语言都同意相同的方式解释输入数据，那么它们就可以很容易进行交互。 <a href="https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI#formal-specification-of-the-encoding">合约应用二进制接口</a>（ABI）指定了一个通用的编码模式。</p><p>我们已经看到了ABI是如何编码一个简单的方法调用，例如<code>SetA(1)</code>。在后面章节中我们将会看到方法调用和更复杂的参数是如何编码的。</p><h2 id="调用一个获取者"><a href="#调用一个获取者" class="headerlink" title="调用一个获取者"></a>调用一个获取者</h2><p>如果你调用的方法改变了状态，那么整个网络必须要同意。这就需要有交易，并消耗gas。</p><p>一个获取者如<code>getA()</code>不会改变任何东西。我们可以将方法调用发送到本地的以太坊节点，而不用请求整个网络来执行计算。一个<code>eth_call</code>RPC请求可以允许你在本地模拟交易。这对于只读方法或gas使用评估比较有帮助。</p><p>一个<code>eth_call</code>就像一个缓存的HTTP GET请求。</p><ul><li>它不改变全球的共识状态</li><li>本地区块链(“缓存”)可能会有点稍微过时</li></ul><p>制作一个<code>eth_call</code>来调用 <code>getA</code>方法，通过返回值来获取状态<code>a</code>。首先，计算方法选择器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; sha3(&quot;getA()&quot;)[0:4].hex()</span><br><span class="line">&apos;d46300fd&apos;</span><br></pre></td></tr></table></figure></p><p>由于没有参数，输入数据就只有方法选择器了。我们可以发送一个<code>eth_call</code>请求给任意的以太坊节点。对于这个例子，我们依然将请求发送给 infura.io的公共以太坊节点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X POST \-H &quot;Content-Type: application/json&quot; \&quot;[https://rinkeby.infura.io/YOUR_INFURA_TOKEN](https://rinkeby.infura.io/YOUR_INFURA_TOKEN)&quot; \--data &apos;&#123;&quot;jsonrpc&quot;: &quot;2.0&quot;,&quot;id&quot;: 1,&quot;method&quot;: &quot;eth_call&quot;,&quot;params&quot;: [&#123;&quot;to&quot;: &quot;0x62650ae5c5777d1660cc17fcd4f48f6a66b9a4c2&quot;,&quot;data&quot;: &quot;0xd46300fd&quot;&#125;,&quot;latest&quot;]&#125;&apos;</span><br></pre></td></tr></table></figure></p><p>EVM执行了计算并将元字节作为结果返回：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;jsonrpc&quot;:&quot;2.0&quot;,</span><br><span class="line">&quot;id&quot;:1,</span><br><span class="line">        &quot;result&quot;:&quot;0x0000000000000000000000000000000000000000000000000000000000000001&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>根据ABI，该字节应该会解释为<code>0x1</code>数值。</p><h2 id="外部方法调用的汇编"><a href="#外部方法调用的汇编" class="headerlink" title="外部方法调用的汇编"></a>外部方法调用的汇编</h2><p>现在来看看编译的合约是如何处理源输入数据的，并以此来制作一个方法调用。思考一个定义了<code>setA(uint256)</code>的合约：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br><span class="line">contract C &#123;</span><br><span class="line">  uint256 a;</span><br><span class="line">  // 注意: `payable` 让汇编简单一点点</span><br><span class="line">  function setA(uint256 _a) payable &#123;</span><br><span class="line">    a = _a;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">solc --bin --asm --optimize call.sol</span><br></pre></td></tr></table></figure></p><p>调用方法的汇编代码在合约内部，在<code>sub_0</code>标签下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">sub_0: assembly &#123;</span><br><span class="line">    mstore(0x40, 0x60)</span><br><span class="line">    and(div(calldataload(0x0), 0x100000000000000000000000000000000000000000000000000000000), 0xffffffff)</span><br><span class="line">    0xee919d50</span><br><span class="line">    dup2</span><br><span class="line">    eq</span><br><span class="line">    tag_2</span><br><span class="line">    jumpi</span><br><span class="line">  tag_1:</span><br><span class="line">    0x0</span><br><span class="line">    dup1</span><br><span class="line">    revert</span><br><span class="line">  tag_2:</span><br><span class="line">    tag_3</span><br><span class="line">    calldataload(0x4)</span><br><span class="line">    jump(tag_4)</span><br><span class="line">  tag_3:</span><br><span class="line">    stop</span><br><span class="line">  tag_4:</span><br><span class="line">      /* &quot;call.sol&quot;:95:96  a */</span><br><span class="line">    0x0</span><br><span class="line">      /* &quot;call.sol&quot;:95:101  a = _a */</span><br><span class="line">    dup2</span><br><span class="line">    swap1</span><br><span class="line">    sstore</span><br><span class="line">  tag_5:</span><br><span class="line">    pop</span><br><span class="line">    jump // 跳出</span><br><span class="line">auxdata: 0xa165627a7a7230582016353b5ec133c89560dea787de20e25e96284d67a632e9df74dd981cc4db7a0a0029</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里有两个样板代码与此讨论是无关的，但是仅供参考：</p><ul><li>最上面的<code>mstore(0x40, 0x60)</code>为sha3哈希保留了内存中的前64个字节。不管合约是否需要，这个都会存在的。</li><li>最下面的<code>auxdata</code>用来验证发布的源码与部署的字节码是否相同的。这个是可选择的，但是嵌入到了编译器中。</li></ul><p>将剩下的汇编代码分成两个部分，这样容易分析一点：</p><ul><li>匹配选择器并跳掉方法处</li><li>加载参数、执行方法，并从方法返回</li></ul><p>首先，匹配选择器的注释汇编代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 加载前4个字节作为方法选择器</span><br><span class="line">and(div(calldataload(0x0), 0x100000000000000000000000000000000000000000000000000000000), 0xffffffff)</span><br><span class="line">//  如果选择器匹配`0xee919d50`, 跳转到 setA</span><br><span class="line">0xee919d50</span><br><span class="line">dup2</span><br><span class="line">eq</span><br><span class="line">tag_2</span><br><span class="line">jumpi</span><br><span class="line">// 匹配失败，返回并还原</span><br><span class="line">tag_1:</span><br><span class="line">  0x0</span><br><span class="line">  dup1</span><br><span class="line">  revert</span><br><span class="line">// setA函数</span><br><span class="line">tag_2:</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure></p><p>除了开始从调用数据里面加载4字节时的位转移，其他的都是非常清晰明朗的。为了清晰可见，给出了汇编逻辑的低级伪代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methodSelector = calldata[0:4]</span><br><span class="line">if methodSelector == &quot;0xee919d50&quot;:</span><br><span class="line">  goto tag_2 // 跳转到setA</span><br><span class="line">else:</span><br><span class="line">  // 匹配失败，返回并还原</span><br><span class="line">  revert</span><br></pre></td></tr></table></figure></p><p>实际方法调用的注释汇编代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// setA</span><br><span class="line">tag_2:</span><br><span class="line">  // 方法调用之后跳转的地方</span><br><span class="line">  tag_3</span><br><span class="line">  // 加载第一个参数(数值0x1).</span><br><span class="line">  calldataload(0x4)</span><br><span class="line">  // 执行方法</span><br><span class="line">  jump(tag_4)</span><br><span class="line">tag_4:</span><br><span class="line">  // sstore(0x0, 0x1)</span><br><span class="line">  0x0</span><br><span class="line">  dup2</span><br><span class="line">  swap1</span><br><span class="line">  sstore</span><br><span class="line">tag_5:</span><br><span class="line">  pop</span><br><span class="line">  //程序的结尾，将会跳转到 tag_3并停止</span><br><span class="line">  jump</span><br><span class="line">tag_3:</span><br><span class="line">  // 程序结尾</span><br><span class="line">  stop</span><br></pre></td></tr></table></figure></p><p>在进入方法体之前，汇编代码做了两件事情：</p><ol><li>保存了一个位置，方法调用之后返回此位置</li><li>从调用数据里面加载参数到栈中</li></ol><p>低级的伪代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 保存位置，方法调用结束后返回此位置</span><br><span class="line">@returnTo = tag_3</span><br><span class="line">tag_2: // setA</span><br><span class="line">  // 从调用数据里面加载参数到栈中</span><br><span class="line">  @arg1 = calldata[4:4+32]</span><br><span class="line">tag_4: // a = _a</span><br><span class="line">  sstore(0x0, @arg1)</span><br><span class="line">tag_5 // 返回</span><br><span class="line">  jump(@returnTo)</span><br><span class="line">tag_3:</span><br><span class="line">  stop</span><br></pre></td></tr></table></figure></p><p>将这两部分组合起来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">methodSelector = calldata[0:4]</span><br><span class="line">if methodSelector == &quot;0xee919d50&quot;:</span><br><span class="line">  goto tag_2 // goto setA</span><br><span class="line">else:</span><br><span class="line">  // 无匹配方法。失败</span><br><span class="line">  revert</span><br><span class="line">@returnTo = tag_3</span><br><span class="line">tag_2: // setA(uint256 _a)</span><br><span class="line">  @arg1 = calldata[4:36]</span><br><span class="line">tag_4: // a = _a</span><br><span class="line">  sstore(0x0, @arg1)</span><br><span class="line">tag_5 // 返回</span><br><span class="line">  jump(@returnTo)</span><br><span class="line">tag_3:</span><br><span class="line">  stop</span><br></pre></td></tr></table></figure></p><blockquote><p>有趣的小细节：<code>revert</code>的操作码是<code>fd</code>。但是在黄皮书中你不会找到它的详细说明，或者在代码中找到它的实现。实际上，<code>fd</code>不是确实存在的！这是个无效的操作。当EVM遇到了一个无效的操作，它会放弃并且会有还原状态的副作用。</p></blockquote><h2 id="处理多个方法"><a href="#处理多个方法" class="headerlink" title="处理多个方法"></a>处理多个方法</h2><p>Solidity编译器是如何为有多个方法的合约产生汇编代码的？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br><span class="line">contract C &#123;</span><br><span class="line">    uint256 a;</span><br><span class="line">    uint256 b;</span><br><span class="line">    function setA(uint256 _a) &#123;</span><br><span class="line">      a = _a;</span><br><span class="line">    &#125;</span><br><span class="line">    function setB(uint256 _b) &#123;</span><br><span class="line">      b = _b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>简单，只要一些<code>if-else</code>分支就可以了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// methodSelector = calldata[0:4]</span><br><span class="line">and(div(calldataload(0x0), 0x100000000000000000000000000000000000000000000000000000000), 0xffffffff)</span><br><span class="line">// if methodSelector == 0x9cdcf9b</span><br><span class="line">0x9cdcf9b</span><br><span class="line">dup2</span><br><span class="line">eq</span><br><span class="line">tag_2 // SetB</span><br><span class="line">jumpi</span><br><span class="line">// elsif methodSelector == 0xee919d50</span><br><span class="line">dup1</span><br><span class="line">0xee919d50</span><br><span class="line">eq</span><br><span class="line">tag_3 // SetA</span><br><span class="line">jumpi</span><br></pre></td></tr></table></figure></p><p>伪代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">methodSelector = calldata[0:4]</span><br><span class="line">if methodSelector == &quot;0x9cdcf9b&quot;:</span><br><span class="line">  goto tag_2</span><br><span class="line">elsif methodSelector == &quot;0xee919d50&quot;:</span><br><span class="line">  goto tag_3</span><br><span class="line">else:</span><br><span class="line">  // Cannot find a matching method. Fail.</span><br><span class="line">  revert</span><br></pre></td></tr></table></figure></p><h3 id="ABI为复杂方法调用进行编码"><a href="#ABI为复杂方法调用进行编码" class="headerlink" title="ABI为复杂方法调用进行编码"></a>ABI为复杂方法调用进行编码</h3><p><img src="/asset/evmp4_zero.jpeg" alt="不用担心零,这些零都没关系"></p><p>对于一个方法调用，交易输入数据的前4个字节总是方法选择器。跟在后面的32字节块就是方法参数。 <a href="https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI">ABI编码规范</a>显示了更加复杂的参数类型是如何被编码的，但是阅读起来非常的痛苦。</p><p>另一个学习ABI编码的方式是使用 <a href="https://github.com/ethereum/pyethereum/blob/4e945e2a24554ec04eccb160cff689a82eed7e0d/ethereum/abi.py">pyethereum的ABI编码函数</a> 来研究不同数据类型是如何编码的。我们会从简单的例子开始，然后建立更复杂的类型。</p><p>首先，导出<code>encode_abi</code>函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from ethereum.abi import encode_abi</span><br></pre></td></tr></table></figure></p><p>对于一个有3个<code>uint256</code>类型参数的方法（例如<code>foo(uint256 a, uint256 b, uint256 c)</code>），编码参数只是简单的依次对<code>uint256</code>数值进行编码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 第一个数组列出了参数的类型</span><br><span class="line"># 第二个数组列出了参数的值</span><br><span class="line">&gt; encode_abi([&quot;uint256&quot;, &quot;uint256&quot;, &quot;uint256&quot;],[1, 2, 3]).hex()</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000001</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000002</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000003</span><br></pre></td></tr></table></figure></p><p>小于32字节的类型会被填充到32字节：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; encode_abi([&quot;int8&quot;, &quot;uint32&quot;, &quot;uint64&quot;],[1, 2, 3]).hex()</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000001</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000002</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000003</span><br></pre></td></tr></table></figure></p><p>对于定长数组，元素还是32字节的块（如果必要的话会填充0），依次排列：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; encode_abi(</span><br><span class="line">   [&quot;int8[3]&quot;, &quot;int256[3]&quot;],</span><br><span class="line">   [[1, 2, 3], [4, 5, 6]]</span><br><span class="line">).hex()</span><br><span class="line">// int8[3]. Zero-padded to 32 bytes.</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000001</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000002</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000003</span><br><span class="line">// int256[3].</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000004</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000005</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000006</span><br></pre></td></tr></table></figure></p><h3 id="ABI为动态数组编码"><a href="#ABI为动态数组编码" class="headerlink" title="ABI为动态数组编码"></a>ABI为动态数组编码</h3><p>ABI介绍了一种间接的编码动态数组的方法，遵循一个叫做<a href="https://github.com/ethereum/pyethereum/blob/4e945e2a24554ec04eccb160cff689a82eed7e0d/ethereum/abi.py#L735-L741">头尾编码</a>的模式。</p><p>该模式其实就是动态数组的元素被打包到交易的调用数据尾部，参数(“头”)会被引用到调用数据里，这里就是数组元素。</p><p>如果我们调用的方法有3个动态数组，参数的编码就会像这样（添加注释和换行为了更加的清晰）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&gt; encode_abi(</span><br><span class="line">  [&quot;uint256[]&quot;, &quot;uint256[]&quot;, &quot;uint256[]&quot;],</span><br><span class="line">  [[0xa1, 0xa2, 0xa3], [0xb1, 0xb2, 0xb3], [0xc1, 0xc2, 0xc3]]</span><br><span class="line">).hex()</span><br><span class="line">/************* HEAD (32*3 bytes) *************/</span><br><span class="line">// 参数1: 数组数据在0x60位置</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000060</span><br><span class="line">// 参数2：数组数据在0xe0位置</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000e0</span><br><span class="line">// 参数3： 数组数据在0x160位置 </span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000160</span><br><span class="line">/************* TAIL (128**3 bytes) *************/</span><br><span class="line">//  0x60位置。参数1的数据</span><br><span class="line">// 长度后跟这元素</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000003</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000a1</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000a2</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000a3</span><br><span class="line">// 0xe0位置。参数2的数据</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000003</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000b1</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000b2</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000b3</span><br><span class="line">//0x160位置。参数3的数据</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000003</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000c1</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000c2</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000c3</span><br></pre></td></tr></table></figure></p><p><code>HEAD</code>部分有32字节参数，指出<code>TAIL</code>部分的位置，<code>TAIL</code>部分包含了3个动态数组的实际数据。</p><p>举个例子，第一个参数是<code>0x60</code>，指出调用数据的第96个(<code>0x60</code>)字节。如果你看一下第96个字节，它是数组的开始地方。前32字节是长度，后面跟着的是3个元素。</p><p>混合动态和静态参数是可能的。这里有个(<code>static</code>，<code>dynamic</code>，<code>static</code>)参数。静态参数按原样编码，而第二个动态数组的数据放到了尾部：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; encode_abi(</span><br><span class="line">  [&quot;uint256&quot;, &quot;uint256[]&quot;, &quot;uint256&quot;],</span><br><span class="line">  [0xaaaa, [0xb1, 0xb2, 0xb3], 0xbbbb]</span><br><span class="line">).hex()</span><br><span class="line">/************* HEAD (32*3 bytes) *************/</span><br><span class="line">// 参数1： 0xaaaa</span><br><span class="line">000000000000000000000000000000000000000000000000000000000000aaaa</span><br><span class="line">// 参数2：数组数据在0x60位置</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000060</span><br><span class="line">// 参数3： 0xbbbb</span><br><span class="line">000000000000000000000000000000000000000000000000000000000000bbbb</span><br><span class="line">/************* TAIL (128 bytes) *************/</span><br><span class="line">// 0x60位置。参数2的数据</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000003</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000b1</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000b2</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000b3</span><br></pre></td></tr></table></figure></p><p>有很多的0，不过没关系。</p><h2 id="编码字节数组"><a href="#编码字节数组" class="headerlink" title="编码字节数组"></a>编码字节数组</h2><p>字符串和字节数组同样是头尾编码。唯一的区别是字节数组会被紧密的打包成一个32字节的块，就像：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt; encode_abi(</span><br><span class="line">  [&quot;string&quot;, &quot;string&quot;, &quot;string&quot;],</span><br><span class="line">  [&quot;aaaa&quot;, &quot;bbbb&quot;, &quot;cccc&quot;]</span><br><span class="line">).hex()</span><br><span class="line">// 参数1： 字符串数据在0x60位置</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000060</span><br><span class="line">// 参数2：字符串数据在0xa0位置</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000a0</span><br><span class="line">// 参数3：字符串数据在0xe0位置</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000e0</span><br><span class="line">// 0x60 (96)。 参数1的数据</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000004</span><br><span class="line">6161616100000000000000000000000000000000000000000000000000000000</span><br><span class="line">// 0xa0 (160)。参数2的数据</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000004</span><br><span class="line">6262626200000000000000000000000000000000000000000000000000000000</span><br><span class="line">// 0xe0 (224)。参数3的数据</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000004</span><br><span class="line">6363636300000000000000000000000000000000000000000000000000000000</span><br></pre></td></tr></table></figure></p><p>对于每个字符串/字节数组，前面的32字节是编码长度，后面跟着才是字符串/字节数组的内容。</p><p>如果字符串大于32字节，那么多个32字节块就会被使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 编码字符串的48字节</span><br><span class="line">ethereum.abi.encode_abi(</span><br><span class="line">  [&quot;string&quot;],</span><br><span class="line">  [&quot;a&quot; * (32+16)]</span><br><span class="line">).hex()</span><br><span class="line"></span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000020</span><br><span class="line">//字符串的长度为0x30 (48)</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000030</span><br><span class="line">6161616161616161616161616161616161616161616161616161616161616161</span><br><span class="line">6161616161616161616161616161616100000000000000000000000000000000</span><br></pre></td></tr></table></figure></p><h2 id="嵌套数组"><a href="#嵌套数组" class="headerlink" title="嵌套数组"></a>嵌套数组</h2><p>嵌套数组中每个嵌套有一个间接寻址。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt; encode_abi(</span><br><span class="line">  [&quot;uint256[][]&quot;],</span><br><span class="line">  [[[0xa1, 0xa2, 0xa3], [0xb1, 0xb2, 0xb3], [0xc1, 0xc2, 0xc3]]]</span><br><span class="line">).hex()</span><br><span class="line">//参数1：外层数组在0x20位置上</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000020</span><br><span class="line">// 0x20。每个元素都是里层数组的位置</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000003</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000060</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000e0</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000160</span><br><span class="line">// array[0]在0x60位置上</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000003</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000a1</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000a2</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000a3</span><br><span class="line">// array[1] 在0xe0位置上</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000003</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000b1</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000b2</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000b3</span><br><span class="line">// array[2]在0x160位置上</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000003</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000c1</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000c2</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000c3</span><br></pre></td></tr></table></figure></p><p>很多的0！</p><h2 id="Gas成本和ABI编码设计"><a href="#Gas成本和ABI编码设计" class="headerlink" title="Gas成本和ABI编码设计"></a>Gas成本和ABI编码设计</h2><p>为什么ABI将方法选择器截断到4个字节？如果我们不使用sha256的整个32字节，会不会不幸的碰到不同方法发生冲突的情况？ 如果这个截断是为了节省成本，那么为什么在用更多的0来进行填充时，而仅仅只为了节省方法选择器中的28字节而截断呢？</p><p>这种设计看起来互相矛盾……直到我们考虑到一个交易的gas成本。</p><ul><li>每笔交易需要支付 21000 gas</li><li>每笔交易的0字节或代码需要支付 4 gas</li><li>每笔交易的非0字节或代码需要支付 68 gas</li></ul><p>啊哈！0要便宜17倍，0填充现在看起来没有那么不合理了。</p><p>方法选择器是一个加密哈希值，是个伪随机。一个随机的字符串倾向于拥有很多的非0字节，因为每个字节只有0.3%（1/255）的概率是0。</p><ul><li><code>0x1</code>填充到32字节成本是192 gas<br>4*31 (0字节) + 68 (1个非0字节)</li><li>sha256可能有32个非0字节，成本大概2176 gas<br>32 * 68</li><li>sha256截断到4字节，成本大概272 gas<br>32*4</li></ul><p>ABI展示了另外一个底层设计的奇特例子，通过gas成本结构进行激励。</p><h3 id="负整数…"><a href="#负整数…" class="headerlink" title="负整数…."></a>负整数….</h3><p>一般使用叫做 <a href="https://en.wikipedia.org/wiki/Two%27s_complement">补码</a>的方式来表达负整数。<code>int8</code>类型<code>-1</code>的数值编码会都是1。<code>1111 1111</code>。</p><p>ABI用1来填充负整数，所以<code>-1</code>会被填充为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</span><br></pre></td></tr></table></figure></p><p>越大的负整数（<code>-1</code>大于<code>-2</code>）1越多，会花费相当多的gas。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>与智能合约交互，你需要发送原始字节。它会进行一些计算，可能会改变自己的状态，然后会返回给你原始字节。方法调用实际上不存在，这是ABI创造的集体假象。</p><p>ABI被指定为一个低级格式，但是在功能上更像一个跨语言RPC框架的序列化格式。</p><p> 我们可以在DApp和Web App的架构层面之间进行类比：</p><ul><li>区块链就是一个备份数据库</li><li>合约就像web服务器</li><li>交易就像请求</li><li>ABI是数据交换格式，就像<a href="https://en.wikipedia.org/wiki/Protocol_Buffers">Protocol Buffer</a>。</li></ul><p>本系列文章其他部分译文链接：</p><ul><li><a href="http://www.jianshu.com/p/1969f3761208">EVM汇编代码的介绍(第1部分)</a></li><li><a href="http://www.jianshu.com/p/9df8d15418ed">固定长度数据类型的表示方法(第2部分)</a></li><li><a href="http://www.jianshu.com/p/af5721c79505">动态数据类型的表示方法(第3部分)</a></li><li><a href="http://www.jianshu.com/p/d9137e87c9d3">一个新合约被创建后会发生什么(第5部分)</a></li></ul><p>翻译作者: <a href="https://lilymoana.github.io/">许莉</a><br>原文地址：<a href="https://medium.com/@hayeah/how-to-decipher-a-smart-contract-method-call-8ee980311603">Diving Into The Ethereum VM Part Four</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; &lt;/strong&gt;  &lt;Excerpt in index | Homepage Digest&gt;&lt;/p&gt;
&lt;p&gt;深入了解以太坊虚拟机是一个系列的文章，本文是第4篇，本系列其他部分的译文链接在文章结尾处&lt;/p&gt;
    
    </summary>
    
      <category term="translation" scheme="https://lilymoana.github.io/categories/translation/"/>
    
    
      <category term="blockchain" scheme="https://lilymoana.github.io/tags/blockchain/"/>
    
      <category term="ethereum" scheme="https://lilymoana.github.io/tags/ethereum/"/>
    
  </entry>
  
  <entry>
    <title>深入了解以太坊虚拟机第5部分——一个新合约被创建后会发生什么</title>
    <link href="https://lilymoana.github.io/evm_part5.html"/>
    <id>https://lilymoana.github.io/evm_part5.html</id>
    <published>2017-10-30T07:07:34.000Z</published>
    <updated>2017-11-22T05:25:28.822Z</updated>
    
    <content type="html"><![CDATA[<p> <strong>  </strong>  <Excerpt in index | Homepage Digest></p><p>深入了解以太坊虚拟机是一个系列的文章，本文是最后一篇，前部分的译文链接在本文结尾处</p> <a id="more"></a><The rest of contents | Rest of all><p><img src="/asset/evmp5_head.jpeg" alt=""> </p><p>在该系列文章的前部分，我们学了EVM汇编基础，也学了ABI编码是如何允许外部程序与合约进行通信的。在本文中，我们将会学习一个合约是如何从零创建的。</p><p>本系列的相关文章（按照顺序）：</p><ul><li><a href="http://www.jianshu.com/p/1969f3761208">EVM汇编代码的介绍(第1部分)</a></li><li><a href="http://www.jianshu.com/p/9df8d15418ed">固定长度数据类型的表示方法(第2部分)</a></li><li><a href="http://www.jianshu.com/p/af5721c79505">动态数据类型的表示方法(第3部分)</a></li><li><a href="http://www.jianshu.com/p/d0e8e825d41b">ABI编码外部方法调用的方式(第4部分)</a></li></ul><p>我们目前所见的EVM字节码都是比较清晰明朗的，就是EVM从上往下的执行指令，没有什么隐藏的魔法。合约创建的过程更有意思一些，它将数据和代码之间的界限模糊化。</p><p>在学习合约是如何创建的时候，我们将会看到有时候数据就是代码，有时候代码就是数据。</p><p>带上你最喜欢的魔术帽子🎩，我们来开始吧！</p><h2 id="合约出生证明"><a href="#合约出生证明" class="headerlink" title="合约出生证明"></a>合约出生证明</h2><p>让我们创建一个简单（完全没用）的合约：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br><span class="line">contract C &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译它：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">solc --bin --asm c.sol</span><br></pre></td></tr></table></figure></p><p>字节码是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058209747525da0f525f1132dde30c8276ec70c4786d4b08a798eda3c8314bf796cc30029</span><br></pre></td></tr></table></figure></p><p>为了创建这个合约，我们需要先通过发送一个<a href="https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sendtransaction">eth_sendtransaction</a> RPC请求给以太坊的节点来创建一个交易。你可以使用<a href="https://remix.ethereum.org/">Remix</a>或<a href="https://metamask.io/">Metamask</a>来做这件事情。</p><p>不管你使用什么开发工具，RPC调用的参数就差不多类似于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;from&quot;: &quot;0xbd04d16f09506e80d1fd1fd8d0c79afa49bd9976&quot;,</span><br><span class="line">  &quot;to&quot;: null,</span><br><span class="line">  &quot;gas&quot;: &quot;68653&quot;, // 30400,</span><br><span class="line">  &quot;gasPrice&quot;: &quot;1&quot;, // 10000000000000</span><br><span class="line">  &quot;data&quot;: &quot;0x60606040523415600e57600080fd5b603580601b6000396000f3006060604052600080fd00a165627a7a723058204bf1accefb2526a5077bcdfeaeb8020162814272245a9741cc2fddd89191af1c0029&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>没有什么特殊的RPC调用或交易类型来创建一个合约。相同的交易机制也被用于其他机制：</p><ul><li>转移Ether到一个账户或合约</li><li>调用一个带参数的合约方法</li></ul><p>根据你指定的参数，以太坊会以不同方式解释交易。创建一个合约，<code>to</code>地址应该为<code>null</code>（或被忽略）。</p><p>我用下面这个交易创建了一个合约例子：<br><a href="https://rinkeby.etherscan.io/tx/0x58f36e779950a23591aaad9e4c3c3ac105547f942f221471bf6ffce1d40f8401">https://rinkeby.etherscan.io/tx/0x58f36e779950a23591aaad9e4c3c3ac105547f942f221471bf6ffce1d40f8401</a></p><p>打开Etherscan，你应该可以看到该交易的输入数据就是Solidity编译器产生的字节码：<br><img src="/asset/evmp5_bytecode.jpeg" alt=""></p><p>当处理该交易的时候，EVM会将输入数据作为代码执行。瞧，一个合约就被创建了。</p><h2 id="字节码是干什么的？"><a href="#字节码是干什么的？" class="headerlink" title="字节码是干什么的？"></a>字节码是干什么的？</h2><p>我们可以将上面的字节码分成3个独立的块：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//部署代码</span><br><span class="line">60606040523415600e57600080fd5b5b603680601c6000396000f300</span><br><span class="line">//合约代码</span><br><span class="line">60606040525b600080fd00</span><br><span class="line">// Auxdata</span><br><span class="line">a165627a7a723058209747525da0f525f1132dde30c8276ec70c4786d4b08a798eda3c8314bf796cc30029</span><br></pre></td></tr></table></figure></p><ul><li>创建合约时运行部署代码</li><li>合约创建成功之后当它的方法被调用时，运行合约代码</li><li>（可选）Auxdata是源码的加密指纹，用来验证。这只是数据，永远不会被EVM执行</li></ul><p>部署代码有两个主要作用：</p><ol><li>运行构造器函数，并设置初始化内存变量（就像合约的拥有者）</li><li>计算合约代码，并返回给EVM</li></ol><p>Solidity编译器产生的部署代码会从字节码中加载<code>60606040525b600080fd00</code>到内存中，然后将它作为合约代码返回。在这个例子中，“计算”只是读取一块数据到内存中。原则上，我们可以编程地产生合约代码。</p><p>构造器到底做什么取决于语言，但是EVM语言最后会返回合约代码。</p><h2 id="合约创建"><a href="#合约创建" class="headerlink" title="合约创建"></a>合约创建</h2><p>那么当部署代码运行完并返回合约代码之后会发生什么？以太坊是如何从返回的合约代码中创建一个合约的？</p><p>让我们一起深入的去了解一下源码，看看细节。</p><p>我发现了Go-Ethereum 的实现方式是找到需要信息的最简单参考。我们得到了正确的变量名、静态类型信息和符号交叉引用。尝试超越这个，黄皮书！</p><p>使用Sourcegraph（当鼠标停留在一个变量上的时候会有类型信息，非常好用）软件阅读的源码，找到的相关方法是<a href="https://sourcegraph.com/github.com/ethereum/go-ethereum@e9295163aa25479e817efee4aac23eaeb7554bba/-/blob/core/vm/evm.go#L301">evm.Create</a>。让我们略读一下代码，忽略一些错误检查和过于详细的细节。从上到下：</p><ul><li><p>检测调用者是否拥有足够的余额来做转账</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if !evm.CanTransfer(evm.StateDB, caller.Address(), value) &#123;</span><br><span class="line"> return nil, common.Address&#123;&#125;, gas, ErrInsufficientBalance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>从调用者的地址派生一个新合约的地址（通过创建者账户的 <code>nonce</code>传递）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">contractAddr = crypto.CreateAddress(caller.Address(), nonce)</span><br></pre></td></tr></table></figure></li><li><p>使用派生的合约地址来创建新合约账户（改变”世界状态“<code>StateDB</code> ）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evm.StateDB.CreateAccount(contractAddr)</span><br></pre></td></tr></table></figure></li><li><p>将初始的Ether基金从调用者转到新合约中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evm.Transfer(evm.StateDB, caller.Address(), contractAddr, value)</span><br></pre></td></tr></table></figure></li><li><p>设置输入数据为合约的部署代码，然后使用EVM来执行。<code>ret</code>变量是返回的合约代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">contract := NewContract(caller, AccountRef(contractAddr), value, gas)</span><br><span class="line">contract.SetCallCode(&amp;contractAddr, crypto.Keccak256Hash(code), code)</span><br><span class="line">ret, err = run(evm, snapshot, contract, nil)</span><br></pre></td></tr></table></figure></li><li><p>检查错误。或如果合约代码太长则会失败。收取用户的gas然后设置合约代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if err == nil &amp;&amp; !maxCodeSizeExceeded &#123;</span><br><span class="line">  createDataGas := uint64(len(ret)) * params.CreateDataGas</span><br><span class="line">  if contract.UseGas(createDataGas) &#123;</span><br><span class="line">    evm.StateDB.SetCode(contractAddr, ret)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    err = ErrCodeStoreOutOfGas</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="部署代码的代码"><a href="#部署代码的代码" class="headerlink" title="部署代码的代码"></a>部署代码的代码</h2><p>让我们来看看汇编代码的细节，看看当一个合约被创建的时候”部署代码“是如何返回”合约代码“的。我们将会再一次分析合约列子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br><span class="line">contract C &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>将该合约的字节码分成独立的块：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 部署代码</span><br><span class="line">60606040523415600e57600080fd5b5b603680601c6000396000f300</span><br><span class="line">//合约代码</span><br><span class="line">60606040525b600080fd00</span><br><span class="line">// Auxdata</span><br><span class="line">a165627a7a723058209747525da0f525f1132dde30c8276ec70c4786d4b08a798eda3c8314bf796cc30029</span><br></pre></td></tr></table></figure></p><p>部署代码的汇编代码是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 为Solidity内部保留0x60个字节的内存</span><br><span class="line">mstore(0x40, 0x60)</span><br><span class="line">// 非支付合约。如果调用者发送ether就会归还</span><br><span class="line">jumpi(tag_1, iszero(callvalue))</span><br><span class="line">0x0</span><br><span class="line">dup1</span><br><span class="line">revert</span><br><span class="line">// 将合约代码拷贝到内存中并返回</span><br><span class="line">tag_1:</span><br><span class="line">tag_2:</span><br><span class="line">  dataSize(sub_0)</span><br><span class="line">  dup1</span><br><span class="line">  dataOffset(sub_0)</span><br><span class="line">  0x0</span><br><span class="line">  codecopy</span><br><span class="line">  0x0</span><br><span class="line">  return</span><br><span class="line">stop</span><br></pre></td></tr></table></figure></p><p>为返回合约代码跟踪上面的汇编代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// 60 36 (PUSH 0x36)</span><br><span class="line">dataSize(sub_0)</span><br><span class="line">  stack: [0x36]</span><br><span class="line">dup1</span><br><span class="line">  stack: [0x36 0x36]</span><br><span class="line">// 60 1c == (PUSH 0x1c)</span><br><span class="line">dataOffset(sub_0)</span><br><span class="line">  stack: [0x1c 0x36 0x36]</span><br><span class="line">0x0</span><br><span class="line">  stack: [0x0 0x1c 0x36 0x36]</span><br><span class="line">codecopy</span><br><span class="line">  // 消耗三个参数</span><br><span class="line">  // 将数据的 `length` 从`codeOffset` 拷贝到`memoryOffset`</span><br><span class="line">  // memoryOffset = 0x0</span><br><span class="line">  // codeOffset   = 0x1c</span><br><span class="line">  // length       = 0x36</span><br><span class="line">  stack: [0x36]</span><br><span class="line">0x0</span><br><span class="line">  stack: [0x0 0x36]</span><br><span class="line">  memory: [</span><br><span class="line">    0x0:0x36 =&gt; calldata[0x1c:0x36]</span><br><span class="line">  ]</span><br><span class="line">return</span><br><span class="line">  // 消耗两个参数</span><br><span class="line">  // 返回 `memoryOffset`中的数据`length` </span><br><span class="line">  // memoryOffset  = 0x0</span><br><span class="line">  // length        = 0x36</span><br><span class="line">  stack: []</span><br><span class="line">  memory: [</span><br><span class="line">    0x0:0x36 =&gt; calldata[0x1c:0x36]</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure></p><p><code>dataSize(sub_0)</code>和<code>dataOffset(sub_0)</code>实际上不是真正的指令。它们实际上是PUSH指令，将常量压入栈中。两个<code>0x1C</code>(28) 和<code>0x36</code> (54) 常量指定一个字节码子字符串作为代码合约返回。</p><p>部署代码的汇编代码大致对应于下面的Python3 代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">memory = []</span><br><span class="line">calldata = bytes.fromhex(&quot;60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820b5090d937cf89f134d30e54dba87af4247461dd3390acf19d4010d61bfdd983a0029&quot;)</span><br><span class="line">size = 0x36   // dataSize(sub_0)</span><br><span class="line">offset = 0x1c // dataOffset(sub_0)</span><br><span class="line">// 将调用数据的子字符串拷贝到内存</span><br><span class="line">memory[0:size] = calldata[offset:offset+size]</span><br><span class="line">// 将内存的内容用十六进制打印出来而不返回</span><br><span class="line">print(bytes(memory[0:size]).hex())</span><br></pre></td></tr></table></figure></p><p>产生的内存内容是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">60606040525b600080fd00</span><br><span class="line">a165627a7a72305820b5090d937cf89f134d30e54dba87af4247461dd3390acf19d4010d61bfdd983a0029</span><br></pre></td></tr></table></figure></p><p>对应的汇编代码（加上auxdata）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 6060604052600080fd00</span><br><span class="line">mstore(0x40, 0x60)</span><br><span class="line">tag_1:</span><br><span class="line">  0x0</span><br><span class="line">  dup1</span><br><span class="line">  revert</span><br><span class="line">auxdata: 0xa165627a7a723058209747525da0f525f1132dde30c8276ec70c4786d4b08a798eda3c8314bf796cc30029</span><br></pre></td></tr></table></figure></p><p>再次看下Etherscan，这正是部署的合约代码：<br><a href="https://rinkeby.etherscan.io/address/0x2c7f561f1fc5c414c48d01e480fdaae2840b8aa2#code">以太坊账户0x2c7f561F1fc5c414C48d01E480fDAAE2840B8AA2 信息<br>以太坊区块链探险者，API和分析平台<br>rinkeby.etherscan.io </a><br><img src="/asset/evmp5_address.jpeg" alt=""></p><h2 id="CODECOPY"><a href="#CODECOPY" class="headerlink" title="CODECOPY"></a>CODECOPY</h2><p>部署代码使用<code>codecopy</code>将交易的输入数据拷贝到内存。</p><p><code>codecopy</code>指令的行为和参数比其他的简单指令要复杂一点。如果我在黄皮书中查找这个指令，可能会更加的困惑一些。相反，让我们看看go-ethereum 源代码来研究一下到底怎么回事。</p><p>看看<a href="https://sourcegraph.com/github.com/ethereum/go-ethereum@e9295163aa25479e817efee4aac23eaeb7554bba/-/blob/core/vm/instructions.go#L408:6">CODECOPY</a>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">func opCodeCopy(pc *uint64, evm *EVM, contract *Contract, memory *Memory, stack *Stack) ([]byte, error) &#123;</span><br><span class="line"> var (</span><br><span class="line">  memOffset  = stack.pop()</span><br><span class="line">  codeOffset = stack.pop()</span><br><span class="line">  length     = stack.pop()</span><br><span class="line"> )</span><br><span class="line"> codeCopy := getDataBig(contract.Code, codeOffset, length)</span><br><span class="line"> memory.Set(memOffset.Uint64(), length.Uint64(), codeCopy)</span><br><span class="line">evm.interpreter.intPool.put(memOffset, codeOffset, length)</span><br><span class="line"> return nil, nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>没有难懂的字母！</p><blockquote><p><code>evm.interpreter.intPool.put(memOffset, codeOffset, length)</code>这一行回收对象（大整数）后面使用。这只是一个高效的优化。</p></blockquote><h2 id="构造器参数"><a href="#构造器参数" class="headerlink" title="构造器参数"></a>构造器参数</h2><p>除了产生合约代码，部署代码的其他作用是运行构造器来进行设置。如果存在构造器参数，那么部署代码就需要从某地放加载参数。</p><p>Solidity传递构造器参数的惯例是在调用<code>eth_sendtransaction</code>时在字节码末尾附加ABI编码的参数值。RPC调用将字节码和ABI编码参数放到一起作为输入数据进行传递，就像：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;from&quot;: &quot;0xbd04d16f09506e80d1fd1fd8d0c79afa49bd9976&quot;</span><br><span class="line">  &quot;data&quot;: hexencode(compiledByteCode + encodedParams),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看看有一个构造器参数的合约例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br><span class="line">contract C &#123;</span><br><span class="line">  uint256 a;</span><br><span class="line">  function C(uint256 _a) &#123;</span><br><span class="line">    a = _a;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我已经创建了这个合约，传递了<code>66</code>值。Etherscan上的交易：<br><a href="https://rinkeby.etherscan.io/tx/0x2f409d2e186883bd3319a8291a345ddbc1c0090f0d2e182a32c9e54b5e3fdbd8">https://rinkeby.etherscan.io/tx/0x2f409d2e186883bd3319a8291a345ddbc1c0090f0d2e182a32c9e54b5e3fdbd8</a></p><p>输入数据是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x60606040523415600e57600080fd5b6040516020806073833981016040528080519060200190919050508060008190555050603580603e6000396000f3006060604052600080fd00a165627a7a7230582062a4d50871818ee0922255f5848ba4c7e4edc9b13c555984b91e7447d3bb0e7400290000000000000000000000000000000000000000000000000000000000000042</span><br></pre></td></tr></table></figure></p><p>我们可以在最后面看到构造器的参数，也就是<code>66</code>，但是作为ABI编码的32位字节就是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0000000000000000000000000000000000000000000000000000000000000042</span><br></pre></td></tr></table></figure></p><p>为了处理构造器里面的参数，部署代码从<code>calldata</code>中的结尾拷贝ABI参数到内存中，然后从内存中拷贝到栈中。</p><h2 id="创建合约的合约"><a href="#创建合约的合约" class="headerlink" title="创建合约的合约"></a>创建合约的合约</h2><p><code>FooFactory</code>合约可以通过调用<code>makeNewFoo</code>来创建一个新的<code>Foo</code>实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br><span class="line">contract Foo &#123;</span><br><span class="line">&#125;</span><br><span class="line">contract FooFactory &#123;</span><br><span class="line">  address fooInstance;</span><br><span class="line">  function makeNewFoo() &#123;</span><br><span class="line">    fooInstance = new Foo();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个合约完整的汇编代码在<a href="https://gist.github.com/hayeah/a94aa4e87b7b42e9003adf64806c84e4">Gist</a>里。编译器输出的结构更加的复杂，因为这里有两套”安装时间“和”运行时间“的字节码。就像这样组织的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FooFactoryDeployCode</span><br><span class="line">FooFactoryContractCode</span><br><span class="line">  FooDeployCode</span><br><span class="line">  FooContractCode</span><br><span class="line">  FooAUXData</span><br><span class="line">FooFactoryAUXData</span><br></pre></td></tr></table></figure></p><p><code>FooFactoryContractCode</code>本质就是为<code>tag_8</code>中<code>Foo</code>拷贝字节码然后跳转回<code>tag_7</code>去执行<code>create</code>指令。</p><p><code>create</code>指令就像<code>eth_sendtransaction</code>RPC调用。它提供了一个在EVM里面创建新合约的方法。</p><p>看一下go-ethereum 源代码里面的<a href="https://sourcegraph.com/github.com/ethereum/go-ethereum@e9295163aa25479e817efee4aac23eaeb7554bba/-/blob/core/vm/instructions.go#L572:6">opCreate</a> 。这个指令调用<code>evm.Create</code>来创建合约：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res, addr, returnGas, suberr := evm.Create(contract, input, gas, value)</span><br></pre></td></tr></table></figure></p><p>我们在前面就已经看见了<code>evm.Create</code>，但是这次的调用者是一个智能合约而不是人类。</p><h2 id="AUXDATA"><a href="#AUXDATA" class="headerlink" title="AUXDATA"></a>AUXDATA</h2><p>如果你想要完全的理解auxdata是什么，那么可以阅读 <a href="https://github.com/ethereum/solidity/blob/8fbfd62d15ae83a757301db35621e95bccace97b/docs/metadata.rst#encoding-of-the-metadata-hash-in-the-bytecode">合约元数据</a>。它的要点就是<code>auxdata</code>是一个哈希值，你可以使用它来抓取部署合约的元数据。</p><p>auxdata的格式就是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0xa1 0x65 &apos;b&apos; &apos;z&apos; &apos;z&apos; &apos;r&apos; &apos;0&apos; 0x58 0x20 &lt;32 bytes swarm hash&gt; 0x00 0x29`</span><br></pre></td></tr></table></figure></p><p>解构我们之前看到过的auxdata字节序列：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a1 65</span><br><span class="line">// b z z r 0 (ASCII)</span><br><span class="line">62 7a 7a 72 30</span><br><span class="line">58 20</span><br><span class="line">// 32 bytes hash</span><br><span class="line">62a4d50871818ee0922255f5848ba4c7e4edc9b13c555984b91e7447d3bb0e74</span><br><span class="line">00 29</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>合约创建的方式和自我解压软件安装程序的工作方式比较类似。当安装程序运行时，它会配置系统环境，然后会从程序包中读取目标程序放入到系统中。</p><ul><li>在”安装时间“和”运行时间“之间有一个强制的分离。无法运行构造器两次</li><li>智能合约可以使用相同的处理来创建其他的智能合约</li><li>使用非Solidity语言实现会容易一点</li></ul><p>首先，我对”智能合约安装程序“的不同部分被打包到一起作为字节字符串<code>data</code>放在交易里感到很困惑：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;data&quot;: constructorCode + contractCode + auxdata + constructorData</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>data</code>是如何被编码的，阅读文档中的<code>eth_sendtransaction</code>无法获得明显的答案。我一直都没弄明白构造器的参数是如何传递给交易的，直到有一个朋友告诉我它们被ABI进行编码之后附加到字节码的后面，才明白是怎么回事。</p><p>另一个可以使它看起来更加清晰一点的替代设计也许就是将这些作为交易独立的属性进行发送：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // For &quot;install time&quot; bytecode</span><br><span class="line">  &quot;constructorCode&quot;: ...,</span><br><span class="line">  // For &quot;run time&quot; bytecode</span><br><span class="line">  &quot;constructorBody&quot;: ...,</span><br><span class="line">  // For encoding arguments</span><br><span class="line">  &quot;data&quot;: ...,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不过进行更多的思考，我认为交易对象简单化实际上是非常强大的。对于一个交易，<code>data</code>只是一个字节字符串，而且它不涉及数据是如何被解释的语言模型。通过让交易对象简单化，语言的实现者就有一个空白的画布进行设计和实验。</p><p>确实，<code>data</code>在未来甚至可以被一个不同的虚拟机进行解释。</p><p>翻译作者: <a href="https://lilymoana.github.io/">许莉</a><br>原文地址：<a href="https://medium.com/@hayeah/diving-into-the-ethereum-vm-part-5-the-smart-contract-creation-process-cb7b6133b855">Diving Into The Ethereum VM Part Five</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;strong&gt;  &lt;/strong&gt;  &lt;Excerpt in index | Homepage Digest&gt;&lt;/p&gt;
&lt;p&gt;深入了解以太坊虚拟机是一个系列的文章，本文是最后一篇，前部分的译文链接在本文结尾处&lt;/p&gt;
    
    </summary>
    
      <category term="translation" scheme="https://lilymoana.github.io/categories/translation/"/>
    
    
      <category term="blockchain" scheme="https://lilymoana.github.io/tags/blockchain/"/>
    
      <category term="ethereum" scheme="https://lilymoana.github.io/tags/ethereum/"/>
    
  </entry>
  
  <entry>
    <title>以太坊的工作原理</title>
    <link href="https://lilymoana.github.io/ethereum_theory.html"/>
    <id>https://lilymoana.github.io/ethereum_theory.html</id>
    <published>2017-09-28T04:09:05.000Z</published>
    <updated>2017-11-22T05:25:28.822Z</updated>
    
    <content type="html"><![CDATA[<p><strong>  </strong>  <Excerpt in index | Homepage Digest><br>这篇文章主要讲解以太坊的基本原理，对技术感兴趣的朋友可以看看。</p><a id="more"></a><The rest of contents | Rest of all><p>翻译作者: <a href="https://lilymoana.github.io/">许莉</a><br>原文地址：<a href="https://medium.com/@preethikasireddy/how-does-ethereum-work-anyway-22d1df506369">How does Ethereum work, anyway?</a> </p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>不管你们知不知道以太坊（Ethereum blockchain）是什么，但是你们大概都听说过以太坊。最近在新闻里出现过很多次，包括一些专业杂志的封面，但是如果你们对以太坊到底是什么没有一个基本的了解的话，看这些文章就会感觉跟看天书一样。 所以，什么是以太坊？本质上，就是一个保存数字交易永久记录的公共数据库。重要的是，这个数据库不需要任何中央权威机构来维持和保护它。相反的它以一个“无信任”的交易系统来运行—一个个体在不需要信任任何第三方或对方的情况下进行点对点交易的架构。</p><p>依然感到很困惑？这就是这篇文章存在的理由。我的目标是在技术层面来解释以太坊的工作原理，但是不会出现很复杂的数学问题或看起来很可怕的公式。即使你不是一个程序员，我希望你看完之后最起码对技术有个更好的认识。如果有些部分技术性太强不好理解，这是非常正常的，真的没有必要完全理解每一个小细节。我建议只要宏观的理解一下事物就行了。</p><p>这篇文章中的很多议点都是以太坊黄皮书中讨论过的概念的细分。我添加了我自己的解释和图表使理解以太坊更加简单一点。那些足够勇敢的人可以挑战一下技术，去阅读一下以太坊的黄皮书。</p><p>好了， 让我们开始吧！</p><h2 id="区块链定义"><a href="#区块链定义" class="headerlink" title="区块链定义"></a>区块链定义</h2><p>区块链就是一个<strong>具有共享状态的密码性安全交易的单机(cryptographically secure transactional singleton machine with shared-state)</strong>。[1]这有点长，是吧？让我们将它分开来看：</p><ul><li><strong>“密码性安全(Cryptographically secure)”</strong>是指用一个很难被解开的复杂数学机制算法来保证数字货币生产的安全性。将它想象成类似于防火墙的这种。它们使得欺骗系统近乎是一个不可能的事情（比如：构造一笔假的交易，消除一笔交易等等）。</li><li><strong>“交易的单机(Transactional singleton machine)”</strong>是指只有一个权威的机器实例为系统中产生的交易负责任。换句话说，只有一个全球真相是大家所相信的。</li><li><strong>“具有共享状态(With shared-state)”</strong>是指在这台机器上存储的状态是共享的，对每个人都是开放的。</li></ul><p>以太坊实现了区块链的这个范例。</p><h2 id="以太坊模型说明"><a href="#以太坊模型说明" class="headerlink" title="以太坊模型说明"></a>以太坊模型说明</h2><p>以太坊的本质就是一个<strong>基于交易的状态机(transaction-based state machine)</strong>。在计算机科学中，一个 <em>状态机</em> 是指可以读取一系列的输入，然后根据这些输入，会转换成一个新的状态出来的东西。<br><img src="/asset/eth_statemachine.png"   width = "800" height = "230" alt="" align=center /></p><p>根据以太坊的状态机，我们从<strong>创世纪状态(genesis state)</strong>开始。这差不多类似于一片空白的石板，在网络中还没有任何交易的产生状态。当交易被执行后，这个创世纪状态就会转变成最终状态。在任何时刻，这个最终状态都代表着以太坊当前的状态。<br><img src="/asset/eth_statetransition.png"   width = "800" height = "200" alt="" align=center /></p><p>以太坊的状态有百万个交易。这些交易都被“组团”到一个区块中。一个区块包含了一系列的交易，每个区块都与它的前一个区块链接起来。<br><img src="/asset/eth_chain.png"   width = "800" height = "200" alt="" align=center /></p><p>为了让一个状态转换成下一个状态，交易必须是有效的。<strong>为了让一个交易被认为是有效的，它必须要经过一个验证过程，此过程也就是挖矿</strong>。挖矿就是一组节点（即电脑）用它们的计算资源来创建一个包含有效交易的区块出来。</p><p>任何在网络上宣称自己是矿工的节点都可以尝试创建和验证区块。世界各地的很多矿工都在同一时间创建和验证区块。每个矿工在提交一个区块到区块链上的时候都会提供一个数学机制的“证明”，这个证明就像一个保证：如果这个证明存在，那么这个区块一定是有效的。</p><p>为了让一个区块添加到主链上，一个矿工必须要比其他矿工更快的提供出这个“证明”。通过矿工提供的一个数学机制的“证明”来证实每个区块的过程称之为<strong>工作量证明(proof of work)</strong>。</p><p>证实了一个新区块的矿工都会被奖励一定价值的奖赏。奖赏是什么？以太坊使用一种内在数字代币—<strong>以太币(Ether)</strong>作为奖赏。每次矿工证明了一个新区块，那么就会产生一个新的以太币并被奖励给矿工。</p><p>你也许会在想：什么能确保每个人都只在区块的同一条链上呢？我们怎么能确定不会存在一部分矿工创建一个他们自己的链呢？</p><p>前面，我们定义了区块链就是一个<strong>具有共享状态的交易单机</strong>。使用这个定义，我们可以知道正确的当前状态是一个全球真相，所有人都必须要接受它。拥有多个状态（或多个链）会摧毁这个系统，因为它在哪个是正确状态的问题上不可能得到统一结果。如果链分叉了，你有可能在一条链上拥有10个币，一条链上拥有20个币，另一条链上拥有40个币。在这种场景下，是没有办法确定哪个链才是最”有效的“。</p><p>不论什么时候只要多个路径产生了，一个”分叉“就会出现。我们通常都想避免分叉，因为它们会破坏系统，强制人们去选择哪条链是他们相信的链。<br><img src="/asset/eth_fork.png"   width = "1000" height = "300" alt="" align=center /></p><p>为了确定哪个路径才是最有效的以及防止多条链的产生，以太坊使用了一个叫做<strong>“GHOST协议(GHOST protocol)”</strong>的数学机制。</p><blockquote><p> <strong> GHOST</strong>  = <strong>Greedy Heaviest Observed Subtree</strong></p></blockquote><p>简单来说，GHOST协议就是让我们必须选择一个在其上完成计算最多的路径。一个方法确定路径就是使用最近一个区块（叶子区块）的区块号，区块号代表着当前路径上总的区块数（不包含创世纪区块）。区块号越大，路径就会越长，就说明越多的挖矿算力被消耗在此路径上以达到叶子区块。使用这种推理就可以允许我们赞同当前状态的权威版本。<br><img src="/asset/eth_canonical.png"   width = "1000" height = "300" alt="" align=center /></p><p>现在你大概对区块链是什么有个理性的认识，让我们在再深入地了解一下以太坊系统主要组成部分：</p><ul><li>账户(accounts)</li><li>状态(state)</li><li>损耗和费用(gas and fees)</li><li>交易(transactions)</li><li>区块(blocks)</li><li>交易执行(transaction execution)</li><li>挖矿(mining)</li><li>工作量证明(proof of work)</li></ul><p>在开始之前需要注意的是：每当我说某某的Hash， 我指的都是<a href="https://ethereum.stackexchange.com/questions/550/which-cryptographic-hash-function-does-ethereum-use">KECCAK-256</a> hash, 以太坊就是使用这个Hash算法。</p><h2 id="账户"><a href="#账户" class="headerlink" title="账户"></a>账户</h2><p>以太坊的全局“共享状态”是有很多小对象（账户）来组成的，这些账户可以通过消息传递来与对方进行交互。每个账户都有一个与之关联的<strong>状态(state)</strong>和一个20字节的<strong>地址(address)</strong>。在以太坊中一个地址是160位的标识符，用来识别账户。</p><p>两种不同类型的账户：</p><ul><li>外部拥有的账户，被私钥控制且没有任何代码与之关联</li><li>合约账户，被它们的合约代码控制且有代码与之关联<br><img src="/asset/eth_account.png"   width = "" height = "300" alt="" align=center /></li></ul><h3 id="外部拥有账户与合约账户的比较"><a href="#外部拥有账户与合约账户的比较" class="headerlink" title="外部拥有账户与合约账户的比较"></a>外部拥有账户与合约账户的比较</h3><p>理解外部拥有账户和合约账户的基本区别是很重要的。一个外部拥有账户可以通过创建和用自己的私钥来对交易进行签名，来发送消息给另一个外部拥有账户或合约账户。在两个外部拥有账户之间传送的消息只是一个简单的价值转移。但是从外部拥有账户到合约账户的消息会激活合约账户的代码，允许它执行各种动作。（比如转移代币，写入内部存储，挖出一个新代币，执行一些运算，创建一个新的合约等等）。</p><p>不像外部拥有账户，合约账户不可以自己发起一个交易。相反，合约账户只有在接收到一个交易之后(从一个外部拥有账户或另一个合约账户处)，为了响应此交易而触发一个交易。我们将会在“交易和消息”章节来了解关于合约与合约之间的通信。<br><img src="/asset/eth_transationset.png"   width = "800" height = "300" alt="" align=center /></p><p><strong>因此，在以太坊上任何的动作，总是被外部拥有账户触发的交易所发动的。</strong><br><img src="/asset/eth_blockchain.png"   width = "800" height = "300" alt="" align=center /></p><h3 id="账户状态"><a href="#账户状态" class="headerlink" title="账户状态"></a>账户状态</h3><p>账户状态有四个组成部分，不论账户类型是什么，都存在这四个组成部分：</p><ul><li>nonce：如果账户是一个外部拥有账户，nonce代表从此账户地址发送的交易序号。如果账户是一个合约账户，nonce代表此账户创建的合约序号</li><li>balance： 此地址拥有Wei的数量。1Ether=10^18Wei</li><li>storageRoot： Merkle Patricia树的根节点Hash值（我们后面在解释Merkle树）。Merkle树会将此账户存储内容的Hash值进行编码，默认是空值</li><li>codeHash：此账户EVM（以太坊虚拟机，后面细说）代码的hash值。对于合约账户，就是被Hash的代码并作为codeHash保存。对于外部拥有账户，codeHash域是一个空字符串的Hash值<br><img src="/asset/eth_codehash.png"   width = "800" height = "300" alt="" align=center /></li></ul><h3 id="世界状态"><a href="#世界状态" class="headerlink" title="世界状态"></a>世界状态</h3><p>好了，我们知道了以太坊的全局状态就是由账户地址和账户状态组成的一个映射。这个映射被保存在一个叫做Merkle Patricia树的数据结构中</p><p>Merkle Tree（也被叫做Merkle trie）是一种由一系列节点组成的二叉树，这些节点包括：</p><ul><li>在树底的大量叶子节点，这些叶子节点包含了源数据</li><li>一系列的中间节点，这些节点是两个子节点的Hash值</li><li>一个根节点，同样是两个子节点的Hash值，代表着整棵树<br><img src="/asset/eth_merkletree.png"   width = "600" height = "300" alt="" align=center /></li></ul><p>树底的数据是通过分开我们想要保存到<strong>chunks</strong>的数据产生的，然后将<strong>chunks</strong>分成<strong>buckets</strong>，再然后获取每个<strong>bucket</strong>的hash值并一直重复直到最后只剩下一个Hash：根Hash。<br><img src="/asset/eth_roothash.png"   width = "600" height = "300" alt="" align=center /></p><p>这棵树要求存在里面的值（value）都有一个对应的key。从树的根节点开始，key会告诉你顺着哪个子节点可以获得对应的值，这个值存在叶子节点。在以太坊中，key/value是地址和与地址相关联的账户之间状态的映射，包括每个账户的balance, nonce, codeHash和storageRoot（storageRoot自己就是一颗树）。<br><img src="/asset/eth_nonce.png"   width = "600" height = "300" alt="" align=center /></p><p>同样的树结构也用来存储交易和收据。更具体的说，每个块都有一个<strong>头(header)</strong>，头中保存了三个Merkle树结构的根节点Hash，三个Merkle树分别为：</p><ul><li>状态树</li><li>交易树</li><li>收据树<br><img src="/asset/eth_blockheader.png"   width = "600" height = "300" alt="" align=center /></li></ul><p>Merkle树中存储信息的高效性在以太坊的“轻客户端”和“轻节点”中相当的有用。记住区块链就是一群节点来维持的。广泛的说，有两种节点类型：全节点和轻节点。</p><p>全节点通过下载整条链来进行同步，从创世纪块到当前块，执行其中包含的所有交易。通常，矿工会存储全节点，因为他们在挖矿过程中需要全节点。也有可能下载一个全节点而不用执行所有的交易。无论如何，一个全节点包含了整个链。</p><p>不过除非一个节点需要执行所有的交易或轻松访问历史数据，不然没必要保存整条链。这就是轻节点概念的来源。<strong>比起下载和存储整个链以及执行其中所有的交易，轻节点仅仅下载链的头，从创世纪块到当前块的头，不执行任何的交易或检索任何相关联的状态</strong>。由于轻节点可以访问区块头，而头中包含了3个Merkle树的根Hash值，所有轻节点依然可以很容易生成和接收关于交易、事件、余额等可验证的答案。</p><p>这个可以行的通是因为在Merkle树中Hash值是向上传播的—如果一个恶意用户试图用一个假交易来交换Merkle树底的交易，这个会改变它上面节点的Hash值，而它上面节点的值的改变也会导致上上一个节点Hash值的改变，以此类推，一直到树的根节点。<br><img src="/asset/eth_hashchange.png"   width = "600" height = "300" alt="" align=center /></p><p>任何节点想要验证一些数据都可以通过<strong>Merkle证明</strong>来进行验证，<strong>Merkle 证明</strong>的组成：</p><ul><li>一块需要验证的数据</li><li>树的根节点Hash值</li><li>一个“分支”（从 <strong>chunk</strong>到根这个路径上所有的Hash值）<br><img src="/asset/eth_chunk.png"   width = "600" height = "300" alt="" align=center /></li></ul><p>任何可以读取证明的人都可以验证分支的Hash值是连贯的，因此给出的块在树中实际的位置就是在此处。</p><p><strong>总之，使用Merkle Patricia树的好处就是该结构的根节点加密取决于存储在树中的数据，而且根节点的Hash值还可以作为该数据的安全标识。由于块的头包含了状态树、交易树、收据树的根Hash值，所以任何节点都可以验证以太坊的一小部分状态而不用保存整个状态，这整个状态的的大小可能是非常大的。</strong></p><h2 id="Gas和费用"><a href="#Gas和费用" class="headerlink" title="Gas和费用"></a>Gas和费用</h2><p>在以太坊中一个比较重要的概念就是<strong>费用(fees)</strong>，<strong>由以太坊网络上的交易而产生的每一次计算，都会产生费用—没有免费的午餐</strong>。这个费用是以”gas”来支付。</p><p>Gas就是用来衡量在一个具体计算中要求的费用单位。gas price就是你愿意在每个gas上花费Ether的数量，以“gwei”进行衡量。“Wei”是Ether的最小单位，1Ether=10^18Wei，1gwei=1,000,000,000 Wei。</p><p>对每个交易，发送者设置gas limit和gas price。gas limit和gas price就代表着发送者愿意为执行交易支付的Wei的最大值。</p><p>例如，假设发送者设置gas limit为50,000，gas price为20gwei。这就表示发送者愿意最多支付50,000*20gwei = 1,000,000,000,000,000 Wei = 0.001 Ether来执行此交易。<br><img src="/asset/eth_price.png" alt=""> </p><p>记住gas limit代表用户愿意花费在gas上费用的最大值。如果在他们的账户余额中有足够的Ether来支付这个最大值费用，那么就没问题。在交易结束时任何未使用的gas都会被返回给发送者，以原始费率兑换。<br><img src="/asset/eth_gas.png" alt=""> </p><p>在发送者没有提供足够的gas来执行交易，那么交易执行就会出现“gas不足”然后被认为是无效的。在这种情况下，交易处理就会被终止以及所有已改变的状态将会被恢复，最后我们就又回到了交易之前的状态—完完全全的之前状态就像这笔交易从来没有发生。因为机器在耗尽gas之前还是为计算做出了努力，<br>所以理论上，<strong>将不会有任何的gas被返回给发送者</strong>。<br><img src="/asset/eth_refunder.png" alt=""> </p><p>这些gas的钱到底去了哪里？<strong>发送者在gas上花费的所有费用都被发送到“受益人”的地址，通常情况下就是矿工的地址</strong>。因为矿工为了计算和验证交易做出了努力，所以矿工接收gas的费用作为奖励。<br><img src="/asset/eth_reward.png"   width = "800" height = "250" alt="" align=center /></p><p>通常，发送者愿意支付更高的gas price，矿工从这笔交易中就能获得更多的价值。因此，矿工也就更加愿意选择这笔交易。这样的话，矿工可以自由的选择自己愿意验证或忽略的交易。为了引导发送者设置合理的gas price，矿工可以选择建议一个最小的gas值，此值代表自己愿意执行交易的最低价格。</p><h3 id="存储也有费用"><a href="#存储也有费用" class="headerlink" title="存储也有费用"></a>存储也有费用</h3><p>Gas不仅仅是用来支付计算这一步的费用，而且也用来支付存储的费用。存储的总费用与所使用的32位字节的最小倍数成比例。</p><p>存储费用有一些比较细微的方面。比如，由于增加的存储增加了所有节点上的以太坊状态数据库的大小，所以激励保持数据存储量小。为了这个原因，如果一个交易的执行有一步是清除一个存储实体，那么为执行这个操作的费用就会被放弃，并且由于释放存储空间的退款就会被返回给发送者。</p><h3 id="费用的作用是什么？"><a href="#费用的作用是什么？" class="headerlink" title="费用的作用是什么？"></a>费用的作用是什么？</h3><p>以太坊可以运作的一个重要方面就是每个网络执行的操作同时也被全节点所影响。然而，计算的操作在以太坊虚拟机上是非常昂贵的。因此，以太坊智能合约最好是用来执行最简单的任务，比如运行一个简单的业务逻辑或者验证签名和其他密码对象，而不是用于复杂的操作，比如文件存储，电子邮件，或机器学习，这些会给网络造成压力。<strong>施加费用防止用户使网络超负荷</strong>。</p><p>以太坊是一个图灵完备语言（短而言之，图灵机器就是一个可以模拟任何电脑算法的机器。对于图灵机器不太熟悉的人可以看看<a href="https://en.wikipedia.org/wiki/Turing_machine">这个</a> 和<a href="http://mathworld.wolfram.com/TuringMachine.html">这个</a> ）。这就允许有循环，并使以太坊受到<a href="https://en.wikipedia.org/wiki/Halting_problem">停机问题</a> 的影响，这个问题让你无法确定程序是否无限制的运行。如果没有费用的话，恶意的执行者通过执行一个包含无限循环的交易就可以很容易的让网络瘫痪而不会产生任何反响。因此，费用保护网络不受蓄意攻击。</p><p>你也许会想，“为什么我们还需要为存储付费？”其实就像计算一样，以太坊网络上的存储是整个网络都必须要负担的成本。</p><h2 id="交易和消息"><a href="#交易和消息" class="headerlink" title="交易和消息"></a>交易和消息</h2><p>之前说过以太坊是一个基于交易的状态机。换句话说，在两个不同账户之间发生的交易才让以太坊的全局状态从一个状态转换成另一个状态。</p><p><strong>最基本的概念，一个交易就是指被外部拥有账户生成的加密签名的一段指令，序列化之后提交给区块链。</strong></p><p>有两种类型的交易：<strong>消息通信(message calls)</strong>和<strong>合约创建(contract creations)(也就是交易产生一个新的以太坊合约)</strong>。</p><p>不管什么类型的交易，都包含：</p><ul><li>nonce：发送者发送交易数的计数</li><li>gasPrice：发送者愿意支付执行交易所需的每个gas的Wei数量</li><li>gasLimit：发送者愿意为执行交易支付gas数量的最大值。此值设置之后在任何计算完成之前就会被提前扣掉</li><li>to：接收者的地址。在合约创建交易中，合约账户的地址还没有存在，所以值先空着</li><li>value：从发送者转移到接收者Wei的数量。在合约创建交易中，value作为新建合约账户的开始余额</li><li>v,r,s：用于产生标识交易发送者的签名</li><li>init（只有在合约创建交易中存在）：用来初始化新合约账户的EVM代码片段。<strong>init</strong>值会执行一次，然后就会被丢弃。当<strong>init</strong>第一次执行的时候，它返回一个账户代码体，也就是永久与合约账户关联的一段代码。</li><li>data（可选域，只有在<strong>消息通信</strong>中存在）：消息通信中的输入数据(也就是参数)。例如，如果智能合约就是一个域名注册服务，那么调用合约可能就会期待输入参数：域名和IP地址<br><img src="/asset/eth_transationmessage.png"   width = "500" height = "300" alt="" align=center /></li></ul><p>在“账户”这个章节中我们学到交易—<strong>消息通信</strong>和合约创建交易两者都总是被外部拥有账户触发并提交到区块链的。换种思维思考就是，交易是外部世界和以太坊内部状态的桥梁。<br><img src="/asset/eth_ bridge.png"   width = "800" height = "300" alt="" align=center /></p><p>但是这也并不代表一个合约与另一个合约无法通信。<strong>在以太坊状态全局范围内的合约可以与在相同范围内的合约进行通信。他们是通过“消息”或者“内部交易”进行通信的</strong>。我们可以认为消息或内部交易类似于交易，不过与交易有着最大的不同点—它们不是由外部拥有账户产生的。相反，他们是被合约产生的。它们是虚拟对象，与交易不同，没有被序列化而且只存在于以太坊执行环境。</p><p><strong>当一个合约发送一个内部交易给另一个合约，存在于接收者合约账户相关联的代码就会被执行。</strong><br><img src="/asset/eth_excuted.png" alt=""> </p><p>一个需要注意的重要事情是内部交易或者消息不包含<strong>gasLimit</strong>。因为gas limit是由原始交易的外部创建者决定的（也就是外部拥有账户）。外部拥有账户设置的gas limit必须要高到足够将交易完成，包括由于此交易而产生的任何”子执行”，例如合约到合约的消息。如果，在一个交易或者信息链中，其中一个消息执行造成gas不足，那么这个消息的执行会被还原，包括任何被此执行触发的子消息。不过，父执行没必要被还原。</p><h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><p>所有的交易都被组成一个”块”。一个区块链包含了一系列这样链在一起的区块。</p><p>在以太坊中，一个区块包含：</p><ul><li><strong>区块头</strong></li><li>关于包含在此区块中<strong>交易集</strong>的信息</li><li>与当前块的ommers相关的一系列其他区块头</li></ul><h3 id="Ommers解释"><a href="#Ommers解释" class="headerlink" title="Ommers解释"></a>Ommers解释</h3><p>“ommer”到底是什么？ ommer就是一个区块的父区块与当前区块父区块的父区块是相同的。让我们快速了解一下ommers是用来干嘛的，并且为什么一个区块需要为ommers包含区块头。</p><p>由于以太坊的构造，它的区块生产时间（大概15秒左右）比其他的区块链例如Bitcoin（大概10分钟左右）要快很多。这使得交易的处理更快。但是，更短的区块生产时间的一个缺点就是：更多的竞争区块会被矿工发现。这些竞争区块同样也被称为“孤区块”（也就是被挖出来但是不会被添加到主链上的区块）。</p><p>Ommers的目的就是为了帮助奖励矿工纳入这些孤区块。矿工包含的ommers必须是有效的，也就是ommers必须是往上数6代之内或更小范围内父区块的子区块。  一个孤区块在第6个子区块之后，这种陈旧的孤区块将不会再被引用（因为包含老旧的交易会使事情变得复杂一点）。</p><p>Ommer区块会收到比全区块少一点的奖励。不管怎样，依然存在激励来让矿工们纳入孤区块并能从中获得一些报酬。</p><h3 id="区块头"><a href="#区块头" class="headerlink" title="区块头"></a>区块头</h3><p>让我们再回到区块的问题上。我们前面提到每个区块都有一个“区块头”，但这究竟是什么？</p><p>区块头是区块的一部分，包含了：</p><ul><li>parentHash：父区块头的Hash值（这也是使得区块变成区块链的原因）</li><li>ommerHash：当前区块ommers列表的Hash值</li><li>beneficiary：接收挖此区块费用的账户地址</li><li>stateRoot：状态树根节点的Hash值（回忆一下我们之前所说的保存在头中的状态树以及它使得轻客户端认证任何关于状态的事情都变得非常简单）</li><li>transactionsRoot：包含此区块所有交易的Merkle树的根节点Hash值</li><li>receiptsRoot：包含此区块所有交易收据的Merkle树的根节点Hash值</li><li>logsBloom：由日志信息组成的一个<a href="https://en.wikipedia.org/wiki/Bloom_filter">Bloom过滤器</a> (一种数据结构)</li><li>difficulty： 此区块的难度级别</li><li>number：当前区块的计数（创世纪块的区块序号为0，对于每个后续区块，区块序号都增加1）</li><li>gasLimit：每个区块的当前gas limit</li><li>gasUsed： 此区块中交易所用的总gas量</li><li>timestamp：此区块成立时的unix的时间戳</li><li>extraData：与此区块相关的附加数据</li><li>mixHash：一个Hash值，当与nonce组合时，证明此区块已经执行了足够的计算</li><li>nonce：一个Hash值，当与mixHash组合时，证明此区块已经执行了足够的计算<br><img src="/asset/eth_blockheaders.png"   width = "800" height = "300" alt="" align=center /></li></ul><p>注意每个区块是如何包含三个树结构的，三个树结构分别对应：</p><ul><li>状态（stateRoot）</li><li>交易（transactionsRoot）</li><li>收据（receiptsRoot）<br>这三个树结构就是我们前面讨论的Merkle Patricia树。</li></ul><p>另外，上面描述的有几个术语值得说明一下，下面来看一下。</p><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p>以太坊允许日志可以跟踪各种交易和信息。一个合约可以通过定义“事件”来显示的生成日志。</p><p>一个日志的实体包含：</p><ul><li>记录器的账户地址</li><li>代表本次交易执行的各种事件的一系列主题以及与这些事件相关的任何数据</li></ul><p>日志被保存在<a href="https://en.wikipedia.org/wiki/Bloom_filter">bloom过滤器</a> 中，过滤器高效的保存了无尽的日志数据。</p><h3 id="交易收据"><a href="#交易收据" class="headerlink" title="交易收据"></a>交易收据</h3><p>包含着日志信息的交易收据的根Hash值保存在头中。 就像你在商店买东西时收到的收据一样，以太坊为每笔交易都产生一个收据。像你期望的那样，每个收据包含关于交易的特定信息，这些信息为：</p><ul><li>区块序号</li><li>区块Hash值</li><li>交易Hash值</li><li>当前交易使用了的gas</li><li>在当前交易执行完之后当前块使用的累计gas</li><li>执行当前交易时创建的日志</li><li>等等</li></ul><h3 id="区块难度"><a href="#区块难度" class="headerlink" title="区块难度"></a>区块难度</h3><p>区块的难度是被用来在验证区块时加强一致性。创世纪区块的难度是131,072，有一个特殊的公式用来计算之后的每个块的难度。如果某个区块比前一个区块验证的更快，以太坊协议就会增加区块的难度。</p><p>区块的难度影响<strong>nonce</strong>，它是在挖矿时必须要使用工作量证明算法计算出的一个Hash值。</p><p>区块<strong>难度</strong>和<strong>nonce</strong>之间的关系用数学形式表达就是：<br><img src="/asset/eth_math.png" alt=""><br><strong>Hd</strong>代表的是难度。</p><p>找到符合难度阈值的<strong>nonce</strong>唯一方法就是使用工作量证明算法来列举所有的可能性。找到解决方案预期时间与难度成正比—难度越高，找到<strong>nonce</strong>就越困难，因此验证一个区块也就越难，这又相应地增加了验证新块所需的时间。<strong>所以，通过调整区块难度，协议可以调整验证区块所需的时间</strong>。</p><p>另一方面，如果验证时间变的越来越慢，协议就会降低难度。这样的话，验证时间自我调节以保持恒定的速率—平均每15s一个块。</p><h2 id="交易执行"><a href="#交易执行" class="headerlink" title="交易执行"></a>交易执行</h2><p>我们已经到了以太坊协议最复杂的部分：交易的执行。假设你发送了一笔交易给以太坊网络处理，将以太坊状态转换成包含你的交易这个过程到底发生了什么？<br><img src="/asset/eth_transition.png"   width = "800" height = "300" alt="" align=center /></p><p>首先，为了可以被执行所有的交易必须都要符合最基础的一系列要求，包括：</p><ul><li>交易必须是正确格式化的RLP。”RLP”代表Recursive Length Prefix，它是一种数据格式，用来编码二进制数据嵌套数组。以太坊就是使用RLP格式序列化对象。</li><li>有效的交易签名。</li><li>有效的交易序号。回忆一下账户中的nonce就是从此账户发送出去交易的计数。如果有效，那么交易序号一定等于发送账户中的nonce。</li><li>交易的gas limit 一定要等于或者大于交易使用的<strong>intrinsic gas</strong>，<strong>intrinsic gas</strong>包括：<br>&nbsp;&nbsp;&nbsp;1.执行交易预订费用为21,000gas<br>&nbsp;&nbsp;&nbsp;2.随交易发送的数据的gas费用（每字节数据或代码为0的费用为4gas，每个非零字节的数据或代码费用为68gas）<br>&nbsp;&nbsp;&nbsp;3.如果是合约创建交易，还需要额外的32,000gas<br><img src="/asset/eth_ intrinsicgas.png" alt=""> </li><li>发送账户余额必须有足够的Ether来支付”前期”gas费用。前期gas费用的计算比较简单：首先，交易的gas limit乘以交易的gas价格得到最大的gas费用。然后，这个最大的gas费用加上从发送方传送给接收方的总值。<br><img src="/asset/eth_upfront.png" alt=""> </li></ul><p>如果交易符合上面的所有要求，那么我们进行下面的步骤。</p><p>第一步，我们从发送者的余额中扣除执行的前期费用，并为当前交易将发送者账户中的nonce增加1。此时，我们可以计算剩余的gas，将交易的总gas减去使用的<strong>intrinsic gas</strong>。<br><img src="/asset/eth_gasremaining.png" alt=""> </p><p>第二步，开始执行交易。在交易执行的整个过程中，以太坊保持跟踪“子状态”。子状态是记录在交易中生成的信息的一种方式，当交易完成时会立即需要这些信息。具体来说，它包含：</p><ul><li>自毁集：在交易完成之后会被丢弃的账户集（如果存在的话）</li><li>日志系列：虚拟机的代码执行的归档和可检索的检查点</li><li>退款余额：交易完成之后需要退还给发送账户的总额。回忆一下我们之前提到的以太坊中的存储需要付费，发送者要是清理了内存就会有退款。以太坊使用退款计数进行跟踪退款余额。退款计数从0开始并且每当合约删除了一些存储中的东西都会进行增加。</li></ul><p>第三步，交易所需的各种计算开始被处理。</p><p>当交易所需的步骤全部处理完成，并假设没有无效状态，通过确定退还给发送者的未使用的gas量，最终的状态也被确定。除了未使用的gas，发送者还会得到上面所说的“退款余额”中退还的一些津贴。</p><p>一旦发送者得到退款之后：</p><ul><li>gas的Ether就会给矿工</li><li>交易使用的gas会被添加到区块的gas计数中（计数一直记录当前区块中所有交易使用的gas总量，这对于验证区块时是非常有用的）</li><li>所有在<strong>自毁集</strong>中的账户（如果存在的话）都会被删除</li></ul><p>最后，我们就有了一个新的状态以及交易创建的一系列日志。</p><p>现在我们已经介绍了交易执行的基本知识，让我们再看看合约创建交易和消息通信的一些区别。</p><h3 id="合约创建-Contract-creation"><a href="#合约创建-Contract-creation" class="headerlink" title="合约创建(Contract creation)"></a>合约创建(Contract creation)</h3><p>回忆一下在以太坊中，有两种账户类型：合约账户和外部拥有账户。当我们说一个交易是“合约创建”，是指交易的目的是创建一个新的合约账户。</p><p>为了创建一个新的合约账户，我们使用一个特殊的公式来声明新账户的地址。然后我们使用下面的方法来初始化一个账户：</p><ul><li>设置nonce为0</li><li>如果发送者通过交易发送了一定量的Ether作为<strong>value</strong>，那么设置账户的余额为<strong>value</strong></li><li>将存储设置为0</li><li>设置合约的<strong>codeHash</strong>为一个空字符串的Hash值</li></ul><p>一旦我们完成了账户的初始化，使用交易发送过来的<strong>init code</strong>（查看”交易和消息”章节来复习一下<strong>init code</strong>），实际上就创造了一个账户。<strong>init code</strong>的执行过程是各种各样的。取决于合约的构造器，可能是更新账户的存储，也可能是创建另一个合约账户，或者发起另一个消息通信等等。</p><p>当初始化合约的代码被执行之后，会使用gas。<strong>交易不允许使用的gas超过剩余gas。如果它使用的gas超过剩余gas，那么就会发生gas不足异常(OOG)并退出。如果一个交易由于gas不足异常而退出，那么状态会立刻恢复到交易前的一个点。发送者也不会获得在gas用完之前所花费的gas</strong>。</p><p>不过，如果发送者随着交易发送了Ether，即使合约创建失败Ether也会被退回来。</p><p>如果初始化代码成功的执行完成，最后合约创建的花费会被支付。这些是存储成本，与创建的合约代码大小成正比（再一次，没有免费的午餐）。如果没有足够的剩余gas来支付最后的花费，那么交易就会再次宣布gas不足异常并中断退出。</p><p>如果所有的都正常进行没有任何异常出现，那么任何剩余的未使用gas都会被退回给原始的交易发送者，现在改变的状态才被允许永久保存。</p><h3 id="消息通信-Message-calls"><a href="#消息通信-Message-calls" class="headerlink" title="消息通信(Message calls)"></a>消息通信(Message calls)</h3><p>消息通信的执行与合约创建比较类似，只不过有一点点区别。</p><p>由于没有新账户被创建，所以消息通信的执行不包含任何的<strong>init code</strong>。不过，它可以包含输入数据，如果交易发送者提供了此数据的话。一旦执行，消息通信同样会有一个额外的组件来包含输出数据，如果后续执行需要此数据的话组件就会被使用。</p><p>就像合约创建一样，如果消息通信执行退出是因为gas不足或交易无效（例如栈溢出，无效跳转目的地或无效指令），那么已使用的gas是不会被退回给原始触发者的。相反，所有剩余的未使用gas也会被消耗掉，并且状态会被立刻重置为余额转移之前的那个点。</p><p>没有任何方法停止或恢复交易的执行而不让系统消耗你提供的所有gas，直到最新的以太坊更新。例如，假设你编写了一个合约，当调用者没有授权来执行这些交易的时候抛出一个错误。在以太坊的前一个版本中，剩余的gas也会被消耗掉，并且没有任何gas退回给发送者。<strong>但是拜占庭更新包括了一个新的“恢复”代码，允许合约停止执行并且恢复改变的状态而不消耗剩余的gas，此代码还拥有返回交易失败原因的能力</strong>。如果一个交易是由于恢复而退出，那么未使用的gas就会被退回给发送者。</p><h2 id="执行模式"><a href="#执行模式" class="headerlink" title="执行模式"></a>执行模式</h2><p>到目前为止，我们了解了从开始到结束交易的执行必须经历的一系列步骤。现在，我们来看看交易究竟是如何在虚拟机(VM)中执行的。</p><p><strong>协议实际操作交易处理的部分是以太坊自己的虚拟机，称之为以太坊虚拟机(EVM)</strong>。</p><p>像之前定义的那样，EVM是图灵完备虚拟机器。EVM存在而典型图灵完备机器不存在的唯一限制就是EVM本质上是被gas束缚。因此，可以完成的计算总量本质上是被提供的gas总量限制的。<br><img src="/asset/eth_evm.png" alt=""> </p><p>此外，EVM具有基于堆栈的架构。<a href="https://en.wikipedia.org/wiki/Stack_machine">堆栈机器</a> 就是使用后进先出来保存临时值的计算机。</p><p>EVM中每个堆栈项的大小为256位，堆栈有一个最大的大小，为1024位。</p><p>EVM有内存，各项按照可寻址字节数组来存储。内存是易失性的，也就是数据是不持久的。</p><p>EVM也有一个存储器。不像内存，存储器是非易失性的，并作为系统状态的一部分进行维护。EVM分开保存程序代码，在虚拟<a href="https://en.wikipedia.org/wiki/Read-only_memory">ROM</a> 中只能通过特殊指令来访问。这样的话，EVM就与典型的<a href="https://en.wikipedia.org/wiki/Von_Neumann_architecture">冯·诺依曼架构</a> 不同，此架构将程序的代码存储在内存或存储器中。<br><img src="/asset/eth_evmstorage.png"   width = "800" height = "300" alt="" align=center /></p><p>EVM同样有属于它自己的语言：“EVM字节码”，当一个程序员比如你或我写一个在以太坊上运行的智能合约时，我们通常都是用高级语言例如Solidity来编写代码。然后我们可以将它编译成EVM可以理解的EVM字节码。</p><p>好了，现在来说执行。</p><p>在执行特定的计算之前，处理器会确定下面所说的信息是否有效和是否可获取：</p><ul><li>系统状态</li><li>用于计算的剩余gas</li><li>拥有执行代码的账户地址</li><li>原始触发此次执行的交易发送者的地址</li><li>触发代码执行的账户地址（可能与原始发送者不同）</li><li>触发此次执行的交易gas price</li><li>此次执行的输入数据</li><li><strong>Value</strong>(单位为Wei)作为当前执行的一部分传递给该账户</li><li>待执行的机器码</li><li>当前区块的区块头</li><li>当前消息通信或合约创建堆栈的深度</li></ul><p>执行刚开始时，内存和堆栈都是空的，程序计数器为0。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PC: 0 STACK: [] MEM: [], STORAGE: &#123;&#125;</span><br></pre></td></tr></table></figure></p><p>然后EVM开始递归的执行交易，为每个循环计算<strong>系统状态</strong>和<strong>机器状态</strong>。系统状态也就是以太坊的全局状态(global state)。机器状态包含：</p><ul><li>可获取的gas</li><li>程序计数器</li><li>内存的内容</li><li>内存中字的活跃数</li><li>堆栈的内容</li></ul><p>堆栈中的项从系列的最左边被删除或者添加。</p><p>每个循环，剩余的gas都会被减少相应的量，程序计数器也会增加。<br>在每个循环的结束，都有三种可能性：</p><ul><li>机器到达异常状态（例如 gas不足，无效指令，堆栈项不足，堆栈项会溢出1024，无效的JUMP/JUMPI目的地等等）因此停止，并丢弃所有更改</li><li>进入后续处理下一个循环</li><li>机器到达了受控停止（到达执行过程的终点）</li></ul><p>假设执行没有遇到异常状态，达到一个“可控的”或正常的停止，机器就会产生一个合成状态，执行之后的剩余gas、产生的子状态、以及组合输出。</p><p>呼。我们终于过了一遍以太坊最难的部分了。如果你不能完全理解这个部分，也没关系。除非你在研究非常深层次的东西，否则你真的没有必要去理解交易执行的每个细节。</p><h3 id="一个块是如何完成的？"><a href="#一个块是如何完成的？" class="headerlink" title="一个块是如何完成的？"></a>一个块是如何完成的？</h3><p>最后，让我们看看一个包含许多交易的块是如何完成的。</p><p>当我们说“完成”，取决于此块是新的还是已存在的，可以指两个不同的事情。如果是个新块，就是指挖这个块所需的处理。如果是已存在的块，就是指验证此块的处理。不论哪种情况，一个块的“完成”都有4个要求：<br>1）验证（或者，如果是挖矿的话，就是确定）ommers<br>在区块头中的每个ommer都必须是有效的并且必须在当前块往上6代之内</p><p>2）验证（或者，如果是挖矿的话，就是确定）交易<br>区块中的<strong>gasUsed</strong>数量必须与区块中所列交易使用的累积gas量相等。（回忆一下，当执行一个交易的时候，我们会跟踪区块的gas计数器，也就跟踪了区块中所有交易使用的gas总数量）</p><p>3）申请奖励（只有挖矿时）<br>受益人的地址会因为挖矿而获得5Ether（在以太坊<a href="https://github.com/ethereum/EIPs/pull/669">EIP-649</a> 提案中，5ETH很快将会被减少为3ETH）。另外，对于每个ommer，当前块的受益人会获得额外的1/32当前块奖励金的奖励。最近，每个ommer区块的受益人能够得到一定量的奖励（有个特殊公式可以进行计算）。</p><p>4）校验（或者，如果是挖矿的话，就是计算一个有效的）状态和nonce<br>确保所有的交易和改变的结果状态都被应用了，然后在区块奖励被应用于最终交易结果状态之后定义一个新块为状态。通过检查最终状态与存储在头中的状态树来进行验证。</p><h2 id="工作量证明挖矿"><a href="#工作量证明挖矿" class="headerlink" title="工作量证明挖矿"></a>工作量证明挖矿</h2><p>在“区块”这个章节简短的说明了一下区块难度这个概念。给予区块难度意义的算法叫做工作量证明（PoW）。</p><p>以太坊的工作量证明算法称之为<a href="https://github.com/ethereum/wiki/wiki/Ethash">“Ethash”</a> （之前叫做Dagger-Hashimoto）。<br>算法正式定义为：<br><img src="/asset/eth_algorithm.png" alt=""><br><strong>m</strong>代表的是<strong>mixHash</strong>，<strong>n</strong>代表的是<strong>nonce</strong>，<strong>Hn</strong>代表的是新区块的头（不包含需要计算的<strong>nonce</strong>和<strong>mixHash</strong>），<strong>Hn</strong>是区块头的nonce，<strong>d</strong>是<a href="https://en.wikipedia.org/wiki/Directed_acyclic_graph">DAG</a> ，就是一个大数据集。</p><p>在”区块”章节，我们讨论了存在于区块头中的多项。其中两项叫做<strong>mixHash</strong>和<strong>nonce</strong>。也许你会回忆起：</p><ul><li>mixHash：一个Hash值，当与nonce组合时，证明此区块已经执行了足够的计算</li><li>nonce：一个Hash值，当与mixHash组合时，证明此区块已经执行了足够的计算</li></ul><p>PoW函数就是用来估算这两项的。<br><strong>mixHash</strong>和<strong>nonce</strong>到底是如何使用PoW函数来计算出来的有点复杂，如果深入了解的话，我们可以另写一篇文章来讲解了。但是在一个高层面上，它大致就是这样计算的：<br>会为每个区块计算一个”种子”。每个“时期”的种子都不一样，每个时期是30,000个区块长度。对于第一时期，种子就是32位0的Hash值。对于后续的每个时期，种子就是前一个种子Hash值的Hash值。使用这个种子，节点可以计算出一个伪随机“缓存”。</p><p>这个缓存是非常有用的，因为它可以使“轻节点”的概念变成现实，轻节点概念在这篇文章的前面讨论过。轻节点的目的就是让某个节点有能力高效的校验交易而用不着存储整个区块链的数据集。一个轻节点可以仅基于缓存来校验一个交易的有效性，因为缓存可以重新生成需要校验的特定块。</p><p>使用这个缓存，节点可以生成DAG“数据集”，数据集中的每项取决于缓存中少量伪随机选择项。为了成为矿工，你需要要生成全数据集，所有全客户端和矿工都保存这个数据集，并且这个数据集随着时间线性增长。</p><p>然后矿工可以随机抽取数据集中的部分并将它们放入一个数学函数中Hash出一个”mixHash”。矿工会重复生成<strong>mixHash</strong>直到输出的值小于想要的目标值<strong>nonce</strong>。当输出的值符合这个条件的时候，nonce就被认为是有效的，然后区块就被添加到链中。</p><h3 id="挖矿作为安全机制"><a href="#挖矿作为安全机制" class="headerlink" title="挖矿作为安全机制"></a>挖矿作为安全机制</h3><p>总的来说，PoW的目的就是以加密安全的方式证明生成的一些输出（也就是<strong>nonce</strong>）是经过了一定量的计算的。<strong>因为除了列举所有的可能性，没有更好的其他方法来找到一个低于要求阈值的nonce</strong>。重复应用Hash函数的输出均匀分布，所以我们可以确保，在平均值上，<strong>找到满足要求的nonce所需时间取决于难度阈值</strong>。难度系数越大，所需时间越长。这样的话，<strong>PoW算法就给予难度这个概念意义了：用来加强区块链的安全</strong>。</p><p>我们所说的区块链的安全又是什么意思？这非常简单：我们想要创造一个每个人都信任的区块链。像我们之前在这篇文章中讨论的那样，如果存在超过1条以上的链，用户的信任就会消失，因为他们没有能力合理的确认哪条链才是“有效的”。为了让一群用户接受存储在区块链中的潜在状态，我们需要有一群人信任的一个权威区块链。</p><p><strong>这完完全全就是Pow算法所做的事情：它确保特定的区块链直到未来都一直保持着权威性，让攻击者创造一个新区块来重写某个历史部分（例如清除一个交易或者创建一个假的交易）或者保持一个分叉变得非常困难</strong>。为了首先让他们的区块被验证，攻击者需要总是比网络上的其他人更快的解决掉<strong>nonce</strong>问题，这样网络就会相信他们的链是最重的链（基于我们之前提到的GHOST协议原则）。除非攻击者拥有超过一半的网络挖矿能力（这种场景也被称为<a href="https://en.bitcoin.it/wiki/Majority_attack">大多数51%攻击</a> ），要不然这基本上是不可能的。<br><img src="/asset/eth_attack.png"   width = "800" height = "300" alt="" align=center /></p><h3 id="挖矿作为财富分配机制"><a href="#挖矿作为财富分配机制" class="headerlink" title="挖矿作为财富分配机制"></a>挖矿作为财富分配机制</h3><p>除了提供一个安全的区块链，PoW同样也是分配财富给那些为提供这个安全而花费自己计算力的人的一种方法。回忆一下，一个矿工挖出一个区块的时候会获得奖励，包括：</p><ul><li>为“获胜”区块提供的5 ether静态区块奖励（马上就会<a href="https://github.com/ethereum/EIPs/pull/669">变成3 ether</a> ）</li><li>区块中的交易在区块内所消耗的gas</li><li>纳入ommers作为区块的一部分的额外奖励</li></ul><p>为了保证PoW共识算法机制对安全和财富分配的使用是长期可持续的，以太坊努力灌输这两个特性：</p><ul><li>尽可能的让更多的人可访问。换句话说，人们不需要特殊的或者与众不同的硬件来运行这个算法。这样做的目的是为了让财富分配模式变的尽可能的开放，以便任何人都可以提供一些算力而获得Ether作为回报。</li><li>降低任何单个节点（或小组）能够创造与其不成比例的利润可能性。任何可以创造不成比例的利润的节点拥有比较大的影响力来决定权威区块链。这是件麻烦的事情，因为这降低了网络的安全性。</li></ul><p>在区块链网络中，与上面两个特性有关的一个问题是PoW算法是SHA256哈希函数。这种函数的缺点就是它使用特殊的硬件（也被称之为ASCIs）可以更加快速高效的解决<strong>nonce</strong>问题。</p><p>为了减轻这个问题，以太坊选择让PoW算法<a href="https://github.com/ethereum/wiki/wiki/Ethash">(Ethhash)</a> 提高内存级别难度。意思是此算法被设计为计算出要求的<strong>nonce</strong>需要大量的内存和带宽。大量内存的需求让电脑平行的使用内存同时计算多个<strong>nonce</strong>变得极其困难，高带宽的需求让即使是超级电脑同时计算多个<strong>nonce</strong>也变得十分艰难。这种方式降低了中心化的风险，并为正在进行验证的节点提供了更加公平的竞争环境。</p><p>有一件值得注意的事情是以太坊正在从PoW共识机制渐渐转换为一个叫做“权益证明(PoS)”的共识算法。这就是一个比较野心的话题了，我们希望可以在未来的文章中探索这个话题。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>呼！ 你终于坚持到最后了。我希望如此？</p><p>这篇文章中有很多的地方需要消化。如果需要你阅读好几遍才能理解怎么回事，这完全正常。我个人重复阅读了好几次以太坊黄皮书，白皮书，以及代码的不同部分才渐渐明白是怎么回事。</p><p>无论如何，我希望你觉得这篇文章对你有帮助。如果你发现了任何的错误或失误，我很乐意你给我写个私人消息或者直接在评论区评论（我保证我会查看所有评论）。</p><p>记住，我是个人类（对，这是真的），我会犯错误。为了社区的利益，我花时间免费写了这篇文章。所以请你在反馈时不要带着没必要的攻击性，尽量是建设性的反馈。</p><p><a href="https://github.com/ethereum/yellowpaper">以太坊的黄皮书</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;  &lt;/strong&gt;  &lt;Excerpt in index | Homepage Digest&gt;&lt;br&gt;这篇文章主要讲解以太坊的基本原理，对技术感兴趣的朋友可以看看。&lt;/p&gt;
    
    </summary>
    
      <category term="translation" scheme="https://lilymoana.github.io/categories/translation/"/>
    
    
      <category term="blockchain" scheme="https://lilymoana.github.io/tags/blockchain/"/>
    
      <category term="ethereum" scheme="https://lilymoana.github.io/tags/ethereum/"/>
    
  </entry>
  
  <entry>
    <title>简易支付验证能支持数十亿的比特币用户吗？</title>
    <link href="https://lilymoana.github.io/SPV.html"/>
    <id>https://lilymoana.github.io/SPV.html</id>
    <published>2017-09-26T07:03:13.000Z</published>
    <updated>2017-11-22T05:25:28.822Z</updated>
    
    <content type="html"><![CDATA[<p><strong> </strong>  <Excerpt in index | Homepage Digest><br>原文作者是Jameson Lopp，他是BitGo的工程师，也是statoshi.info的创造者以及bitcoinsig.com的建立者。Lopp对于“移除比特币区块大小的限制是安全的，取而代之可以依靠现有的SPV方式”的声明做了一个深入的思考。</p><a id="more"></a><The rest of contents | Rest of all><p>翻译作者：<a href="https://lilymoana.github.io/">许莉</a><br>原文地址：<a href="https://www.coindesk.com/spv-support-billion-bitcoin-users-sizing-scaling-claim/">Could SPV Support a Billion Bitcoin Users?</a> </p><p>一个新的声明被永载在比特币扩展讨论中。</p><p>我们听到取消比特币块大小的限制是安全的，因为比特币可以很容易就扩展到巨大的块（指块的大小），然后通过现已存在的简化支付认证（ SPV）的方式可以支持数十亿的比特币用户。假设，SPV由于只要求SPV客户存储，发送，以及接收很少的数据而具有非常好的可扩展性。</p><p>让我们深入的从多个不同角度来考察一下这个问题。</p><h2 id="SPV是如何工作的？"><a href="#SPV是如何工作的？" class="headerlink" title="SPV是如何工作的？"></a>SPV是如何工作的？</h2><p>即使是直到两年后 Mike Hearn创造了<a href="https://bitcoinj.github.io/">BitcoinJ</a> 时才开始实施SPV，但<a href="https://www.coindesk.com/information/who-is-satoshi-nakamoto/">Satoshi</a>在<a href="https://bitcoin.org/bitcoin.pdf">比特币白皮书</a> 中早就描述了SPV的高层设计。</p><p>以下引用于比特币白皮书中:</p><blockquote><p>8.简易支付认证（Simplified Payment Verification）<br>认证支付有可能是不需要遍历整个网络全部节点的。用户只需要保存一份最长的工作量证明链的区块头内容就可以了（通过不停的向网络节点查询直到自己认为已经获取到了最长的链），以及获取带有时间戳的区块的交易相关的Merkle树分支。用户无法自己检测交易，但是通过链接到链中的某个位置，用户可以看到网络节点已经接受了这笔交易，并在进一步确认网络已经接受后块就会被加入进去。<br><img src="/asset/spv_verification.png"   width = "800" height = "300" alt="" align=center /><br>因此，只要诚实节点掌控网络，那么这个认证就是可靠的，但是如果网络被攻击者所制服，认证就会变得非常的脆弱。当网络节点可以自己认证交易时，只要攻击者能够持续掌控网络，则简易方法可能会被攻击者捏造的交易所欺骗。有一个策略可以保护不被攻击者欺骗，那就是当检测到一个无效区块时接受网络节点的改变，提示用户的软件下载完整区块和改变交易以确认一致性。经常接收到付款的业务可能还是希望能有一个自己的节点，来保证更加独立的安全性和更加快速的认证。</p></blockquote><p>初期SPV的实现是非常简单的—下载整个的区块链，在宽带方面下载整个的区块链并没有比下载完整块（交易已满的块）更高效。</p><p>通过丢弃与SPV客户钱包无关的交易，才能够节省大量的磁盘空间。<a href="https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki">BIP 37</a> 花了18个月的时间才发布，为交易提供了Bloom过滤规范，因此依靠区块头的Merkle根可以显示区块中的交易内容，就如Satoshi描述的那样。提供Bloom过滤规范大大的降低了贷款的使用。</p><p>当SPV客户与比特币网络同步时，他会连接一个或多个全面认证的比特币节点，确定链顶端的最新一个区块，然后使用‘getheaders’命令请求所有的区块头，从最后一个他同步到链顶端的区块开始。</p><p>如果SPV客户只对与钱包相应的特定交易感兴趣，那么它会基于钱包拥有私钥的所有地址构建一个Bloom过滤器，然后发送‘filterload’命令给全节点（一个或多个全节点），全节点就会按照过滤要求发送给客户所需的交易。</p><p>在同步区块头和可能加载Bloom过滤器之后，SPV客户会发送一个‘getdata’命令来请求从他们上次在线时所遗漏的每个区块（可能是过滤之后的），按照顺序来获取遗漏的每个区块。</p><p>当客户同步完之后，如果他还保持着连接全节点对端的状态，那么它只会接收到符合Bloom过滤器交易的‘inv’清单信息。</p><h2 id="SPV客户端扩展"><a href="#SPV客户端扩展" class="headerlink" title="SPV客户端扩展"></a>SPV客户端扩展</h2><p>从客户的视角来看，当使用最小的CPU资源，带宽，和磁盘空间时，Bloom过滤是在区块链中获取相关交易最高效的方法。</p><p>每个比特币的区块头只有80个字节，所以在区块链整个8年多的历史中只有38兆的数据被写入。每年（粗略有52,560个区块），不管区块链中区块的大小，仅仅只添加了4.2兆的数据。</p><p>用来显示区块中交易内容的Merkle树也扩展的非常好。因为新添加到树中的每‘层’都可以让树能表示‘叶子’的总数翻一番。即使是在一个含有数百万交易的区块中，你也不需要一个很深的树来紧凑的显示交易内容。<br> <img src="/asset/spv_scaling.png"   width = "700" height = "300" alt="" align=center /></p><p>Merkle树的数据结构是非常高效的，深度为24的树就能表示出1600万的交易——这足以代表一个8GB的区块。然而，这种交易的Merkle树证明大小仍然保持在1KB以下。<br><img src="/asset/spv_table.png" alt=""></p><p>从SPV客户角度来看，这是非常清晰的，比特币网络可以扩展到千兆大小的区块而SPV客户端处理所需要的那些少量数据也是没有任何问题的——即使是一个3G网络的移动手机。</p><p>但是啊，扩展比特币网络不是那么简单的事情！</p><h2 id="SPV服务端扩展"><a href="#SPV服务端扩展" class="headerlink" title="SPV服务端扩展"></a>SPV服务端扩展</h2><p>当SPV对客户端非常高效的时候，对于服务端却没这么好了——也就是，对于SPV客户发送请求的全节点，由于几种原因，这种方法表现出非常差的可扩展性。</p><p>网络中的节点必须要处理非常庞大的数据才能返回一个对端想要的数据，而且需要为每个区块中的每个发送请求的对端进行着这重复的过程。磁盘I/O很快就变成了一个瓶颈。</p><p>每个SPV客户都必须从上次与网络联系之后开始同步整个区块链，或者它认为自己遗漏了某些交易，它必须要从建立钱包日期起开始重新扫描整个区块链。最坏的情况下，在写入数据时，能达到大约150GB。全节点必须要从磁盘加载每个区块，根据客户要求来过滤并返回结果。</p><p>由于区块链是个追加模式的账簿，数量就会不停的增加。没有一个广泛协议的改变，区块链裁剪与BIP 37就无法兼容——它期待所有的区块对于广发NODE_BLOOM消息的全节点都是可获取的。</p><p>通过遗漏的方式就可以欺骗BIP 37 SPV客户端。为了预防这个，SPV客户端连接多个节点（<a href="https://en.bitcoin.it/wiki/Clearing_Up_Misconceptions_About_Full_Nodes">通常是4个</a> ），不过这并不能作为担保——Sybil攻击可以将SPV客户端从主网络分离。这将全节点的网络负载增加 4倍。</p><p>对于每个已同步到区块链顶端的SPV客户端，每个传入块和交易都必须被单独过滤。这就涉及到无法忽略的CPU时间量，而且必须给每个连接的SPV客户单独完成。</p><h2 id="推测一下数量"><a href="#推测一下数量" class="headerlink" title="推测一下数量"></a>推测一下数量</h2><p>在写入的时候大约有8,300个接收传入连接的全节点在运行，其中8,000个全节点广播NODE_BLOOM消息，因此有能力对于SPV客户的请求做出响应。但是，当前数量下的监听全节点能够合理支持多少SPV客户端呢？</p><p>让网络由能够支撑日用户量达到数万亿以及区块大到能够容纳数万亿用户交易的全节点组成，需要什么？<br><img src="/asset/spv_numbers.png" alt=""></p><p>比特币内核默认传入连接最大值为117，这在网络上可以创建上线为936,000个可使用的套接字。然而，这些大多数套接字在今天都已经被消耗完了。</p><p>每个全节点默认连接8个其他的全节点。比特币内核开发者Luke-Jr的<a href="http://luke.dashjr.org/programs/bitcoin/files/charts/software.html">节点计数</a> （非常粗略的）估计在写入的时候有 100,000个总节点数。其中92,000个节点不为SPV客户端提供有效套接字。这让全节点就消耗了800,000个有效套接字，为SPV客户端仅仅留下了136,000个有效套接字。</p><p>这让我总结出大概有85%的有效套接字都是被网络中的全节点网格给消耗掉了。（值得注意的是，Luke-Jr的估计方法无法计算出非监听节点在线的时间，当然，其中一些节点肯定是周期性的断开连接然后又重新建立连接）。</p><p>从<a href="https://statoshi.info/">statoshi.info</a> 中获取的平均值为100个全节点（8传出连接，92个传入连接）对端和25个SPV客户。这也就是80%的有效套接字被全节点给消耗掉了。<br><img src="/asset/spv_peers.png" alt=""></p><p>如果我们想要甚至10亿的SPV客户都可以使用这个系统，那就必须要有足够的全节点资源可以服务这些客户——网络套接字，CUP周期，磁盘I/O等等。我们能实现这个目标吗？</p><p>为了相信SPV扩展能够做到，我们就比较保守的假设10亿的SPV的每个用户：</p><ul><li>每天接受和发送一条交易</li><li>每天将钱包同步到区块链顶端一次</li><li>同步的时候查询四个节点以降低因遗漏而被欺骗</li></ul><p>每天10亿的交易，如果平均分配（当然不会被平均分配）每个区块会有7百万的交易。由于Merkle树非常好的可扩展性，只需要23个哈希值就能证明此种区块中的交易内容：736个字节的数据外加每个交易的平均500个字节。</p><p>每天加上另外的12KB的区块头数据，SPV客户会依然每天还是使用大概20KB的数据。</p><p>然而，每天10亿的交易会产生大概500GB的区块链数据让全节点去存储以及处理。SPV客户连接上之后要查询自己钱包前一天的交易时，四个节点各自都需要读取和过滤这500GB的数据。</p><p>记住在 8,000个SPV服务全节点的网络中当前大约有 136,000个有效套接字是为了SPV客户端准备的。如果每个SPV客户端使用4个套接字，那么在任何时刻只有34,000个客户端可以与网络进行同步。如果一次性在线的人数大于34,000，当其他的用户打开钱包试图与区块链顶端进行同步的时候就会接受到连接错误。</p><p>因此，在当前只能支撑34,000个用户在任意时刻能进行同步的网络上，要支撑10亿的SPV用户每天同步一次，也就是一天有29,400个组的用户必须要连接、同步、断开连接：每个用户必须要能够在3秒钟之内完成前一天数据的同步。</p><p>这就会造成一点难题，因为它要求每个全节点要有能力连续的每秒为每个SPV客户读取以及过滤167GB的数据。在一个全节点对应20个SPV客户端时，也就意味着每秒需要处理3,333GB的数据。我还不知道有任何的设备能拥有这样的吞吐量。不过应该可以创建一个巨大的RAID 0阵列的<a href="https://www.amazon.com/960Gb-Ssdnow-Dc400-Ssd-Sata/dp/B01LFOIK2Y/ref=sr_1_2?s=electronics&amp;ie=UTF8&amp;qid=1500821192&amp;sr=1-2&amp;keywords=SEDC400S37%2F1600G">高端固态磁盘</a> ，每个磁盘可以实现大约每秒600MB的吞吐量。</p><p>你大概需要 5,555个这样的设备来达到目标吞吐量。这种磁盘写入时会花费400美元，它拥有大约1TB的容量——足够保这种存理论网络上2天的区块数据。因此，每两天你就需要一个新的磁盘阵列，也就是每两天大概需要花费超过220万美元——这意味着保存1年的区块数据并达到所要求的吞吐量需要花费超过1亿美元。</p><p>当然，我们可以利用假设来稍稍调整这些数字，我们是否可以假设出一个节点的花费能够合理一点的场景？</p><p>让我们来尝试一下：<br>如果我们有 100,000个全节点都运行在更加便宜，大容量的旋转磁盘上，然后我们能以某种方式让这些全节点全部都接收SPV客户，而且设法更改全节点的软件让它能支持1,000个连接的SPV客户。</p><p>这样我们就拥有1亿个套接字可供SPV客户使用，能够支持2500万的SPV客户同时在线（每个客户需要4个套接字）。因此每个SPV客户每天拥有2,160秒来与网络同步数据。如果让一个全节点能满足要求，那么需要它能够保持着每个SPV客户读取速度达到231MB/s，也就意味着 1,000 个连接的SPV客户速度就要达到 231GB/s。</p><p>一个 7,200 RPM的硬盘读取速度大概是220MB/s，所以大概 1,000多个RAID 0阵列设备就能达到目标读取速度。</p><p>在写入的时候你可以购买一个<a href="https://www.amazon.com/Seagate-BarraCuda-3-5-Inch-Internal-ST10000DM0004/dp/B01IA9H22Q">价值$400的10TB容量设备</a> ，因此一个400,000美元的这些设备RAID阵列就能够保存20天的区块数据——也就是需要720万美元来保存1年的数据并达到要求的读取吞吐量，这个价格相对就比较容易让人接受了。<br><img src="/asset/spv_device.jpg"   width = "700" height = "300" alt="" align=center /><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;差不多每天就要至少添加两个这样的设备！</p><p>值得注意的是，没人会在头脑清醒的时候用那么多设备来运行RAID 0阵列，因为如果其中一个设备有问题那么整个磁盘都会崩溃。因此具有容错功能的RAID阵列将更加昂贵并且性能更差一些。而且这看起来也是令人难以置信的乐观——100,000个组织愿意每年花费数百万的美元来运行全节点。</p><p>另外一个需要注意的是，这些保守的估计中，都是假设SPV客户能够通过某种方式来协调，以便在每一天内均匀分配其同步时间。而现实中，会有每天和每周的周期性峰值和活跃性低谷——网络会需要一个比估计值合理的高点的容量来满足峰值时要求。</p><p>否则的话，在使用高峰时SPV客户同步会失败。</p><p>有趣的是，原来改变每个节点的套接字数不会影响任何给定的全节点总负载量——它还是需要处理相同数量的数据。在这个等式中真正重要的是全节点与SPV客户的比例，当然还有全节点需要处理的链中区块的大小。</p><p>最终结果似乎是不可避免的：运行能够支持每天10亿链上交易者的SPV的全节点的花费是非常庞大的。</p><h2 id="寻找一个中间点"><a href="#寻找一个中间点" class="headerlink" title="寻找一个中间点"></a>寻找一个中间点</h2><p>通过这一点，可以清楚的看到，每天10亿的交易量让运行全认证节点的花费除了最有钱的人之外没人能负担的起。</p><p>但是，如果我们略过这些计算，取而代之尝试寻找一个公式，可以通过增加链上交易的吞吐量来确定增加网络负载的费用呢？</p><p>为了让比特币网络能够每秒支持目标交易量（增加了86,400个新日常用户的容量），我们可以计算每个节点磁盘吞吐量要求如下：<br><img src="/asset/spv_math.png" alt=""></p><p>这提供了全节点服务SPV客户需求的每秒最小磁盘读取吞吐量。根据现在已存在的网络特性和可用的技术，我们可以通过将磁盘吞吐量作为假设的瓶颈来推算节点运行花销的估计值。当然这里肯定也会存在其他资源限制因素，来增加全节点运行的花销。</p><p><a href="https://docs.google.com/spreadsheets/d/1vJE0Qmfvg654J49rDOtofGWI7hqd-hJLJYQ9I2WlJvc/edit?usp=sharing">接下来的运算</a> 中，我使用了这些假设：</p><ul><li>根据<a href="https://statoshi.info/dashboard/db/transactions?panelId=2&amp;fullscreen">statoshi.info</a> 交易平均大小字节数 = 500 bytes</li><li>SPV用户的总数 = 每天每笔交易1个</li><li>被SPV客户端消耗的套接字 =标准为5</li><li>全节点对SPV客户可获取的套接字的数量 = 之前计算的数字是136,000</li><li>硬盘吞吐量和空间的花销 = $400 10TB, 7,200 PRM的RAID 0配置硬盘<br><img src="/asset/spv_chart1.png" alt=""></li></ul><p>我们可以看见在正常情况下磁盘的吞吐量还是比较合理的，但是当每秒超过100个交易的时候就不合理了。在这个点的时候你就需要购买多个磁盘，并且将其分段在RAID阵列中以达到要求的性能。</p><p>不幸的是，磁盘吞吐量的需求以及因此全节点的运行成本相对于每秒交易数量的二次增加。花销很快就变得大多数人无法承担。</p><p>作为参考，请记住Visa每秒大约处理2,000笔交易。在比特币中这大概需要将近$200,000价值的磁盘来跟上SPV的需求。值得注意一点是，这些图表保持着全节点的数量在一个8,000的常量—在现实中，他们很有可能随着花销的增加而减少，因此增加了吞吐量的需求以及运行剩下的节点花销会增加的更快。</p><p>这似乎是中心化节点的复合限制。<br><img src="/asset/spv_chart2.png" alt=""></p><p>就像我在<a href="https://www.coindesk.com/how-to-save-bitcoins-node-network-from-centralization/">如何从中心化中拯救比特币的节点网络</a> 中总结的，其中一个关于增加区块大小的根本争论问题是节点的运行成本。上面的计算让我们对于计算节点运行成本的复杂有了基本的认识，计算复杂是因为涉及了太多的变量—上面的计算是基本上让变量都保持一个常量而且只关注磁盘I/O的花销。</p><p>一年前我做的民意调查（不是非常科学）显示98%的节点运营商每月不会支付超过$100来运行一个节点，即使他们对比特币的投资非常高昂。我愿意打赌，如果增加比特币链上交易一个数量级将会导致失去大多数的全节点，如果增加两个数量级会导致失去90%的节点甚至更多。</p><p>我相信，假设只有少数人会愿意为了运行一个全节点而不怕麻烦的去建立一个RAID陈列会安全一点。如果在这种情况下，声称这样的增加对于普通用户而言没关系是站不住脚的，因为这将会导致甚至没有足够的全节点磁盘吞吐量或套接字来为SPV提供服务。</p><h2 id="SPV其他的缺点"><a href="#SPV其他的缺点" class="headerlink" title="SPV其他的缺点"></a>SPV其他的缺点</h2><p>SPV对于安全性或全认证节点隐私性没有要求的终端用户而言是非常好的。然而，有很多原因可以被认为是多数SPV网络节点的阻碍者，不论它的可扩展性如何。</p><p>SPV做出主要的假设，导致其具有比全认证节点的安全性和隐私性更加的薄弱。</p><ol><li>SPV用户相信矿工会正确认证和加强比特币规则，他们认为具有最大累积工作量证明的块链也是一个有效的链。你可以从<a href="http://www.coindesk.com/bitcoins-security-model-deep-dive/">这篇文章</a> 中了解SPV和全节点安全模型的不同。</li><li>SPV用户认为全节点不会因为遗漏对他们撒谎。全节点不会撒谎说一个其实不存在在区块上的交易是存在的，但是可以撒谎说存在在区块上的交易没有发生。</li><li>因为SPV客户力求效率，所以他们只发送请求来获取属于他们自己交易的数据。这导致失去大量的隐私。</li></ol><p>有趣的是，BIP 37的合著者 Matt Corallo, <a href="https://www.youtube.com/watch?v=8BLWUUPfh2Q&amp;feature=youtu.be&amp;t=1569">后悔创建了它</a> </p><blockquote><p><em>”现在在系统中用户隐私的最大问题就是 BIP37 SPV bloom过滤器。我很抱歉，我写了这个。”</em></p></blockquote><p>BIP 37 Bloom过滤的SPV客户<a href="https://eprint.iacr.org/2014/763.pdf">基本上是没有隐私的</a> ，即使使用不合理地高 <strong>false-positive rates</strong>。Jonas Nick(Blockstream的安全工程师)发现给出一个公钥，他可以确定给出钱包70%的其他地址。</p><iframe width="780" height="515" src="https://www.youtube.com/embed/HScK4pkDNds" frameborder="0" allowfullscreen></iframe><p>你可以通过在多个对端中分开Bloom过滤器来解决SPV的恶劣隐私，虽然这会让SPV的扩展性比在全节点上放更多的负载还要差。</p><p>BIP 37 对于微不足道的拒绝服务攻击也同样脆弱。展示的代码可以在<a href="https://github.com/petertodd/bloom-io-attack">这里获取</a> ，它通过发送很多快速库存请求经过特殊构造的过滤器，导致磁盘不停的查找以及CPU的高使用率来让全节点瘫痪。</p><p>攻击的概念证明作者和主要开发者的Peter Todd解释：</p><blockquote><p><em>”根本问题是你可以用很少的网络带宽来消耗不成比例的磁盘I/O带宽。“</em></p></blockquote><p>甚至直到今天，Satoshi在白皮书中描述的欺诈警告还是没有实现。实际上，这方面的努力调查显示它甚至不可能实现一个轻量级的欺诈警告。</p><p>例如，欺诈警告只有当你真的获得了被要求证明是欺诈的数据才有效—如果矿工不提供那个数据，欺诈警告就不会被创建。再比如，SPV客户没有Satoshi设想的安全级别。</p><p>从一个高层次的角度来看，一个由大多数SPV节点组成的世界可以让共识改变比如coin cap的总数或甚至让编辑分类账本更加的容易。更少的全认证节点意味着更多的中心化共识规则实施，因此更少的阻力改变共识规则。有人些人认为这是一个特征，但是更多的人认为这是个缺陷。</p><h2 id="潜在的改进"><a href="#潜在的改进" class="headerlink" title="潜在的改进"></a>潜在的改进</h2><p>SPV安全性和可扩展性有可能会通过好几种方法被潜在的改进，比如通过欺诈证明，欺诈提示，输入证明，花费证明等等方式。但是就我所知，这些都还只存在与概念阶段，还没有准备好开始开发产品。</p><p><a href="https://bitcoin.stackexchange.com/questions/37124/is-there-a-way-to-index-transactions-so-that-filterload-commands-can-be-answered?rq=1">Bloom过滤器承诺</a> 可以提高隐私性，但是在过滤器的大小和它的 <strong>false positive rate</strong> 存在着一个效能的权衡： 太粗略意味着对端会下载太多的 <strong>false-positive</strong> 区块，而太精细又意味着过滤器对于任何使用SPV客户来下载的人来说太巨大又不切实际。</p><p>它会减少全节点磁盘吞吐量的负载，但是权衡就变成了SPV客户和全节点之间增加的带宽，因为整个区块会在网络上进行传送。</p><p><a href="https://github.com/Roasbeef/bips/blob/master/gcs_light_client.mediawiki">最近提出的紧凑客户端过滤</a> 消除了隐私的问题，但是它要求如果匹配过滤器全节点就需要下载整个区块（虽然不一定非要通过p2p网络）。</p><p><a href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-May/012715.html">UTXO承诺</a> 可以让SPV客户同步他们当前的UTXO集，因此钱包余额就不需要去请求全节点来扫描整个区块链。相反，它可以提供现有UTXOs的证明。</p><p>也许可以通过要求SPV客户要么提交工作量证明（站不住脚的电池供电设备比如手机），要么基于通道的微型支付（如果客户还没接收到钱那么就不可能会自举）来防范Bloom过滤器的Dos攻击，但是这两者都没有提出直接的解决方案。</p><p>全节点的磁盘读取需求可能会通过改进数据索引和批量处理SPV客户的请求等多种方式进行减少。</p><p>Ryan X Charles在下面的评论中指出，使用BIP70的支付协议来直接告诉别人你发送给他们的UTXO支付ID，可以移除他们对Bloom过滤器使用的需要，因为他们可以直接从全节点来请求数据。如果你愿意接受隐私权衡的话，这是非常高效的。</p><p>照我说，这还有很多的改进空间—为了改进链上的扩展性还有很多的困难需要克服。</p><h2 id="合适的扩展解决方案"><a href="#合适的扩展解决方案" class="headerlink" title="合适的扩展解决方案"></a>合适的扩展解决方案</h2><p>如果我们忽略扩展区块大小的其他众多杂项问题，比如块传播延迟，UTXO集扩展，初始化区块同步时间和安全性以及隐私等权衡问题，只要有人愿意投资巨大的资源来开发改进软件和运行需求的基本设备，那么技术上是有可能将比特币扩展到每天亿万的链上用户。</p><p>不过比特币似乎不太可能以这种方式有机的演变，因为有其他很多有校的方式来扩展系统。最高效的扩展形式已经被使用了：联合中心化API提供者。当使用这个方法的时候，倾向于存在巨大的信任和隐私权衡，但是很多交互涉及到合同协议，这也降低了一些危险性。</p><p>用不可靠的方式进行扩展，诸如闪电之类的2层协议提供了更高效的扩展，因为大量的数据传输，仅仅只需要在直接涉及到给定链下交易的少数方之间进行。你可以把它想成广播到所有以太网通信层与路由IP层之间的区别—互联网在没有路由的情况下无法扩展，货币网络也如此。</p><p>虽然这种扩展方法比传统中心化扩展在技术上要复杂很多而且还需要<a href="https://www.coindesk.com/lightning-technical-challenges-bitcoin-scalability/">克服很多独特的挑战</a>， 为调研和这些路由协议开发的前期投资在长期来看会带来巨大的收益，因为他们在数量级上减少了整个网络需要承载的负载。</p><p>两者之间还有很多可以探索：</p><ul><li>使用诸如<a href="http://hashcash.com/">HashCash</a> Chaum代币的具有完善隐私的中心化监管方案</li><li>诸如<a href="http://cs-people.bu.edu/heilman/tumblebit/">TumbleBit</a> 的中心化非监管领信息证明系统</li><li>联合的（半信任的多重签名）<a href="https://elementsproject.org/sidechains/">侧链</a> </li><li>矿工安全（半信任）<a href="http://www.drivechain.info/">驱动链</a> </li></ul><p>我<a href="https://medium.com/@lopp/de-centralized-block-chain-scaling-268dc5c3a7d0">仍然相信</a> 长期来看， 比特币还是需要大一点的区块。</p><p>让我们耐心一点，策略性的在保持安全性和隐私的同时尝试将系统扩展到尽可能的高效。</p><p>一个可审计的，轻去中心化的PayPal如果站在普通用户的立场上运作那么肯定能起作用，但是它就不会提供比特币现在所喜爱的财务主权。</p><p>感谢 Matt Corallo, Mark Erhardt and Peter Todd为本文提供的审查和反馈。</p><p><strong>信息披露：</strong>CoinDesk是Digital Currency Group的子公司，拥有Blockstream所有权。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; &lt;/strong&gt;  &lt;Excerpt in index | Homepage Digest&gt;&lt;br&gt;原文作者是Jameson Lopp，他是BitGo的工程师，也是statoshi.info的创造者以及bitcoinsig.com的建立者。Lopp对于“移除比特币区块大小的限制是安全的，取而代之可以依靠现有的SPV方式”的声明做了一个深入的思考。&lt;/p&gt;
    
    </summary>
    
      <category term="translation" scheme="https://lilymoana.github.io/categories/translation/"/>
    
    
      <category term="blockchain" scheme="https://lilymoana.github.io/tags/blockchain/"/>
    
      <category term="bitcoin" scheme="https://lilymoana.github.io/tags/bitcoin/"/>
    
  </entry>
  
  <entry>
    <title>C Language Implemented Tendermint ABCI</title>
    <link href="https://lilymoana.github.io/Eng_C-ABCI.html"/>
    <id>https://lilymoana.github.io/Eng_C-ABCI.html</id>
    <published>2017-09-26T03:53:12.000Z</published>
    <updated>2017-11-22T05:25:28.822Z</updated>
    
    <content type="html"><![CDATA[<p><strong>  </strong>  <Excerpt in index | Homepage Digest><br>This article is about a C-ABCI program I implemented.</p><a id="more"></a><The rest of contents | Rest of all><p>Original Author: <a href="https://lilymoana.github.io/">XU LI</a><br>Chinese Version: <a href="https://lilymoana.github.io/Chi_C-ABCI.html">C-ABCI</a></p><h2 id="Brief-Introduction"><a href="#Brief-Introduction" class="headerlink" title="Brief Introduction"></a>Brief Introduction</h2><p>This article will focus on the implementation of <strong>C-ABCI</strong> which means use <strong>C language</strong> to implement <strong>Tendermint ABCI</strong> ! First of all,let’s brief introduce <strong>Tendermint</strong> and <strong>ABCI</strong>:</p><p><strong>Temdermint’s</strong> core is consensus engine, it would be responsible for:</p><ul><li>Sharing blocks and transactions between nodes</li><li>Establishing a canonical/immutable order of transactions (the blockchain)</li></ul><p><strong>ABCI(Application BlockChain Interfac)</strong> is interface between <strong>Tendermint</strong> and <strong>Application</strong>, which means <strong>Application</strong> will use <strong>ABCI</strong> to communicate with <strong>Tendermint</strong>. It can be implemented with any language, so far it’s  been implemented with <a href="https://github.com/mdyring/cpp-tmsp">C++</a> and <a href="https://github.com/tendermint/js-abci">JavaScript</a>, <a href="https://github.com/jTendermint/jabci">Java</a>, <a href="https://github.com/KrzysiekJ/abci_server">Erlang</a>. But not include <strong>C language</strong>, so I took the chance, use <strong>C language</strong> implemented  <strong>C-ABCI</strong>.</p><p>Learn more about <strong>Tendermint</strong>: <a href="https://tendermint.com/intro">Tendermint Intro</a><br>Learn more about <strong>ABCI</strong> : <a href="https://tendermint.com/intro/abci-overview">ABCI Overview</a><br>Source code of <strong>C-ABCI</strong> : <a href="https://github.com/chainx-org/c-abci">chainx-org/c-abci</a></p><h2 id="How-to-run-C-ABCI-demo"><a href="#How-to-run-C-ABCI-demo" class="headerlink" title="How to run C-ABCI demo?"></a>How to run C-ABCI demo?</h2><p>This is pretty easy part, there’s only five step to run a <strong>C-ABCI</strong> demo, do as the following:</p><h3 id="Step-1-Install-Tendermint"><a href="#Step-1-Install-Tendermint" class="headerlink" title="Step 1:  Install Tendermint"></a>Step 1:  Install Tendermint</h3><p>Install <strong>Tendermint</strong> into your computer, here is the guide of <a href="https://tendermint.com/docs/guides/install-from-source">Installation of Tendermint</a></p><h3 id="Step-2-Clone-code"><a href="#Step-2-Clone-code" class="headerlink" title="Step 2: Clone code"></a>Step 2: Clone code</h3><p>Clone the <strong>C-ABCI</strong> source code to your computer:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/chainx-org/c-abci.git   ~/work/c/c-abci</span><br></pre></td></tr></table></figure></p><p>This is where I keep <strong>C-ABCI</strong> source code, you can chose your own path to keep it.</p><h3 id="Step-3-Compile-code"><a href="#Step-3-Compile-code" class="headerlink" title="Step 3: Compile code"></a>Step 3: Compile code</h3><p> Enter into <strong>c-abci</strong>  directory and compile  the <strong>C-ABCI</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/work/c/c-abci</span><br><span class="line">make</span><br></pre></td></tr></table></figure></p><p>when you successfully compile the <strong>C-ABCI</strong>, you will see the terminal output like this:<br><img src="/asset/cabci_make.png" alt=""></p><p>And in the <strong>c-abci/bin</strong> directory you will see the <strong>c-dummy</strong> binary file, it can be executed !</p><h3 id="Step-4-Run-test-program"><a href="#Step-4-Run-test-program" class="headerlink" title="Step 4: Run test program"></a>Step 4: Run test program</h3><p>Enter  into <strong>c-abci/bin</strong> directory and run <strong>c-dummy</strong> program:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd  bin/</span><br><span class="line">./c-dummy</span><br></pre></td></tr></table></figure></p><h3 id="Step-5-Run-Tendermint"><a href="#Step-5-Run-Tendermint" class="headerlink" title="Step 5: Run Tendermint"></a>Step 5: Run Tendermint</h3><p>Run <strong>Tendermint</strong> program:</p><p>If it is your first time run <strong>Tendermint</strong> in your computer,  execute command:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tendermint init</span><br><span class="line">tendermint node</span><br></pre></td></tr></table></figure></p><p>If you have already run <strong>Tendermint</strong> in your computer , then execute command:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tendermint unsafe_reset_all</span><br><span class="line">tendermint node</span><br></pre></td></tr></table></figure></p><p>This is whole procedure of <strong>How to run C-ABCI demo</strong>. Here is the video of runing C-ABCI:</p><iframe width="1000" height="500" src="https://www.youtube.com/embed/p8CSvTyvOOI" frameborder="0" allowfullscreen></iframe><h2 id="C-ABCI-code-framework"><a href="#C-ABCI-code-framework" class="headerlink" title="C-ABCI code framework"></a>C-ABCI code framework</h2><p><strong>Tendermint</strong> provides two methods  to communicate with,  that’s  <strong>GRPC</strong> and <strong>TSP</strong> ! <strong>C-ABCI</strong> chose the latter, it use <strong>TCP</strong> protocol to implement communication module.  Tendermint keep three connections: Mempool Connection, Consensus Connection, Query Connection. <a href="https://tendermint.com/docs/guides/app-development">Connections Introduction</a>. In <strong>C-ABCI’s</strong> implementation each connection has it’s own process to dispose the connection’s request,  maybe latter on I will implement another version which use separated threads to dispose each connection.</p><p>As we said before, ABCI is a interface, in <strong>C language</strong> term it means that  <strong>C-ABCI</strong> is a library which  provides three interfaces.  <strong>Application</strong> can use <strong>C-ABCI</strong> library to communicate with <strong>Tendermint</strong>. <strong>C-ABCI</strong> doesn’t interested in the data which <strong>Application</strong> and <strong>Tendermint</strong> communicate with, it’s just a transmitter. Data transmission between <strong>Tendermint</strong> and <strong>C-ABCI</strong> is relay on <strong>TCP Socket</strong>, but <strong>C-ABCI</strong> and <strong>Application</strong> data transmission use callback function to achieve!</p><p>Processing flow among <strong>Tendermint</strong>, <strong>Application</strong>, <strong>C-ABCI</strong>:</p><ol><li><strong>Tendermint</strong> send a request to <strong>C-ABCI</strong></li><li><strong>C-ABCI</strong> receive the request and parse request data, then pass the data to the callback function which is <strong>Application</strong> implemented</li><li>The callback function according to request type to act different with the data, and pass the result to <strong>C-ABCI</strong> via callback function return value</li><li><strong>C-ABCI</strong> pack the returned value and send it to <strong>Tendermint</strong></li></ol><p>In <strong>C-ABCI</strong> source code, there have been seven directories , each directory represent a individual modular except <strong>include</strong> directory. The sheet below describes each directory:</p><table><thead><tr><th>directory</th><th>description</th></tr></thead><tbody><tr><td>include</td><td>Include all modular head files</td></tr><tr><td>socket</td><td>Communication modular which implemented communication of network based on TCP Socket</td></tr><tr><td>encoding</td><td>Character conversion modular which implemented conversion between <strong>unsigned char</strong> and <strong>unsigned integer</strong> of big endian and little endian </td></tr><tr><td>dlist</td><td>Data storage modular which use <strong>Circular Doubly Linked List</strong> to store data</td></tr><tr><td>type</td><td>Data type modular which dispose <strong>Tendermint</strong> data type, produce from <strong>Tendermint</strong> type.proto file with <strong>protobuf-c</strong> software</td></tr><tr><td>core</td><td><strong>C-ABCI</strong> core modular which provides three interface to <strong>Application</strong></td></tr><tr><td>demo</td><td><strong>C-ABCI</strong> demo which is very simple <strong>Application</strong> for show you how to use <strong>C-ABCI</strong> library</td></tr></tbody></table><h2 id="How-to-build-a-Application-on-top-of-C-ABCI"><a href="#How-to-build-a-Application-on-top-of-C-ABCI" class="headerlink" title="How to build a Application on top of C-ABCI?"></a>How to build a Application on top of C-ABCI?</h2><p>Even though <strong>C-ABCI</strong> have seven directories,  there only have two directories you have to study:</p><ul><li>core : use this modular to code <strong>Application’s</strong> framework</li><li>type : use this modular to <strong>malloc data struct</strong> and <strong>free data struct</strong></li></ul><p>I have already implemented a very simple application called <strong>c-dummy</strong> in <strong>c-abci/demo</strong> directory, you can draw lessons from it.</p><p><strong>C-ABCI</strong> is very easy to start on, it provides only three interfaces which is all you need to code a <strong>Application</strong> framework! </p><p>The three interfaces is:</p><h3 id="Initialize-C-ABCI-serve"><a href="#Initialize-C-ABCI-serve" class="headerlink" title="Initialize C-ABCI serve"></a>Initialize <strong>C-ABCI</strong> serve</h3><p>Bind and listen the provided IP address and port.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int server_init(const char *ipaddr, const char *port);</span><br></pre></td></tr></table></figure></p><h3 id="Start-C-ABCI-serve"><a href="#Start-C-ABCI-serve" class="headerlink" title="Start C-ABCI serve"></a>Start <strong>C-ABCI</strong> serve</h3><p>It will not return until some error occurred. <strong>app</strong> is callback function which need <strong>Application</strong> to implemented.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int server_start(Application app)</span><br></pre></td></tr></table></figure></p><h3 id="Stop-C-ABCI-server"><a href="#Stop-C-ABCI-server" class="headerlink" title="Stop C-ABCI server"></a>Stop <strong>C-ABCI</strong> server</h3><p>Close listened socket.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void server_stop();</span><br></pre></td></tr></table></figure></p><p>You just need write this three functions in your <strong>Application’s main function</strong> then the code framework of your <strong>Application</strong> is completed (see <strong>main function</strong> in <code>main.c</code> file of <strong>c-abci/demo/</strong> directory) !</p><p>Rest of the work is to implement callback function which you provide to <strong>server_start</strong> function. It should look like this:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">void *ABCIApplication(Types__Request *request)</span><br><span class="line">&#123;</span><br><span class="line">    switch( request-&gt;value_case )</span><br><span class="line">    &#123;</span><br><span class="line">        case TYPES__REQUEST__VALUE_INFO:</span><br><span class="line">            return Info();</span><br><span class="line">        case TYPES__REQUEST__VALUE_SET_OPTION:</span><br><span class="line">            return SetOption(request-&gt;set_option);</span><br><span class="line">        case TYPES__REQUEST__VALUE_DELIVER_TX:</span><br><span class="line">            return DeliverTx(request-&gt;deliver_tx);</span><br><span class="line">        case TYPES__REQUEST__VALUE_CHECK_TX:</span><br><span class="line">            return CheckTx(request-&gt;check_tx);</span><br><span class="line">        case TYPES__REQUEST__VALUE_COMMIT:</span><br><span class="line">            return  Commit();</span><br><span class="line">        case TYPES__REQUEST__VALUE_QUERY:</span><br><span class="line">            return Query(request-&gt;query);</span><br><span class="line">        case TYPES__REQUEST__VALUE_INIT_CHAIN:</span><br><span class="line">            return InitChain(request-&gt;init_chain);</span><br><span class="line">        case TYPES__REQUEST__VALUE_BEGIN_BLOCK:</span><br><span class="line">            return BeginBlock(request-&gt;begin_block);</span><br><span class="line">        case TYPES__REQUEST__VALUE_END_BLOCK:</span><br><span class="line">            return EndBlock(request-&gt;end_block);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>You can find this code in <code>c-abci/demo/dummy.c</code> file. The  parameter of <strong>request</strong> passed by <strong>C-ABCI</strong>, which is received from <strong>Tendermint</strong>.</p><p>You can see in this callback function each <strong>request type</strong> has it’s own function to dispose <strong>request</strong>. This is most important part of your <strong>Application code</strong>, you need  implement functions of each <strong>request type</strong>, these functions are your <strong>Application’s business logic</strong> . And when you finished these functions, your <strong>Application’s code</strong> is completed!<br>In <strong>c-abci/demo/</strong> directory just implemented a few  functions of some <strong>request type</strong>, and it’s very simple <strong>business logic</strong> which just store data or query them.  It use <strong>dlist modular</strong> to store data. You can choose your own method to store data, such as <strong>tree</strong>, <strong>database</strong>.</p><p>Problem’s Solution:<a href="https://github.com/chainx-org/c-abci/wiki/%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">C-ABCI’s problems during compiling</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;  &lt;/strong&gt;  &lt;Excerpt in index | Homepage Digest&gt;&lt;br&gt;This article is about a C-ABCI program I implemented.&lt;/p&gt;
    
    </summary>
    
      <category term="original" scheme="https://lilymoana.github.io/categories/original/"/>
    
    
      <category term="blockchain" scheme="https://lilymoana.github.io/tags/blockchain/"/>
    
      <category term="c" scheme="https://lilymoana.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>C语言实现的ABCI</title>
    <link href="https://lilymoana.github.io/Chi_C-ABCI.html"/>
    <id>https://lilymoana.github.io/Chi_C-ABCI.html</id>
    <published>2017-09-26T01:52:12.000Z</published>
    <updated>2017-11-22T05:25:28.822Z</updated>
    
    <content type="html"><![CDATA[<p><strong> </strong>  <Excerpt in index | Homepage Digest><br>本文主要介绍用 C 语言实现的 Tendermint ABCI，以及如何在此之上构建一个属于自己的应用</p><a id="more"></a><The rest of contents | Rest of all><p>原文作者：<a href="https://lilymoana.github.io/">许莉</a><br>英文版本：<a href="https://lilymoana.github.io/Eng-C-ABCI-md.html">C-ABCI</a> </p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>首先简单介绍一下 Tendermint 和 ABCI。</p><p>Tendermint 的核心就是共识引擎，它主要负责两点：</p><ul><li>节点之间共享交易和区块</li><li>建立一个规范且不可改变的交易顺序（也就是区块链）</li></ul><p>ABCI（Application BlockChain Interface）是 Tendermint 与应用程序之间的一个接口，它可以使用各种语言来实现。目前已经实现的语言有 <a href="https://github.com/mdyring/cpp-tmsp">C++</a>，<a href="https://github.com/tendermint/js-abci">JavaScript</a>，<a href="https://github.com/jTendermint/jabci">Java</a> 和 <a href="https://github.com/KrzysiekJ/abci_server">Erlang</a>，尚无 C 语言实现，故而本文实现了 C 版本的 ABCI。</p><p>如果对于 Tendermint 和 ABCI 尚不熟悉，或者想要了解更多有关内容，可自行参阅以下资料：</p><ul><li><a href="https://tendermint.com/intro">Tendermint Intro</a></li><li><a href="https://tendermint.com/intro/abci-overview">ABCI Overview</a></li><li><a href="http://chainx.org/news/index/detail/id/18.html">Tendermint Intro 中文翻译</a></li></ul><p>C-ABCI 的GitHub源码：<a href="https://github.com/chainx-org/c-abci">chainx-org/c-abci</a>。</p><h2 id="运行示例"><a href="#运行示例" class="headerlink" title="运行示例"></a>运行示例</h2><h3 id="安装-Tendermint"><a href="#安装-Tendermint" class="headerlink" title="安装 Tendermint"></a>安装 Tendermint</h3><p>在编译启动 C-ABCI 之前，首先需要安装 Tendermint，<a href="https://tendermint.com/docs/guides/install-from-source">这里是官方的安装指南</a>。</p><h3 id="编译执行-c-dummy"><a href="#编译执行-c-dummy" class="headerlink" title="编译执行 c-dummy"></a>编译执行 c-dummy</h3><p>Tendermint 安装完成之后，从 GitHub 下载 C-ABCI 源码到本地：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/chainx-org/c-abci.git ~/c-abci</span><br></pre></td></tr></table></figure></p><p>进入到目录 c-abci ，执行 <code>make</code> 对源码进行编译：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/c-abci</span><br><span class="line">make</span><br></pre></td></tr></table></figure></p><p>编译成功, 可以看到如下信息：<br><img src="/asset/cabci_make.png" alt="Makfile执行成功结果"><br>编译完成后，会在 bin 目录下生成一个叫做 c-dummy 的可执行程序，执行该程序：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> bin</span><br><span class="line">./c-dummy</span><br></pre></td></tr></table></figure></p><h3 id="启动-Tendermint"><a href="#启动-Tendermint" class="headerlink" title="启动 Tendermint"></a>启动 Tendermint</h3><p>c-dummy 启动后，开始启动 Tendermint。如果是首次执行Tendermint，需要先进行初始化再启动节点<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tendermint init</span><br><span class="line">tendermint node</span><br></pre></td></tr></table></figure></p><p>如果之前有启动过 Tendermint，先对 Tendermint 进行重置再启动节点：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tendermint unsafe_reset_all</span><br><span class="line">tendermint node</span><br></pre></td></tr></table></figure></p><p>这就是整个启动过程了，下面有个C-ABCI启动过程的视频：</p><iframe width="1000" height="500" src="https://www.youtube.com/embed/p8CSvTyvOOI" frameborder="0" allowfullscreen></iframe><h2 id="代码架构"><a href="#代码架构" class="headerlink" title="代码架构"></a>代码架构</h2><p>Tendermint 提供了 GRPC 和 TSP 两种通信方式，C-ABCI 使用了后者，用基于 TCP 协议的 Socket 来完成通信模块。Tendermint 会保持3个连接：内存池连接（Mempool Connection）、共识连接（Consensus Connection）、查询连接（Query Connection），<a href="https://tendermint.com/docs/guides/app-development">三个连接简介</a>。在 C-ABCI 的实现中，每个连接都拥有一个独立的进程来专门处理此连接的所有请求，后期可能会增加用独立线程来处理的版本。</p><p>前面提到 ABCI 是一个接口，对 C 语言来说，它其实就是一个库。C-ABCI 就是一个用 C 语言实现的库，应用程序调用这个库来与 Tendermint 进行数据交互。C-ABCI 对于 Tendermint 与应用程序之间通信的具体数据并不感兴趣，它只是作为一个传递者而已！C-ABCI 与 Tendermint 之间数据的传输是通过 TCP Socket 来实现的，与应用程序之间数据的传输则是通过回调函数来实现的。</p><p>应用程序、C-ABCI、Tendermint 三者之间处理流程：</p><ol><li>Tendermint 向 C-ABCI 发送请求</li><li>C-ABCI 接收请求，并解析数据，然后调用应用程序实现的回调函数，并将解析的数据通过回调函数的参数传递给应用程序</li><li>应用程序所实现的回调函数会根据不同的请求类型对数据进行不同的处理，并将处理的结果通过回调函数的返回值返回给 C-ABCI</li><li>C-ABCI 将返回的结果按照 Tendermint 要求的数据格式进行处理，并将处理的最后数据响应给 Tendermint</li></ol><p>C-ABCI 源码中，一共有 7 个目录，除了 <code>include</code> 目录之外每个目录都代表着一个模块，对于 <code>socket</code>，<code>encoding</code>，<code>dlist</code> 三个目录，是完全独立的，可以移出来放在任何项目中使用，后期有时间会把这三个独立的模块抽取出来继续完善！</p><p>下面具体说明一下每个目录的作用：</p><table><thead><tr><th>目录</th><th>功能</th></tr></thead><tbody><tr><td> include</td><td>头文件目录，包含所有模块的头文件</td></tr><tr><td> socket</td><td>通信模块，主要功能是实现TCP协议的通信，提供了绑定监听端口，连接端口，关闭端口，以及接收，发送数据的接口</td></tr><tr><td> encoding</td><td>字符转换模块，主要功能是实现大小端整型数据与字符串之间的转换，分别提供了大端和小端不同位数的无符号整型与无符号字符串之间互相转换的接口</td></tr><tr><td> dlist</td><td>数据存储模块，主要功能是使用循环双向链表来实现数据的存储，提供了链表的创建，销毁，增加，删除，查找接口</td></tr><tr><td> type</td><td>数据类型处理模块，主要功能是实现数据结构体的的相关操作，提供结构体的创建，销毁等接口。Tendermint使用的数据类型保存在一个types.proto文件中，使用第三方软件protobuf-c软件将此文件生成C文件格式</td></tr><tr><td> core</td><td>C-ABCI的核心模块，主要功能就是实现一个服务端，给应用程序提供了初始化服务，开始服务以及停止服务的接口</td></tr><tr><td> demo</td><td>实现了一个简单的应用程序，关于数据存储使用了dlist模块。</td></tr></tbody></table><h2 id="应用程序示例"><a href="#应用程序示例" class="headerlink" title="应用程序示例"></a>应用程序示例</h2><p>在 C-ABCI 的源码中，<code>demo</code> 目录中实现了一个简单的应用程序，可以参考这个应用程序来实现自己的应用程序。<br>C-ABCI中有多个目录，但是编写一个应用程序不用每个目录都需要去了解，只需要了解：</p><ul><li><code>core</code>：核心模块</li><li><code>type</code>：数据类型处理模块</li></ul><p>下面结合 <code>demo</code> 讲述一下如何使用上面所说的两个模块在 C-ABCI 上编写一个属于自己的应用程序。</p><p>应用程序的 <code>main</code> 函数中只需要调用 <code>core</code> 提供的三个接口，就完成了整个框架的编写（对照 <code>demo</code> 中 <code>main.c</code>理解）</p><h3 id="初始化C-ABCI服务"><a href="#初始化C-ABCI服务" class="headerlink" title="初始化C-ABCI服务"></a>初始化C-ABCI服务</h3><p>此接口是绑定和监听传入的IP地址和端口<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">server_init</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *ipaddr, <span class="keyword">const</span> <span class="keyword">char</span> *port)</span></span>;</span><br></pre></td></tr></table></figure></p><h3 id="启动C-ABCI服务"><a href="#启动C-ABCI服务" class="headerlink" title="启动C-ABCI服务"></a>启动C-ABCI服务</h3><p>只要没有出错，此接口不会返回，会一直等待新的连接，传入的app参数就是由应用程序实现的回调函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">server_start</span><span class="params">(Application app)</span></span></span><br></pre></td></tr></table></figure></p><h3 id="停止C-ABCI服务"><a href="#停止C-ABCI服务" class="headerlink" title="停止C-ABCI服务"></a>停止C-ABCI服务</h3><p>此接口主要是关闭监听的端口<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">server_stop</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></p><p>这样，应用程序的框架代码就已经完成了。剩下所需要做的事情就是实现回调函数了，回调函数的实现:（<strong>demo</strong>中的<strong>dummy.c</strong>）：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">ABCIApplication</span><span class="params">(Types__Request *request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>( request-&gt;value_case )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> TYPES__REQUEST__VALUE_INFO:</span><br><span class="line">            <span class="keyword">return</span> Info();</span><br><span class="line">        <span class="keyword">case</span> TYPES__REQUEST__VALUE_SET_OPTION:</span><br><span class="line">            <span class="keyword">return</span> SetOption(request-&gt;set_option);</span><br><span class="line">        <span class="keyword">case</span> TYPES__REQUEST__VALUE_DELIVER_TX:</span><br><span class="line">            <span class="keyword">return</span> DeliverTx(request-&gt;deliver_tx);</span><br><span class="line">        <span class="keyword">case</span> TYPES__REQUEST__VALUE_CHECK_TX:</span><br><span class="line">            <span class="keyword">return</span> CheckTx(request-&gt;check_tx);</span><br><span class="line">        <span class="keyword">case</span> TYPES__REQUEST__VALUE_COMMIT:</span><br><span class="line">            <span class="keyword">return</span>  Commit();</span><br><span class="line">        <span class="keyword">case</span> TYPES__REQUEST__VALUE_QUERY:</span><br><span class="line">            <span class="keyword">return</span> Query(request-&gt;query);</span><br><span class="line">        <span class="keyword">case</span> TYPES__REQUEST__VALUE_INIT_CHAIN:</span><br><span class="line">            <span class="keyword">return</span> InitChain(request-&gt;init_chain);</span><br><span class="line">        <span class="keyword">case</span> TYPES__REQUEST__VALUE_BEGIN_BLOCK:</span><br><span class="line">            <span class="keyword">return</span> BeginBlock(request-&gt;begin_block);</span><br><span class="line">        <span class="keyword">case</span> TYPES__REQUEST__VALUE_END_BLOCK:</span><br><span class="line">            <span class="keyword">return</span> EndBlock(request-&gt;end_block);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>每个应用程序回调函数的实现都是如此。回调函数的参数是由 C-ABCI 提供，根据不同的请求会有不同的具体实现函数，这些具体实现函数就是应用程序代码编写的重点了，也就是应用程序的业务处理的逻辑代码。业务逻辑代码写完，那么一个应用程序就完成了，剩下的就是编译运行了！</p><p>在 <code>demo</code> 中只实现了个别请求的具体实现，逻辑代码也非常的简单的，只是将请求的数据保存起来而已！demo 中对于数据存储这一块使用的是循环双向链表（ <code>dlist</code> 模块），应用程序可以不用使用C-ABCI提供的数据存储模块（<code>dlist</code>），可以选择其他的数据存储技术，比如树，数据库等等！</p><p>GitHub Wiki:<a href="https://github.com/chainx-org/c-abci/wiki/%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">C-ABCI编译运行出现的问题</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; &lt;/strong&gt;  &lt;Excerpt in index | Homepage Digest&gt;&lt;br&gt;本文主要介绍用 C 语言实现的 Tendermint ABCI，以及如何在此之上构建一个属于自己的应用&lt;/p&gt;
    
    </summary>
    
      <category term="original" scheme="https://lilymoana.github.io/categories/original/"/>
    
    
      <category term="blockchain" scheme="https://lilymoana.github.io/tags/blockchain/"/>
    
      <category term="c" scheme="https://lilymoana.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>DPOS共识算法—缺失的白皮书</title>
    <link href="https://lilymoana.github.io/DPOS.html"/>
    <id>https://lilymoana.github.io/DPOS.html</id>
    <published>2017-09-25T10:52:12.000Z</published>
    <updated>2017-11-22T05:25:28.822Z</updated>
    
    <content type="html"><![CDATA[<p><strong> </strong>  <Excerpt in index | Homepage Digest><br>这是一份缺失的白皮书以及对委托权益共识算法（DPOS）的分析！这篇文章的目的就是提供一个分析，为什么DPOS可以行的通以及是什么使得它很强大！一篇早期对于DPOS介绍的文章可以在<a href="https://bitshares.org/technology/delegated-proof-of-stake-consensus/">bitshares.org</a>看到，不过这篇介绍中也包含了很多不属于真正共识处理的其他方面。</p><a id="more"></a><The rest of contents | Rest of all><p>翻译作者：<a href="https://lilymoana.github.io/">许莉</a><br>原文地址：<a href="https://steemit.com/dpos/@dantheman/dpos-consensus-algorithm-this-missing-white-paper">DPOS Consensus Algorithm</a></p><p>所有的区块链基本上都是一个确定性的状态机，根据交易来行动。共识就是对交易顺序的确定性达成一致以及过滤无效交易的过程。也有很多不同的共识算法能够产生相同的交易顺序，但是通过多年来在多个区块链上的可靠运行，DPOS被证明了是很强大、安全和高效的。</p><h2 id="DPOS共识算法摘要"><a href="#DPOS共识算法摘要" class="headerlink" title="DPOS共识算法摘要"></a>DPOS共识算法摘要</h2><p>DPOS共识算法分为两个部分：选举一群区块生产者和调度生产。选举过程是为了保证利益相关者最终掌握控制权，因为当网络没有正常运行时利益相关者损失的最多。区块生产者是如何选举出来对于共识是如何达成的几乎没有影响。因此，本文主要讲解当一个区块生产者被选举出来之后共识是如何达成的。</p><p>为了解释这个算法，我假设有3个区块生产者：A、B、C。因为共识的达成需要2/3+1多数来解决所有情况，这个简单的模型假设区块生产者C是决胜者。在现实世界中会有21个区块生产者或者更多。就像工作量证明，一般规则就是最长的链胜出。任何时候一个诚实的对端看见一个有效的长链都会将自己从当前的分支切换到最长链上。</p><h2 id="正常流程"><a href="#正常流程" class="headerlink" title="正常流程"></a>正常流程</h2><p>在正常流程下区块生产者会轮流每3秒钟来生产一个区块。假设每次轮流到的人都产生了自己该产生的区块，那么将会产生最长链。区块生产者在不属于自己产生区块之外的其他任何时间间隙产生的区块都是无效的。<br><img src="/asset/dpos_normal.png" alt=""> </p><h2 id="少数者分支"><a href="#少数者分支" class="headerlink" title="少数者分支"></a>少数者分支</h2><p>最多允许1/3的节点可以是恶意的或者存在故障，创造了一个少数者分支。这种情况下少数者分支只会每9秒钟产生一个区块，而多数者分支则会每9秒钟生产2个区块。再一次，诚实的2/3多数者将永远会比少数者分支的链要长。<br><img src="/asset/dpos_minority.png" alt=""> </p><h2 id="未连接的少数者双重生产"><a href="#未连接的少数者双重生产" class="headerlink" title="未连接的少数者双重生产"></a>未连接的少数者双重生产</h2><p>这个少数者可以尝试产生无数的分支，但是所有的分支上的链都会比多数者的链要短，因为少数者被限制区块的生产要比多数者慢。<br><img src="/asset/dpos_disconnect.png" alt=""></p><h2 id="网络分片"><a href="#网络分片" class="headerlink" title="网络分片"></a>网络分片</h2><p>网络完全有可能碎片化，在网络碎片化时没有任何分支拥有多数区块生产者。在这种情况下，最长的链将会在最大的少数者上产生。当网络的连通性恢复之后小一些的少数者会自动的切换到最长链上，明确的共识也随之恢复。<br><img src="/asset/dpos_fragmentation.png" alt=""></p><p>有可能会出现3个分支中2个链长一点的分支，链的长度是一样的。这种情况下当第三个（链短一点的分支）分支上的区块生产者重新加入到网络时就会打破这种平衡。区块生产者的数量是奇数所以这种情况不会维持太长时间。后面我们也会对区块生产者重新洗牌，让生产区块的顺序随机化，来保证即使两个分支拥有相同数量的区块生产者，分支也将会在不同的长度爆发生长，导致一个分支接管另一个分支。</p><h2 id="连接的少数者双重生产"><a href="#连接的少数者双重生产" class="headerlink" title="连接的少数者双重生产"></a>连接的少数者双重生产</h2><p>在这种场景下少数者B在属于他的时间间隙生产2个或者更多其他的区块。下一个预订的区块生产者(C)，也许会选择在任何一个由B生产的区块上生产链。当C生产出一个区块之后，它将会变成一个最长链，所有选择B1的节点都会切换到最长链的分支上。不论少数恶意区块生产者尝试传播多少其他的区块都没有关系，这些区块在最长链中存在的时间永远不会超过一个回合的时间。<br><img src="/asset/dpos_connected.png" alt=""></p><h2 id="最后不可逆区块"><a href="#最后不可逆区块" class="headerlink" title="最后不可逆区块"></a>最后不可逆区块</h2><p>在网络分片事件中是有可能存在多个分支继续生长了一段延长时间。在长期来看，最长的链将会胜出，但是观测者要求有个方法可以确定的知道一个区块绝对是增长最快的链中的一部分。这个可以根据看到区块生产者们的超过2/3的确认消息就能确定。</p><p>在下图中，区块B被C和代表着多数2/3+1确认的A确认过，因此我们可以推测只要2/3的区块生产者都是诚实的那么就没有其他的链会比这个链更长。<br><img src="/asset/dpos_irreversible.png" alt=""></p><p>注意这个“规则”与比特币的6个块确认是相似的。一些聪明的人可以设计出一系列的事件让两个不同的节点在出现在不同的最后不可逆区块上。这种边缘案例要求攻击者能够完全掌控通信延时，并且需要在几分钟之内，不是一次，而是两次使用这个控制力。如果这种事情发生了，那么长期来看，最长链的规则依然有效。我们估计这种攻击事件发生的概率基本为0，而且就算发生了，对于资金基本上造成的影响小到你都不用去担心。</p><h2 id="缺少区块生产者法定数"><a href="#缺少区块生产者法定数" class="headerlink" title="缺少区块生产者法定数"></a>缺少区块生产者法定数</h2><p>虽然可能性比较小，但是也可能存在区块生产者的法定数不明确，这种情况对于少数者还是有可能继续生产块的，在这些块中利益相关者可以包含更改投票的交易。然后这些投票可以选择一群新的区块生产者，让区块生产的参与率恢复到100%。一旦这种情况发生，少数者链将会最终超过其他参与率低于100%的链。</p><p>在这个过程中所有的观察者都将会知道网络状态一直在变化指导区块生产参与率达到了67%。那些选择在这种情况下进行交易的人冒的风险大概跟没有得到6个块确认的交易差不多。他们是在知道有很小的可能性存在共识可能最终选择了一条不同的分叉进行操作的。在现实中这种情况比接收一个少于3个确认的比特币区块要安全的多。</p><h2 id="多数区块生产者腐败"><a href="#多数区块生产者腐败" class="headerlink" title="多数区块生产者腐败"></a>多数区块生产者腐败</h2><p>如果多数的区块生产者都变得腐败，那么他们就可以产生无数的分叉，每个都将以2/3多数确认进行着。在这种情况下，最后不可逆区块算法就会恢复成最长链算法。那么被最大的多数者所认可的链将会成为最长链， 谁是最大的多数者由剩下少数诚实的节点来决定。这种行为不会维持较长的时间，因为利益相关者最终会选择投票替换这些区块生产者。<br><img src="/asset/dpos_corruption.png" alt=""></p><h2 id="交易作为权益证明（TaPoS）"><a href="#交易作为权益证明（TaPoS）" class="headerlink" title="交易作为权益证明（TaPoS）"></a>交易作为权益证明（TaPoS）</h2><p>当用户签名一个交易的时候，他们是在对区块链的状态有个确定猜想下进行签名的。这个猜想建立在他们对近期区块的看法。如果最长链的共识发生了改变，那么可能会使签名者在他们认可交易时产生的猜想无效化。</p><p>由于TaPoS, 当一个区块在链的历史中不存在，所有的交易包括最近一个区块的hash值都被认为是无效的。任何在孤儿分支对交易签名的人将会发现交易是无效的，而且是无法迁移到主分支上的。</p><p>这个处理的一个附带作用就是安全性，可以抵御试图产生替代链的长期攻击。各利益相关方每次在交易的时候都会直接确认区块链。随着时间的流逝，所有的区块都被所有的利益相关者确认，而这一点是无法在伪造的链中被复制的。</p><h2 id="确定的区块生产者洗牌"><a href="#确定的区块生产者洗牌" class="headerlink" title="确定的区块生产者洗牌"></a>确定的区块生产者洗牌</h2><p>在所有的列子中我们展示了区块生产者的循环调度。在现实中一群区块生产者会在N个块（N代表的区块生产者的数量）之后会被洗牌一次。这种随机性保证区块生产者B不会总是忽略区块生产者A，也确保每当有多个相同数量的区块生产者的分叉出现时，僵局都能被打破。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>DPOS在任何能够想得到的自然网络中断情况下还是稳健的，即使面对大多数的区块生产者舞弊也是安全的。不像一些竞争算法，DPOS在多数区块生产者出现故障的时候也可以正常工作。在这个期间，社区可以投票来选择新的区块生产者来代替这些出现故障的区块生产者直到区块生产者的参与率达到100%。我知道没有其他的共识算法可以在如此高频率且多变的失败环境下还能如此稳健。</p><p>DPOS从选择一个选举区块生产者的共识算法而最终获得重要的安全性，并认证节点的高质量和唯一性。使用投票同意的处理机制确保了即使是拥有50%投票权的人，也无法依靠自己的权利选择哪怕一个区块生产者。DPOS旨在优化具有强大网络连接，且名义上诚实节点参与率为100%条件下的性能。这让DPOS有能力在平均1.5s内拥有99.9%的确定性来确认一笔交易，同时以优雅的方式，能在降级服务中恢复。</p><p>其它的共识算法设计来支持较差网络的，和面对非诚实的节点。这将导致最终的可选设计只能是更慢的网络性能，更高的延迟，高通信开销，并且在33%的节点故障时将导致整个网络挂掉。</p><p>在BitShares3年，Steem一年的成功运营中，我们经历了各种网络条件和软件bug。 DPOS已经成功地经历了这种环境，并展示了保持共识时，比任何其他链处理更多的交易时的能力</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; &lt;/strong&gt;  &lt;Excerpt in index | Homepage Digest&gt;&lt;br&gt;这是一份缺失的白皮书以及对委托权益共识算法（DPOS）的分析！这篇文章的目的就是提供一个分析，为什么DPOS可以行的通以及是什么使得它很强大！一篇早期对于DPOS介绍的文章可以在&lt;a href=&quot;https://bitshares.org/technology/delegated-proof-of-stake-consensus/&quot;&gt;bitshares.org&lt;/a&gt;看到，不过这篇介绍中也包含了很多不属于真正共识处理的其他方面。&lt;/p&gt;
    
    </summary>
    
      <category term="translation" scheme="https://lilymoana.github.io/categories/translation/"/>
    
    
      <category term="blockchain" scheme="https://lilymoana.github.io/tags/blockchain/"/>
    
      <category term="consensus" scheme="https://lilymoana.github.io/tags/consensus/"/>
    
  </entry>
  
</feed>
